<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://ibug.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ibug.io/" rel="alternate" type="text/html" /><updated>2021-06-05T07:17:18+00:00</updated><id>https://ibug.io/feed.xml</id><title type="html">iBug</title><subtitle>The little personal site for iBug</subtitle><author><name>iBug</name></author><entry><title type="html">Tunight talk</title><link href="https://ibug.io/blog/2021/04/tunight-talk/" rel="alternate" type="text/html" title="Tunight talk" /><published>2021-04-17T00:00:00+00:00</published><updated>2021-04-17T21:55:43+00:00</updated><id>https://ibug.io/blog/2021/04/tunight-talk</id><content type="html" xml:base="https://ibug.io/blog/2021/04/tunight-talk/">&lt;p&gt;class: center, middle&lt;/p&gt;
				&lt;h1 id=&quot;tech-talk&quot;&gt;Tech Talk&lt;/h1&gt;
				&lt;p&gt;&lt;a href=&quot;//ibug.io&quot;&gt;iBug&lt;/a&gt;
				&lt;br /&gt;
				&lt;a href=&quot;https://lug.ustc.edu.cn&quot;&gt;LUG @ USTC&lt;/a&gt;
				&lt;br /&gt;
				April 17, 2021&lt;/p&gt;
				&lt;hr /&gt;
				&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Intranet of USTCLUG&lt;/li&gt;
				&lt;li&gt;Auto SSL certificate&lt;/li&gt;
				&lt;li&gt;Vlab&lt;/li&gt;
				&lt;li&gt;Miscellaneous&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;h2 id=&quot;intranet-of-ustclug&quot;&gt;Intranet of USTCLUG&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Multiple cloud and on-premises servers in different datacenters&lt;/li&gt;
				&lt;li&gt;Public and internal services
				&lt;ul&gt;
				&lt;li&gt;Public: Mirrors, Auth DNS, Homepage&lt;/li&gt;
				&lt;li&gt;Internal: LDAP, Mail gateway, InfluxDB&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;Layer 2 overlay network
				&lt;ul&gt;
				&lt;li&gt;&lt;a href=&quot;//www.tinc-vpn.org&quot;&gt;Tinc VPN&lt;/a&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;h2 id=&quot;tinc-vpn&quot;&gt;Tinc VPN&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Configured in switch mode&lt;/li&gt;
				&lt;li&gt;Mesh layout&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Bridged within one datacenter (cluster)&lt;/strong&gt;&lt;/li&gt;
				&lt;li&gt;Secured over the Internet&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;iframe src=&quot;https://www.draw.io/?lightbox=1&amp;amp;highlight=0000ff&amp;amp;edit=_blank&amp;amp;layers=1&amp;amp;nav=1&amp;amp;title=LUG%20Network.html#Uhttps%3A%2F%2Fdrive.google.com%2Fa%2F0x01.me%2Fuc%3Fid%3D1WAROAPB8ThTkIjMyFnGvtGgbH-TV4FWh%26export%3Ddownload&quot; frameborder=&quot;0&quot; style=&quot;width: 100%; height: 100%;&quot;&gt;&lt;/iframe&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;automatic-ssl-certificate-issue--renewal&quot;&gt;Automatic SSL certificate issue &amp;amp; renewal&lt;/h2&gt;
				&lt;hr /&gt;
				&lt;hr /&gt;
				&lt;p&gt;Compliance:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Our friend sponsored us a Japan VPS so we resolve most of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ustclug.org&lt;/code&gt; (from outside USTCnet) to it
				&lt;ul&gt;
				&lt;li&gt;We resolve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ustclug.org&lt;/code&gt; to USTCnet when source is also in USTCnet&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;USTC Mirrors has 4 ISP connections (CERNET, Telecom, Mobile, Unicom) and we want to route users by source&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;Solution: Self-hosted Bind9 server
				&lt;ul&gt;
				&lt;li&gt;Return different answers based on source IP (views)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;ul&gt;
				&lt;li&gt;Solution: Self-hosted Bind9 server
				&lt;ul&gt;
				&lt;li&gt;Return different answers based on source IP (views)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Custom authoritative DNS servers&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Git-based DNS management&lt;/li&gt;
				&lt;li&gt;Integration into existing applications?
				&lt;ul&gt;
				&lt;li&gt;We have no easy-to-use API&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;automatic-ssl-certificate-issue--renewal-1&quot;&gt;Automatic SSL certificate issue &amp;amp; renewal&lt;/h2&gt;
				&lt;p&gt;Use an existing API!&lt;/p&gt;
				&lt;hr /&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# apt list ~npython3-certbot-dns&lt;/span&gt;
				python3-certbot-dns-cloudflare    - Doesn&lt;span class=&quot;s1&quot;&gt;'t support sub-zones
				python3-certbot-dns-digitalocean  - [OK]
				python3-certbot-dns-dnsimple      - Paid
				python3-certbot-dns-gandi         - Doesn'&lt;/span&gt;t support sub-zones
				python3-certbot-dns-gehirn        - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Couldn&lt;span class=&quot;s1&quot;&gt;'t determine]
				python3-certbot-dns-google        - Doesn'&lt;/span&gt;t support sub-zones
				python3-certbot-dns-linode        - No account, couldn&lt;span class=&quot;s1&quot;&gt;'t determine
				python3-certbot-dns-ovh           - Could not register account
				python3-certbot-dns-rfc2136       - Performance?
				python3-certbot-dns-route53       - Paid
				python3-certbot-dns-sakuracloud   - Could not register account
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acme.sh&lt;/code&gt;?&lt;/p&gt;
				&lt;hr /&gt;
				&lt;pre&gt;&lt;code class=&quot;language-dns&quot;&gt;_acme-challenge.lug.ustc.edu.cn.     600 IN CNAME  lug.ssl-digitalocean.ustclug.org.
				_acme-challenge.ustclug.org.         600 IN CNAME  lug.ssl-digitalocean.ustclug.org.
				_acme-challenge.proxy.ustclug.org.   600 IN CNAME  lug.ssl-digitalocean.ustclug.org.
				_acme-challenge.mirrors.ustc.edu.cn. 600 IN CNAME  mirrors.ssl-digitalocean.ustclug.org.
				&lt;/code&gt;&lt;/pre&gt;
				&lt;pre&gt;&lt;code class=&quot;language-dns&quot;&gt;ssl-digitalocean.ustclug.org.  86400 IN NS  ns1.digitalocean.com.
				86400 IN NS  ns2.digitalocean.com.
				86400 IN NS  ns3.digitalocean.com.
				&lt;/code&gt;&lt;/pre&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acme.sh &lt;span class=&quot;nt&quot;&gt;--issue&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--dns&lt;/span&gt; dns_dgon &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--domain-alias&lt;/span&gt; lug.ssl-digitalocean.ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; lug.ustc.edu.cn &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.lug.ustc.edu.cn &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.proxy.ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--cert-file&lt;/span&gt; cert/lug/cert.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--key-file&lt;/span&gt; cert/lug/privkey.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--fullchain-file&lt;/span&gt; cert/lug/fullchain.pem
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acme.sh &lt;span class=&quot;nt&quot;&gt;--issue&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--dns&lt;/span&gt; dns_dgon &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--domain-alias&lt;/span&gt; mirrors.ssl-digitalocean.ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mirrors.ustc.edu.cn &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.mirrors.ustc.edu.cn &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--cert-file&lt;/span&gt; cert/mirrors/cert.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--key-file&lt;/span&gt; cert/mirrors/privkey.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--fullchain-file&lt;/span&gt; cert/mirrors/fullchain.pem
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; cert add &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
				git &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; cert &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; user.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;GitHub &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; user.email&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;noreply@github.com commit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Update certificates on &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-%m-%d&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tformat:[%h] %an: %s'&lt;/span&gt; HEAD&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				git &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; cert push
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;vlab&quot;&gt;Vlab&lt;/h2&gt;
				&lt;hr /&gt;
				&lt;p&gt;&lt;img src=&quot;https://vlab.ustc.edu.cn/docs/images/home.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: false
				class: center, middle&lt;/p&gt;
				&lt;div&gt;&lt;img src=&quot;https://vlab.ustc.edu.cn/docs/images/vlab-in-browser.jpg&quot; /&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;vlab-1&quot;&gt;Vlab&lt;/h2&gt;
				&lt;hr /&gt;
				&lt;ul&gt;
				&lt;li&gt;Xilinx Vivado
				&lt;ul&gt;
				&lt;li&gt;Multiple GBs of &lt;em&gt;slow&lt;/em&gt; downloading&lt;/li&gt;
				&lt;li&gt;Hard to setup and maintain&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Other software (MATLAB, Wolfram Mathematica etc.)
				&lt;ul&gt;
				&lt;li&gt;Same size &amp;amp; complexity issues&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;
				&lt;s&gt;Another VPS provider&lt;/s&gt;
				&lt;/li&gt;
				&lt;li&gt;LXC containers
				&lt;ul&gt;
				&lt;li&gt;Lightweight&lt;/li&gt;
				&lt;li&gt;Host-manageable&lt;/li&gt;
				&lt;li&gt;System container (&lt;s&gt;application container&lt;/s&gt;)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;ul&gt;
				&lt;li&gt;Sharing &amp;amp; Isolation&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;Storage allocation: LVM
				&lt;ul&gt;
				&lt;li&gt;iSCSI isn’t multi-mount-aware&lt;/li&gt;
				&lt;li&gt;ZFS doesn’t support&lt;/li&gt;
				&lt;li&gt;NFS = SPOF&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;But why does LVM work?&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;strong&gt;“Activated volume”&lt;/strong&gt;
				&lt;ul&gt;
				&lt;li&gt;PVE native support: Only activate volumes in use by VMs/CTs&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;Network isolation: VXLAN
				&lt;ul&gt;
				&lt;li&gt;&lt;span style=&quot;color: salmon;&quot;&gt;❤&lt;/span&gt; -50&lt;/li&gt;
				&lt;li&gt;Solution: Increase host &lt;span style=&quot;color: salmon;&quot;&gt;❤&lt;/span&gt; to 1550&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;p&gt;User access:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;VNC unified login
				&lt;ul&gt;
				&lt;li&gt;10,000 lines of C++ (by &lt;a href=&quot;//github.com/pdlan&quot;&gt;pdlan&lt;/a&gt;)
				&lt;ul&gt;
				&lt;li&gt;Identify users via VNC login username
				&lt;ul&gt;
				&lt;li&gt;Multi VM selection: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username:id&lt;/code&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Queries Django for VM information&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Browser login: noVNC&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;SSH unified login
				&lt;ul&gt;
				&lt;li&gt;Modified from &lt;a href=&quot;//github.com/tg123/sshpiper&quot;&gt;tg123/sshpiper&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;Pubkey-based user identificaion
				&lt;ul&gt;
				&lt;li&gt;Certificate-based VM access&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Browser login: Wetty (alpha)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: false&lt;/p&gt;
				&lt;iframe src=&quot;https://vlab.ustc.edu.cn/grafana/d-solo/2/vlab-usage-statistics?orgId=1&amp;amp;from=1587065070291&amp;amp;to=1618601070291&amp;amp;theme=light&amp;amp;panelId=2&quot; frameborder=&quot;0&quot; style=&quot;width: 100%; height: 100%;&quot;&gt;&lt;/iframe&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h2&gt;
				&lt;hr /&gt;
				&lt;ul&gt;
				&lt;li&gt;Protect ports of VM from host (iptables)
				&lt;ul&gt;
				&lt;li&gt;SSH-based “authentication” ✔&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:INPUT DROP &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:0]
				&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
				:iBug - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:0]
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; conntrack &lt;span class=&quot;nt&quot;&gt;--ctstate&lt;/span&gt; RELATED,ESTABLISHED &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; lo &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; iBug
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; BLOCK
				&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; iBug &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; icmp &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; iBug &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; multiport &lt;span class=&quot;nt&quot;&gt;--dports&lt;/span&gt; 22,80,443,8888,25565 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; iBug &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--match-set&lt;/span&gt; home src &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 3389 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; BLOCK
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/iptables/ipsets&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create home &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;:ip family inet &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;600
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/rc&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BASH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /bin/bash &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
				&lt;span class=&quot;k&quot;&gt;fi
				&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_ssh_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SSH_CONNECTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%% *&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;_ppid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PPID&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;nohup&lt;/span&gt; /home/ubuntu/.local/bin/_ssh_refresh_client &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ssh_client&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ppid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &amp;amp; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ssh_refresh_client&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BASH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /bin/bash &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;fi
				&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_ssh_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;_ppid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ppid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 2&amp;gt;/dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ipset &lt;span class=&quot;nt&quot;&gt;-exist&lt;/span&gt; add home &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ssh_client&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;300
				&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;60
				&lt;span class=&quot;k&quot;&gt;done
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: false&lt;/p&gt;
				&lt;h2 id=&quot;your-notification-center&quot;&gt;&lt;em&gt;Your&lt;/em&gt; notification center&lt;/h2&gt;
				&lt;p&gt;&lt;a href=&quot;https://github.com/iBug/rss-to-telegram&quot;&gt;iBug/rss-to-telegram&lt;/a&gt;&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rss-to-telegram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
				&lt;hr /&gt;
				&lt;h2 id=&quot;cloudflare-worker-makes-free-file-sharing-site&quot;&gt;Cloudflare Worker makes free file sharing site&lt;/h2&gt;
				&lt;p&gt;&lt;a href=&quot;https://github.com/iBug/cf-github-releases&quot;&gt;iBug/cf-github-releases&lt;/a&gt;&lt;/p&gt;
				&lt;p&gt;&lt;a href=&quot;https://download.ibugone.com&quot;&gt;My demo site&lt;/a&gt; (&lt;a href=&quot;https://github.com/iBug/Archive/releases&quot;&gt;Repository&lt;/a&gt;)&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/cloudflare/cf-github-releases.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
				&lt;hr /&gt;
				&lt;p&gt;class: center, middle
				layout: false&lt;/p&gt;
				&lt;h1 id=&quot;thank-you&quot;&gt;Thank you!&lt;/h1&gt;</content><author><name>iBug</name></author><summary type="html">class: center, middle</summary></entry><entry><title type="html">Setting up a GitHub webhook on AWS Lambda</title><link href="https://ibug.io/blog/2021/02/github-webhook-on-aws-lambda/" rel="alternate" type="text/html" title="Setting up a GitHub webhook on AWS Lambda" /><published>2021-02-19T00:00:00+00:00</published><updated>2021-02-27T03:04:22+00:00</updated><id>https://ibug.io/blog/2021/02/github-webhook-on-aws-lambda</id><content type="html" xml:base="https://ibug.io/blog/2021/02/github-webhook-on-aws-lambda/">&lt;p&gt;Last month I set up my own Telegram bot for GitHub event notification. To receive GitHub events via webhook, a receiver is needed. True, it isn’t hard to write a &lt;a href=&quot;https://palletsprojects.com/p/flask/&quot;&gt;Flask&lt;/a&gt; or &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; server and throw the whole thing onto a VPS, but thinking about the complexity and maintenance efforts, serverless platforms like AWS Lambda smells like a better fit. So I decided to take this opportunity to begin my exploration to “the serverless industry”.&lt;/p&gt;
				&lt;p&gt;&lt;small&gt;&lt;a href=&quot;/p/41-cn&quot;&gt;There’s a Chinese version of this article / 本文还有中文版&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
				&lt;h2 id=&quot;aws-lambda&quot;&gt;Setting up AWS Lambda&lt;/h2&gt;
				&lt;p&gt;I have had an AWS account for years, so I’ll skip the sign-up process in this article and head straight to &lt;a href=&quot;https://console.aws.amazon.com/&quot;&gt;AWS Management Console&lt;/a&gt;.&lt;/p&gt;
				&lt;p&gt;Locate the &lt;a href=&quot;https://console.aws.amazon.com/lambda/home&quot;&gt;&lt;strong&gt;Lambda&lt;/strong&gt;&lt;/a&gt; entry in the list of AWS services. It’s in the first group so should be easy to spot.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/console-home-1.png&quot; alt=&quot;AWS Management Console Home&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;And then we create a new Lambda function, selecting Python 3.8 as the runtime environment&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/lambda-create-function-1.png&quot; alt=&quot;Create new Lambda function&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;After clicking “Create”, you’ll be brought to the edit page of that function, with the following code filled in as a starting point.&lt;/p&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;# TODO implement
				&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello from Lambda!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We don’t know what this code can do for now, so let’s put it aside and turn to the API Gateway part, since eventually we’ll use it as the webhook receiver endpoint.&lt;/p&gt;
				&lt;h2 id=&quot;api-gateway&quot;&gt;Setting up AWS API Gateway&lt;/h2&gt;
				&lt;p&gt;Open the &lt;a href=&quot;https://console.aws.amazon.com/apigateway/main&quot;&gt;AWS API Gateway console&lt;/a&gt; and click &lt;strong&gt;Create API&lt;/strong&gt; on the top right.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-new-1.png&quot; alt=&quot;Create API&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;On the next screen, we add our Lambda function created earlier as an integration here.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-new-2.png&quot; alt=&quot;Configure integrations&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Then it turns to Routes. Routes describe how HTTP endpoints are mapped to integrations (receivers). An example (default) route is pre-filled in the dialog.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-routes-1.png&quot; alt=&quot;Configure routes (1)&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Since we have our Lambda function as the only integration here, we want to process actual routes by ourselves. Delete that path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/myGitHubWebhook&lt;/code&gt; and enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$default&lt;/code&gt; into that box. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$default&lt;/code&gt; is a special value that once entered, the “method” dropdown greys out.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-routes-2.png&quot; alt=&quot;Configure routes (2)&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;We can now visit our API to see if it works.&lt;/p&gt;
				&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;ubuntu@iBug-Server:~ $&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl https://nad73szpz7.execute-api.us-east-1.amazonaws.com/
				&lt;span class=&quot;go&quot;&gt;&quot;Hello from Lambda!&quot;
				&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;ubuntu@iBug-Server:~ $&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;lambda-code&quot;&gt;Coding for Lambda&lt;/h2&gt;
				&lt;p&gt;With the infrastructure set up, we should now write our code for the GitHub webhook receiver.&lt;/p&gt;
				&lt;p&gt;We need to first know how the client request is passed to our Lambda function. This is not hard to figure out with some simple code that just spits out what it receives. To save some time, I’ve done this so you don’t have to. Here’s what you’d receive via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; object passed to the Lambda function entry. Keep in mind that it’s a dictionary in Python.&lt;/p&gt;
				&lt;details&gt;
				&lt;summary&gt;
				&lt;p&gt;Example content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; object&lt;/p&gt;
				&lt;/summary&gt;
				&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;routeKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rawPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/api-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rawQueryString&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;taoky=strong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gzip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cdn-loop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cloudflare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-connecting-ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:db8::1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-ipcountry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;XX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-pseudo-ipv4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;255.255.255.255&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-ray&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8b8cca72b23e09a5-NRT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-request-id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d2160d7f1100000738c5e62000000001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-visitor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;content-length&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;curl/7.68.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-amzn-trace-id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Root=1-8dab11ae-d63d4eec890259ddab5a7709&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-forwarded-for&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:db8::1, 162.158.118.243&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-forwarded-port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;443&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-forwarded-proto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-custom-header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;queryStringParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;taoky&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;strong&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;requestContext&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accountId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;166333366666&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;apiId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nad73szpz7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;domainName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;domainPrefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/api-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;protocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceIp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 162.158.118.243&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;userAgent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;curl/7.68.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;requestId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ZcOQCw-WICLEQdg=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;routeKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;20/Jan/2021:16:40:00 +0000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;timeEpoch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1611160800000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cg==&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;/details&gt;
				&lt;p&gt;A few notes about the content:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isBase64Encoded&lt;/code&gt; refers to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; item. In the above example, the actual POST content is a single newline.-&lt;/li&gt;
				&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; may be absent for requests that doesn’t send data, like a GET request.&lt;/li&gt;
				&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headers&lt;/code&gt; are all in lowercase which is in line with HTTP/2 specifications. &lt;strong&gt;It could be due to me placing my custom domain behind Cloudflare.&lt;/strong&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;With that in mind, we can expand the boilerplate Lambda function:&lt;/p&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rawPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/api-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'headers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/github-webhook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;# TODO Write webhook receiver code
				&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The actual webhook processing code shouldn’t be too difficult to write. For example, here’s an example of verifying GitHub via the HMAC signature:&lt;/p&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;
				&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
				&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hmac&lt;/span&gt;
				&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MY_ENV_VAR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'headers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x-hub-signature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'isBase64Encoded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;hashsum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashsum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bad signature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;# Do whatever you want
				&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;lambda-environment-variables&quot;&gt;Adding environment variables&lt;/h3&gt;
				&lt;p&gt;As shown in the example above, I put the webhook secret in an environment variable. We need to add it to our Lambda function before it could be used.&lt;/p&gt;
				&lt;p&gt;Doing so is straightforward. Head to Lambda console and select the function, then scroll down to &lt;em&gt;Environment variables&lt;/em&gt; section, where you can manage variables for this Lambda function.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/lambda-environment-variables-1.png&quot; alt=&quot;Lambda - Environment variables&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;h2 id=&quot;customization&quot;&gt;Customizing the webhook&lt;/h2&gt;
				&lt;p&gt;Now we’ve got all the foundation established, we can do whatever we want with it. Here are some ideas that could try with:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Connect to Slack and send a notification for every push or CI run result (&lt;a href=&quot;https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#check_run&quot;&gt;the event is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_run&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
				&lt;li&gt;Connect to a Telegram bot and send a message to you for your subscribed events&lt;/li&gt;
				&lt;li&gt;Start a Netlify or Vercel build or deployment&lt;/li&gt;
				&lt;li&gt;Start GitHub Actions on another repository&lt;/li&gt;
				&lt;li&gt;and many more possibilities…&lt;/li&gt;
				&lt;/ul&gt;
				&lt;h2 id=&quot;custom-domain&quot;&gt;Bonus: Adding a custom domain&lt;/h2&gt;
				&lt;p&gt;Before calling this an article, there’s one more thing I’d like to cover. A custom domain is handy so that you’re in full control of your API, and fortunately AWS API Gateway &lt;em&gt;does&lt;/em&gt; support this.&lt;/p&gt;
				&lt;p&gt;You may have already noticed the &lt;em&gt;Custom Domain Names&lt;/em&gt; on the left pane of API Gateway console, so it’s time to pay that a visit.&lt;/p&gt;
				&lt;p&gt;The box on the left with a title &lt;em&gt;Domain names&lt;/em&gt; is where we need to start from. Click the big &lt;strong&gt;Create&lt;/strong&gt; button and enter your custom domain dedicated for AWS API Gateway, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api.example.com&lt;/code&gt;, and click the bridge red button on the bottom right to save the settings. You don’t have to change any other things there as the defaults just work.&lt;/p&gt;
				&lt;p&gt;Now you should see this screen:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-custom-domain-1.png&quot; alt=&quot;API Gateway - Custom domain&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Head to your DNS provider and add a CNAME record for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api.example.com&lt;/code&gt; pointing to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute-api&lt;/code&gt; domain shown there. If you’re using Cloudflare, you can safely turn on the CDN setting (the orange cloud icon) to enjoy Cloudflare’s faster global network.&lt;/p&gt;
				&lt;p&gt;Next we’ll add “API mapping” for our custom domain. Select the &lt;em&gt;API mapping&lt;/em&gt; tab in the center of the above image and click &lt;strong&gt;Configure API mappings&lt;/strong&gt; on the right. Add a new mapping, select your API and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$default&lt;/code&gt; stage, and give it a subpath if you want, like shown below:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-custom-domain-2.png&quot; alt=&quot;API Gateway - Custom domain - API mapping&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;dont-worry-about-your-subpath&quot;&gt;&lt;i class=&quot;fas fa-fw fa-sun&quot;&gt;&lt;/i&gt; Don’t worry about your subpath&lt;/h4&gt;
				&lt;p&gt;API Gateway will automatically strip the path before passing it to the Lambda function. This means if you set the path to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/hello&lt;/code&gt; and visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.example.com/hello/world&lt;/code&gt;, your Lambda function will still see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rawPath&lt;/code&gt; key being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/world&lt;/code&gt;. You don’t have to change your code to adapt this part. Very convenient, isn’t it?&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Now our GitHub webhook receiver will start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.example.com/github&lt;/code&gt;, and our “API test” endpoint will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.example.com/github/api-test&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;You may need to configure AWS Certificate Manager to obtain a valid SSL certificate for use on AWS, so that your API is accessible through HTTPS, depending on your domain settings. With Cloudflare this is unnecessary and you can safely ignore it.&lt;/p&gt;
				&lt;h2 id=&quot;others&quot;&gt;Other notes&lt;/h2&gt;
				&lt;p&gt;AWS Lambda provides 400,000 GB-seconds of execution for free each month, and this Free Tier does not expire. However, AWS API Gateway doesn’t have a perpetual Free Tier offer, and their standard pricing is US$1 per 1M API calls. The cost on this part is generally low unless you’re making a public service (that becomes popular).&lt;/p&gt;
				&lt;p&gt;Besides, AWS provides 1 GB of free outbound traffic each month, and bills you at US$0.09 per GB thereafter. This means you’ll need to be careful when generating a lot of traffic, like frequently uploading large images.&lt;/p&gt;
				&lt;p&gt;All pricing examples are based on US East 1 (N. Virginia) region. Other regions are generally more expensive than this, so watch your bills if you make something big.&lt;/p&gt;</content><author><name>iBug</name></author><category term="github" /><category term="aws" /><summary type="html">Last month I set up my own Telegram bot for GitHub event notification. To receive GitHub events via webhook, a receiver is needed. True, it isn’t hard to write a Flask or Sinatra server and throw the whole thing onto a VPS, but thinking about the complexity and maintenance efforts, serverless platforms like AWS Lambda smells like a better fit. So I decided to take this opportunity to begin my exploration to “the serverless industry”.</summary></entry><entry><title type="html">Fix traceroute not showing intermediate results in a virtual machine on Windows</title><link href="https://ibug.io/blog/2021/02/traceroute-from-vmware/" rel="alternate" type="text/html" title="Fix traceroute not showing intermediate results in a virtual machine on Windows" /><published>2021-02-04T00:00:00+00:00</published><updated>2021-02-10T19:09:18+00:00</updated><id>https://ibug.io/blog/2021/02/traceroute-from-vmware</id><content type="html" xml:base="https://ibug.io/blog/2021/02/traceroute-from-vmware/">&lt;p&gt;Today when I was running some networking diagnostics from an Ubuntu inside VMware Workstation, I noticed this strange result from &lt;a href=&quot;https://en.wikipedia.org/wiki/MTR_(software)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mtr&lt;/code&gt; (My Traceroute)&lt;/a&gt;:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/traceroute-failure.png&quot; alt=&quot;MTR with all intermediate hops blank&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;This doesn’t look right. Googling around brought me to this page: &lt;a href=&quot;https://communities.vmware.com/t5/VMware-Workstation-Player/traceroute-from-Ubuntu-just-shows-first-and-last-hops-on/m-p/1677263&quot;&gt;traceroute from Ubuntu just shows first and last hops on VMPlayer 3.1.4 - VMware Technology Network VMTN&lt;/a&gt;&lt;/p&gt;
				&lt;p&gt;The answers in that thread mentioned two points:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;em&gt;On the other hand once I switched to bridge, everything works.&lt;/em&gt;&lt;/li&gt;
				&lt;li&gt;&lt;em&gt;What about the intermediary requests, well the answers come back but somehow they are blocked by the Windows firewall.&lt;/em&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;I immediately realized that it’s because &lt;strong&gt;Windows Firewall blocked responses from the intermediate hops&lt;/strong&gt;.&lt;/p&gt;
				&lt;h2 id=&quot;the-answer&quot;&gt;The answer&lt;/h2&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;the-short-answer&quot;&gt;&lt;i class=&quot;fas fa-shield-check&quot;&gt;&lt;/i&gt; The short answer&lt;/h4&gt;
				&lt;p&gt;The responses from the intermediate routers aren’t “expected” and are blocked off by Windows Firewall.&lt;/p&gt;
				&lt;/div&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;the-long-answer&quot;&gt;The long answer&lt;/h4&gt;
				&lt;p&gt;Windows Firewall has a built-in connection tracking mechanism, similar to that of Linux (conntrack). Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mtr&lt;/code&gt; sends &lt;a href=&quot;https://en.wikipedia.org/wiki/Ping_(networking_utility)#Echo_request&quot;&gt;pings (ICMP Echo Requests)&lt;/a&gt; to the target host, Windows Firewall is expecting ICMP Echo Replies from the target host as the correct response. However, traceroute works by sending packets with TTL starting from 1 until it reaches the target host, and receiving “timed out” notices from the intermediate routers when the packet “dies from time”. This creates two discrepancies:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;The responses are ICMP Time Exceeded packets, not Echo Replies.&lt;/li&gt;
				&lt;li&gt;The responses come from the intermediate routers, not the target host.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;This unfortunately somehow “broke” the connection tracking mechanism in Windows Firewall, and leads to the responses being blocked off by Windows Firewall by default.&lt;/p&gt;
				&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
				&lt;div class=&quot;notice--warning&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;the-short-solution&quot;&gt;&lt;i class=&quot;fas fa-shield-check&quot;&gt;&lt;/i&gt; The short solution&lt;/h4&gt;
				&lt;p&gt;Just turn off Windows Firewall entirely. &lt;strong&gt;You probably don’t want to or shouldn’t do this.&lt;/strong&gt; Read on for the complete and real solution.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;The correct solution to this problem is to let the intermediary responses through Windows Firewall. To actually do this, we’ll &lt;strong&gt;create a new firewall rule that allows ICMP Time Exceeded packets to come in&lt;/strong&gt;. You can stop here now if you know how to configure Windows Firewall.&lt;/p&gt;
				&lt;p&gt;Step-by-step solution:&lt;/p&gt;
				&lt;ol&gt;
				&lt;li&gt;Open &lt;strong&gt;Windows Defender Firewall with Advanced Security&lt;/strong&gt; (at least it’s called as such on my Windows 10). This can be done in two ways:
				&lt;ul&gt;
				&lt;li&gt;Go to &lt;strong&gt;Start&lt;/strong&gt; → &lt;strong&gt;Windows Administrative Tools&lt;/strong&gt; → &lt;strong&gt;Windows Defender Firewall with Advanced Security&lt;/strong&gt;&lt;/li&gt;
				&lt;li&gt;Or hit &lt;strong&gt;&lt;kbd&gt;&lt;i class=&quot;fab fa-fw fa-windows&quot;&gt;&lt;/i&gt;Win&lt;/kbd&gt;+&lt;kbd&gt;R&lt;/kbd&gt;&lt;/strong&gt;, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WF.msc&lt;/code&gt; and hit Enter.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Select &lt;strong&gt;Inbound Rules&lt;/strong&gt; on the left and then &lt;strong&gt;New Rule…&lt;/strong&gt; on the right.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/m1suMs.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Follow the prompt to create a new rule. Select the following options for each step. Note that the desired options are selected by default in some steps so you can simply click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Rule Type: &lt;strong&gt;Custom&lt;/strong&gt;&lt;/li&gt;
				&lt;li&gt;Program: &lt;strong&gt;All programs&lt;/strong&gt; (just click Next)&lt;/li&gt;
				&lt;li&gt;Protocol and Ports:
				&lt;ul&gt;
				&lt;li&gt;Protocol type: &lt;strong&gt;ICMPv4&lt;/strong&gt;&lt;/li&gt;
				&lt;li&gt;&lt;em&gt;(Optional)&lt;/em&gt; Internet Control Message Protocol (ICMP) settings: Click &lt;strong&gt;Customize&lt;/strong&gt; → Select &lt;strong&gt;Specific ICMP types&lt;/strong&gt; and tick &lt;strong&gt;Time Exceeded&lt;/strong&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Scope: &lt;strong&gt;Any IP address&lt;/strong&gt; for both (just click Next)&lt;/li&gt;
				&lt;li&gt;Action: &lt;strong&gt;Allow&lt;/strong&gt; (just click Next)&lt;/li&gt;
				&lt;li&gt;Profile: Select all (just click Next)&lt;/li&gt;
				&lt;li&gt;Name: &lt;strong&gt;Core Networking - Time Exceeded (ICMPv4-In)&lt;/strong&gt; (apparently just any name you prefer)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;Click &lt;strong&gt;Finish&lt;/strong&gt; and you should immediately see intermediate hops if you’re using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mtr&lt;/code&gt;. For example:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/traceroute-ok.png&quot; alt=&quot;MTR correctly functioning&quot; /&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Repeat the above steps but select &lt;strong&gt;ICMPv6&lt;/strong&gt; for &lt;em&gt;Protocol type&lt;/em&gt; if you want to enable IPv6 traceroute. Don’t forget to give it a different name (e.g. &lt;em&gt;(ICMPv6-In)&lt;/em&gt; at the end).&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;In my case there’s already a built-in rule named &lt;strong&gt;Core Networking - Time Exceeded (ICMPv6-In)&lt;/strong&gt; which is even enabled by default. If you find it there, you can simply enable it.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ol&gt;
				&lt;h3 id=&quot;bonus&quot;&gt;Bonus&lt;/h3&gt;
				&lt;p&gt;If you want to make your rule &lt;em&gt;more solid&lt;/em&gt; and &lt;em&gt;look&lt;/em&gt; “canonical”, you can add it to the built-in system group &lt;strong&gt;Core Networking&lt;/strong&gt; with the help of PowerShell.&lt;/p&gt;
				&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-NetFirewallRule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-DisplayName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Core Networking - Time Exceeded (ICMPv4-In)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Core Networking&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-NetFirewallRule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Your new rule will look like this after running the above commands. You may need to restart the Windows Firewall window to see changes.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/windows/core-networking-time-exceeded-icmpv4-in.png&quot; alt=&quot;New Rule&quot; /&gt;&lt;/p&gt;
				&lt;hr /&gt;
				&lt;p&gt;This article was originally written as &lt;a href=&quot;https://superuser.com/a/1623001/688600&quot;&gt;an answer on Super User&lt;/a&gt;.&lt;/p&gt;</content><author><name>iBug</name></author><category term="networking" /><category term="windows" /><summary type="html">Today when I was running some networking diagnostics from an Ubuntu inside VMware Workstation, I noticed this strange result from mtr (My Traceroute):</summary></entry><entry><title type="html">A Deep Dive into Containers</title><link href="https://ibug.io/blog/2021/01/linux-container-explained/" rel="alternate" type="text/html" title="A Deep Dive into Containers" /><published>2021-01-31T00:00:00+00:00</published><updated>2021-02-05T15:47:37+00:00</updated><id>https://ibug.io/blog/2021/01/linux-container-explained</id><content type="html" xml:base="https://ibug.io/blog/2021/01/linux-container-explained/">&lt;p&gt;Since years ago, containers have been a hot topic everywhere. There are many container softwares like &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, &lt;a href=&quot;https://linuxcontainers.org/&quot;&gt;Linux Containers&lt;/a&gt; and &lt;a href=&quot;https://sylabs.io/singularity/&quot;&gt;Singularity&lt;/a&gt;. It’s hard to say one &lt;em&gt;understand&lt;/em&gt; what containers are without diving into all the gory details of them, so I decided to go on this exploration myself.&lt;/p&gt;
				&lt;p&gt;The actual motivation was (quite) a bit different, though, as I was a TA of &lt;em&gt;Operating Systems (H)&lt;/em&gt; in Spring 2020, and I wanted to bring a wave of innovation into the course labs, so I worked this out very early.&lt;/p&gt;
				&lt;p&gt;The contents in this article are listed in the Table of Contents &lt;span class=&quot;wide-only&quot;&gt;on the right&lt;/span&gt;&lt;span class=&quot;nonwide-only&quot;&gt;at the top of this page&lt;/span&gt;. My implementation in my GitHub repository and the original lab documents (which is also written primarily by me, in Chinese) are linked right above.&lt;/p&gt;
				&lt;p&gt;My test environment is Ubuntu 18.04 LTS (Kernel 5.3, HWE 18.04). In case of any difference, you can consult Google for details.&lt;/p&gt;
				&lt;p&gt;If you want to find out the exact system calls involved in a command-line tool, &lt;a href=&quot;https://strace.io/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strace&lt;/code&gt;&lt;/a&gt; is your friend.&lt;/p&gt;
				&lt;div class=&quot;notice--warning&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;code-samples-have-a-different-license-than-this-article&quot;&gt;&lt;i class=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt; Code samples have a different license than this article&lt;/h4&gt;
				&lt;p&gt;While this article is licensed under the CC BY-SA 4.0 license, code samples and snippets are taken from the GitHub repository, which is licensed under &lt;a href=&quot;https://github.com/iBug/iSpawn/blob/master/LICENSE&quot;&gt;the GPL-3.0 license&lt;/a&gt;.&lt;/p&gt;
				&lt;/div&gt;
				&lt;h2 id=&quot;experimenting&quot;&gt;Experimenting with isolation&lt;/h2&gt;
				&lt;p&gt;Before we jump straight to writing code, let’s warm ourselves up by playing with an existing, minimal container implementation, to get a better idea of our target.&lt;/p&gt;
				&lt;h3 id=&quot;rootfs&quot;&gt;Preparing the root filesystem&lt;/h3&gt;
				&lt;p&gt;To keep things simple, we’re going to use the system images from the LXC project. Grab the latest Ubuntu image from &lt;a href=&quot;https://images.linuxcontainers.org/images/ubuntu/&quot;&gt;https://images.linuxcontainers.org/images/ubuntu/&lt;/a&gt;, unzip it to somewhere convenient for you, and this part is &lt;em&gt;almost&lt;/em&gt; done.&lt;/p&gt;
				&lt;p&gt;If you’re on a “modern” distro like latest Ubuntu, Debian or Fedora, you need to populate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/machine-id&lt;/code&gt; file in the container image with a valid “machine ID”, because systemd needs it. A simple way to do this is&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-machine-id-setup &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/your/rootfs
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If you’re running systemd 240 or later, there’s a better neat tool for this job:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-id128 new &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /path/to/your/rootfs/etc/machine-id
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;chroot&quot;&gt;Playing with chroot&lt;/h3&gt;
				&lt;p&gt;&lt;a href=&quot;https://wiki.debian.org/chroot&quot;&gt;chroot&lt;/a&gt; is an old way to limit the directory tree a process (and its subprocesses) can see to a specific subtree. Under normal circumstances, processes cannot see anything outsite the chroot’d directory. This is called a &lt;em&gt;chroot jail&lt;/em&gt;. Understanding the concepts of chroot is an important first step to understanding containers, though a typical container does &lt;em&gt;not&lt;/em&gt; use chroot (more on this below).&lt;/p&gt;
				&lt;p&gt;Using chroot is very easy:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;chroot&lt;/span&gt; /path/to/your/rootfs
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You now get a shell inside the &lt;em&gt;chroot jail&lt;/em&gt;. You can perform file-based operation like running “regular” commands and editing system files. All changes are saved in this “container rootfs”. You can even try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install vim&lt;/code&gt; and see if it works.&lt;/p&gt;
				&lt;p&gt;As you’re probably aware, chroot is just too simple and sometimes naive to be secure. You can try the following commands, but be sure to save your work. &lt;strong&gt;Proceed with caution!&lt;/strong&gt;&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reboot
				mount
				&lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/sda &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4k &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
				&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;systemd-nspawn&quot;&gt;Playing with systemd-nspawn&lt;/h3&gt;
				&lt;p&gt;As you can see, chroot lacks too many security constaints. &lt;a href=&quot;https://wiki.debian.org/nspawn&quot;&gt;Systemd-nspawn&lt;/a&gt;, on the other hand, is a &lt;em&gt;complete&lt;/em&gt; container implementation and is thus secure against random programs.&lt;/p&gt;
				&lt;p&gt;Using systemd-nspawn is equally easy:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/your/rootfs
				systemd-nspawn
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now repeat your experiments in the chroot section and carefully observe the differences.&lt;/p&gt;
				&lt;h2 id=&quot;base-program&quot;&gt;The base program&lt;/h2&gt;
				&lt;p&gt;After getting your rootfs up for rocking, we’ll start with a fairly simple chroot-based program, modify it step-by-step, until it becomes the container we want.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
				#include &amp;lt;unistd.h&amp;gt;
				#include &amp;lt;sys/types.h&amp;gt; // For wait(2)
				#include &amp;lt;sys/wait.h&amp;gt;  // For wait(2)
				&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;Usage: %s &amp;lt;directory&amp;gt; &amp;lt;command&amp;gt; [args...]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;  Run &amp;lt;directory&amp;gt; as a container and execute &amp;lt;command&amp;gt;.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;error_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Child goes for target program&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chroot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;error_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;chroot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;execvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;error_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Parent waits for child&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIFEXITED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exited with status %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WEXITSTATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ecode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WEXITSTATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIFSIGNALED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Killed by signal %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WTERMSIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ecode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WTERMSIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;namespaces&quot;&gt;Namespaces&lt;/h2&gt;
				&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_namespaces&quot;&gt;Namespaces&lt;/a&gt; are a fundamental aspect of Linux containers. They provide isolation for a variety of mission-critical system resources like process IDs, hostnames, network stacks and inter-process communication. They are the key to making containers “look independent” from the host system.&lt;/p&gt;
				&lt;p&gt;As of Linux kernel 5.6 released in April 2020, there are 8 kinds of namespaces present:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;strong&gt;Mount namespace&lt;/strong&gt; isolates mount points (visibility) from the parent. New mount activities in the parent namespace won’t be visible in child namespaces. However, to achieve the reverse, a separate thing called “mount propagation” is involved. First appeared in 2002, Linux 2.4.19.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;UTS namespace&lt;/strong&gt; provides isolated hostnames. UTS stands for &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_Unix&quot;&gt;“&lt;strong&gt;U&lt;/strong&gt;NIX &lt;strong&gt;T&lt;/strong&gt;ime-&lt;strong&gt;S&lt;/strong&gt;haring system”&lt;/a&gt;. First appeared in 2006, Linux 2.6.19.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;IPC namespace&lt;/strong&gt; isolates traditional System V-style IPC methods. First appeared in 2006, Linux 2.6.19.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;PID namespace&lt;/strong&gt; provides a separate set of process IDs so that a process may look different inside. This is important for certain programs to function properly, most notably the init process, which must be PID 1. First appeared in 2008, Linux 2.6.24.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Networking namespace&lt;/strong&gt; provides a full set of network stack. Suitable for creating isolated network environments for containers. First appeared in 2009, Linux 2.6.29.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;User namespace&lt;/strong&gt; allows mapping UIDs / GIDs from containers to hosts, so that unpriviledged users can perform certain tasks that normally require the superuser privilege, without actually elevating themselves or posing risks to the host. First appeared in 2013, Linux 3.8.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Cgroup namespace&lt;/strong&gt; provides isolated cgroup hierarchies so containers can safely utilize cgroup functionalities without affecting the host. First appeared in 2016, Linux 4.6.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Time namespace&lt;/strong&gt; allows different processes to “see” different system times. First appeared in 2020, Linux 5.6.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;There are two ways to get namespaces isolated, &lt;a href=&quot;https://man7.org/linux/man-pages/man2/unshare.2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://man7.org/linux/man-pages/man2/clone.2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone()&lt;/code&gt;&lt;/a&gt;. A brief difference is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare&lt;/code&gt; isolates for the calling process (except PID namespace, check the manual for more details), while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; creates a new process with isolated namespaces. We’ll go for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; because it’s the system call underneath Go’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;/code&gt;, and that Go is used for popular container software like Docker and Singularity.&lt;/p&gt;
				&lt;p&gt;To utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; system call, we need some adaptions, among which the most notable ones are the entry function and the child stack (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap()&lt;/code&gt;, I had problems later with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; in my early testing). The rest are covered pretty well in the manual so there’s no need to repeat them here (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGCHLD&lt;/code&gt; appearing in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags&lt;/code&gt; parameter).&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;My name is %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;child&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;cp&quot;&gt;#define STACK_SIZE (1024 * 1024) // 1 MiB
				&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;PROT_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROT_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;MAP_PRIVATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_ANONYMOUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Assume stack grows downwards&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_stack_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_stack_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Child exited with code %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WEXITSTATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And for the include headers as well.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _GNU_SOURCE    // Required for enabling clone(2)
				#include &amp;lt;stdio.h&amp;gt;
				#include &amp;lt;sched.h&amp;gt;     // For clone(2)
				#include &amp;lt;signal.h&amp;gt;    // For SIGCHLD constant
				#include &amp;lt;sys/mman.h&amp;gt;  // For mmap(2)
				#include &amp;lt;sys/types.h&amp;gt; // For wait(2)
				#include &amp;lt;sys/wait.h&amp;gt;  // For wait(2)
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now that we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; ready, adding support for namespace isolation is as simple as adding flags to the parameters.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_stack_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWUTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWIPC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWPID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWCGROUP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;mounts&quot;&gt;Mounts&lt;/h2&gt;
				&lt;p&gt;Traditionally, mounting is a way to map raw disks to accessible filesystems. Since then, its usage has evolved and supports much more than disk mapping. We’re particularly interested in using special filesystems like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc&lt;/code&gt; (the FS that provides runtime information like processes and kernel parameters), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys&lt;/code&gt; (system settings, device information etc.), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; (a temporary filesystem backed by RAM) etc., without which a container won’t function properly.&lt;/p&gt;
				&lt;p&gt;For a minimal example, we’ll mount 4 essential filesystems with correct mount options for our container. They are the three mentioned above plus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev&lt;/code&gt; as a tmpfs. We’ll also create a few device nodes under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev&lt;/code&gt; so things can go smoothly when they’re needed (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some_command &amp;gt; /dev/null&lt;/code&gt;).&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;were-not-using-devtmpfs-here&quot;&gt;&lt;i class=&quot;fas fa-times-circle&quot;&gt;&lt;/i&gt; We’re not using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devtmpfs&lt;/code&gt; here&lt;/h4&gt;
				&lt;p&gt;If you examine current mounts in your host system, you’ll probably see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev&lt;/code&gt; is mounted as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devtmpfs&lt;/code&gt;. While it may appear straightforward to employ that, it’s unacceptable for &lt;strong&gt;a container&lt;/strong&gt;, as it exposes &lt;em&gt;all&lt;/em&gt; device nodes to the container, which violates the purpose of isolation of containers. See &lt;a href=&quot;https://unix.stackexchange.com/q/77933/211239&quot;&gt;this answer&lt;/a&gt; on Unix &amp;amp; Linux Stack Exchange.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;To do this manually, you’ll issue the following commands in a shell.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; tmpfs tmpfs /dev
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; proc proc /proc
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; sysfs sysfs /sys
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; tmpfs tmpfs /tmp
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You can then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount&lt;/code&gt; without arguments to see the mount results.&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysfs on /sys type sysfs (rw,relatime)
				proc on /proc type proc (rw,relatime)
				tmpfs on /dev type devtmpfs (rw,relatime)
				tmpfs on /tmp type tmpfs (rw,relatime)
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If you compare this with the mount points in your host system, you may notice something different.&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
				proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
				udev on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=65895752k,nr_inodes=16473938,mode=755)
				tmpfs on /run type tmpfs (rw,nosuid,nodev,noexec,relatime,size=13191916k,mode=755)
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The extra flags (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nosuid,nodev,noexec&lt;/code&gt;) control the behavior of the mount point. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nosuid&lt;/code&gt; means the set-uid bit will be ignored for entries under the mount point, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noexec&lt;/code&gt; prevents any execution of programs from inside.&lt;/p&gt;
				&lt;p&gt;Now we’re going to do it in C. The system call is also named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount&lt;/code&gt;, and has the following signature:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filesystemtype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It should be intuitive enough what the first three parameters are for, so for now we can just write&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;proc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/proc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;proc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sysfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/sys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sysfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The fourth parameter corresponds to the flags we discussed above. All applicable flags can be found in the man page for &lt;a href=&quot;https://man7.org/linux/man-pages/man2/mount.2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount(2)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
				&lt;p id=&quot;mount-data-parameter&quot;&gt;Keep in mind that, however, the last parameter isn’t entirely useless. It’s simply not used for now, but it’ll play a role later. (Actually, you may have noticed already. Good job for that.)&lt;/p&gt;
				&lt;h3 id=&quot;device-nodes&quot;&gt;Creating device nodes&lt;/h3&gt;
				&lt;p&gt;Now that we have an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev&lt;/code&gt; directory, we should populate it with some device nodes so that software expecting their presence could work. At a minimum, we need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urandom&lt;/code&gt;, but you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; if you want (these two are a bit different - you have been warned).&lt;/p&gt;
				&lt;p&gt;Device nodes are created with &lt;a href=&quot;https://man7.org/linux/man-pages/man2/mknod.2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mknod(2)&lt;/code&gt;&lt;/a&gt;, whose prototype is:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dev_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;With a little research effort, we know we’ll call it like this:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dev/something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAJOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;To determine the device node numbers, you can take a look at the same nodes in the host system, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stat&lt;/code&gt;. Don’t worry, the numbers for special devices remain the same across Linux distros, &lt;a href=&quot;https://unix.stackexchange.com/a/354985/211239&quot;&gt;unlike BSD systems&lt;/a&gt;. It shouldn’t take long before you come to this:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev/null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev/zero&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev/random&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev/urandom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;pivot-root&quot;&gt;pivot_root&lt;/h2&gt;
				&lt;p&gt;We’re ready with mounts, so now we can take a look at switching the root filesystem for our container.&lt;/p&gt;
				&lt;p&gt;The &lt;a href=&quot;#base-program&quot;&gt;base program&lt;/a&gt; used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot()&lt;/code&gt; for the time being, but talking about a (baseline) secure container, &lt;a href=&quot;https://github.com/earthquake/chw00t&quot;&gt;it’s terrible&lt;/a&gt;. We have to resort to another Linux feature, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt;, for this purpose.&lt;/p&gt;
				&lt;p&gt;Let’s first take a look at &lt;a href=&quot;https://man7.org/linux/man-pages/man2/pivot_root.2.html&quot;&gt;its man page&lt;/a&gt; to determine its prototype.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pivot_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;This system call is special enough that we must also take care of its notes and requirements. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_root&lt;/code&gt; must be a mount point. While the man page does provide a solution to this problem by mounting the directory on top of itself, it’s too prone to errors for us to adopt. Instead we’ll be creating a temporary directory to use as the mount point.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newroot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp/ispawn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newroot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We also need a value for the second parameter to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_old&lt;/code&gt; directory. The manual says the following:&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_old&lt;/code&gt; must be at or underneath &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_root&lt;/code&gt;&lt;/p&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;A direct interpretation is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_old&lt;/code&gt; must be at a subpath under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_root&lt;/code&gt;, which means we can simply create (or reuse an existing) a directory under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_root&lt;/code&gt; to use.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp/ispawn/oldroot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And now we can do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt; with the directories we just set up:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pivot_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newroot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If everything so far is correct, we should now be running inside the new root tree. The “old root”, or the root filesystem of the host system, is now available at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/oldroot&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Apparently, a container shouldn’t be able to access the host filesystem without explicit grants, so we’re going to “hide” the old root. It is, from the view from within the container, an ordinary mount point that we can just unmount. However, as there (definitely) are other processes in the host system still using the filesystem, it can’t be unmounted directly.&lt;/p&gt;
				&lt;p&gt;There’s a technique called “lazy unmounting”, where existing processes continue to use the filesystem as usual, while other processes see it disappeared. It &lt;a href=&quot;https://unix.stackexchange.com/q/390056/211239&quot;&gt;could be dangerous&lt;/a&gt;, but as we’re the one-and-only process inside the container, we know it’s safe for us.&lt;/p&gt;
				&lt;p&gt;With that many information told, the actual code is really simple:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;umount2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/oldroot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MNT_DETACH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We’re using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umount2&lt;/code&gt; system call because we need to pass the extra flags to it. Now that the host filesystem is gone, we can remove the now-empty directory (remember we’re doing clean-up jobs):&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rmdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/oldroot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We’ve isolated our container filesystem from the host system, and then we can proceed to securing and fortifying our container.&lt;/p&gt;
				&lt;h2 id=&quot;capabilities&quot;&gt;Capabilities&lt;/h2&gt;
				&lt;p&gt;In the traditional UNIX era, there were only two privilege levels - &lt;em&gt;privileged&lt;/em&gt; (root) and &lt;em&gt;unprivileged&lt;/em&gt; (non-root), where a &lt;em&gt;privileged&lt;/em&gt; process has every privilege to alter the system, while an &lt;em&gt;unprivileged&lt;/em&gt; process has none. Since Linux 2.2 in 1999, &lt;em&gt;capabilities&lt;/em&gt; have been added to the kernel so that unprivileged processes may acquire certain abilities needed for some task, while privileged processes may drop capabilities unneeded, allowing for privilege control at a finer granularity. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt; process doesn’t need any extra privileges than sending ICMP packets, and a web server (probably) doesn’t need any extra privileges than binding to a low port (1 to 1023), do they?&lt;/p&gt;
				&lt;p&gt;With capabilities, unprivileged processes can be granted access to selected system functionalities, while privileged processes can be deprived of selected ones. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_NET_BIND_SERVICE&lt;/code&gt; is the capability to bind to TCP or UDP ports between 1 and 1023, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_CHOWN&lt;/code&gt; enables the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chown(2)&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Now turning our focus back to containers. Without privilege separation, a “root” process inside a container can still do dangerous things, like scanning your hard drive where the host filesystem resides, and manipulate it. This is definitely not anything expected, so we’re going to limit the capabilities the container can have as a whole.&lt;/p&gt;
				&lt;p&gt;The system calls behind capabilities manipulation are very complicated, so unlike in previous sections, we’re going to use wrapped-up libraries to aid with this. There are two options available, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcap&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcap-ng&lt;/code&gt;, of which the latter is easier to understand and use. The documentations for &lt;a href=&quot;https://linux.die.net/man/3/libcap&quot;&gt;libcap&lt;/a&gt; and &lt;a href=&quot;https://people.redhat.com/sgrubb/libcap-ng/&quot;&gt;libcap-ng&lt;/a&gt; are given. Note that since they’re “external” libraries, extra flags need to be supplied when compiling. For libcap you’ll add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lcap&lt;/code&gt; to the compilation command, and similarly for libcap-ng you’ll add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lcap-ng&lt;/code&gt; to the command.&lt;/p&gt;
				&lt;p&gt;As an easier starting point, we’ll use &lt;a href=&quot;https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities&quot;&gt;Docker’s capabilities set&lt;/a&gt; to avoid having to sort everything out by ourselves. Before we start, there’s another thing to learn - the different “sets” of capabilities of a process. In a few short words,&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;The &lt;em&gt;bounding&lt;/em&gt; set restricts the maximum possible set of capabilities a process (and all its descendants) can have&lt;/li&gt;
				&lt;li&gt;The &lt;em&gt;effective&lt;/em&gt; set is what a process currently has and is effective&lt;/li&gt;
				&lt;li&gt;The &lt;em&gt;permitted&lt;/em&gt; set may be granted when “asked” (using the appropriate system calls)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;It’s noticeable that we want to limit all three sets for the container. Using libcap-ng, the code is very simple:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;capng_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAPNG_SELECT_BOTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;capng_updatev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAPNG_ADD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capng_type_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAPNG_EFFECTIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAPNG_PERMITTED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAPNG_BOUNDING_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CAP_SETPCAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CAP_SETFCAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;capng_apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAPNG_SELECT_BOTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capng_clear&lt;/code&gt;, we clear all capabilities from our pending changes, and add whitelisted capabilities, before finally applying the changes.&lt;/p&gt;
				&lt;p&gt;Using libcap, however, is slightly more complicated to achieve the same, as there’s no direct “clear all” function, but instead you’ll have to list them by yourself. &lt;a href=&quot;https://github.com/iBug/iSpawn/commit/bcf27bf42771e7fd8c7f24abbec5907f6f727fd7&quot;&gt;Here&lt;/a&gt;’s an older version of my attempted code if you want to learn. Nevertheless, it’s never bad to learn more.&lt;/p&gt;
				&lt;h2 id=&quot;seccomp&quot;&gt;SecComp&lt;/h2&gt;
				&lt;p&gt;SecComp (Secure Computing) is a security module in Linux that lets a process to transition one-way into a “secure state” where no system call other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigreturn()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit()&lt;/code&gt; is allowed. It’s easily noticeable that this feature is too strict for making something useful, and &lt;strong&gt;seccomp-bpf&lt;/strong&gt; is an extension to the rescue.&lt;/p&gt;
				&lt;p&gt;Seccomp BPF extends the seccomp module with Berkeley Packer Filter (BPF), an embedded instruction set that allows highly customized seccomp rules to be deployed. With BPF, you can create custom logic for system call filtering, including matching and testing individual system call arguments.&lt;/p&gt;
				&lt;h2 id=&quot;syscall-filter&quot;&gt;System call filtering&lt;/h2&gt;
				&lt;p&gt;To ensure full control, we’re using a whitelist for system calls. This means any unknown one will be rejected. So we’ll start by creating a new “SecComp filter context”, and set the default action to “reject”. By “reject”, we’ll return “permission denied” when a process tries to call it.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scmp_filter_ctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seccomp_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCMP_ACT_ERRNO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCMP_ACT_ERRNO(1)&lt;/code&gt; refers exactly to “respond with EPERM”, which will be hit if no other filters apply.&lt;/p&gt;
				&lt;h3 id=&quot;syscall-whitelist&quot;&gt;System call whitelist&lt;/h3&gt;
				&lt;p&gt;We’ll now add each “safe” system call to our filter and set it to “allowed”. To save some time scratching your head examining each system call, we’ll adopt &lt;a href=&quot;https://github.com/moby/moby/blob/master/profiles/seccomp/default.json&quot;&gt;Docker’s syscall whitelist&lt;/a&gt;. Each system call will be wrapped in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCMP_SYS&lt;/code&gt; so it’s turned into a suitable number used inside SecComp.&lt;/p&gt;
				&lt;p&gt;We need to add the whole big list of “general” system calls, plus some platform- or scenario-specific ones, namely, two special system calls for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amd64&lt;/code&gt; platform, and a few others for system administration, since we’ve allowed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_SYS_ADMIN&lt;/code&gt; inside the container.&lt;/p&gt;
				&lt;p&gt;Use your favorite text processing toolstack to get the big list into a C-array so we can loop over, like &lt;a href=&quot;https://github.com/iBug/iSpawn/blob/master/syscall_allow.c&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Many, many more...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And then append these special ones we want to include as well:&lt;/p&gt;
				&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // amd64-specific required syscalls
				SCMP_SYS(arch_prctl),
				SCMP_SYS(modify_ldt),
				// CAP_SYS_ADMIN-specific syscalls
				SCMP_SYS(bpf),
				SCMP_SYS(clone),
				SCMP_SYS(fanotify_init),
				SCMP_SYS(lookup_dcookie),
				SCMP_SYS(mount),
				SCMP_SYS(name_to_handle_at),
				SCMP_SYS(perf_event_open),
				SCMP_SYS(quotactl),
				SCMP_SYS(setdomainname),
				SCMP_SYS(sethostname),
				SCMP_SYS(setns),
				SCMP_SYS(syslog),
				SCMP_SYS(umount),
				SCMP_SYS(umount2),
				SCMP_SYS(unshare)
				};
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Find the number of items included, and save it for easier later use.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We can then add each system call to our new SecComp filter as “allowed” with a simple loop:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCMP_ACT_ALLOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;loading-seccomp&quot;&gt;Loading SecComp filter&lt;/h3&gt;
				&lt;p&gt;After our filter has been constructed, we can load it onto our process for it to take effect.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;seccomp_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And finally, release the workspace to avoid memory leaks.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;seccomp_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;seccomp-caveats&quot;&gt;Caveats&lt;/h3&gt;
				&lt;h4 id=&quot;seccomp-incompatible-syscalls&quot;&gt;Incompatible system calls&lt;/h4&gt;
				&lt;p&gt;As I worked this out on an Ubuntu 18.04 environment, some newer system calls weren’t available in my system headers, like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io_uring&lt;/code&gt;-related ones that are introduced in Linux 5.1. You can safely comment out any of them that your compiler complains about not recognizing. There shouldn’t be too many of them if your environment is up-to-date, though.&lt;/p&gt;
				&lt;h4 id=&quot;seccomp-checking&quot;&gt;Precautionary checking&lt;/h4&gt;
				&lt;p&gt;As it’s too common for one of the function calls to fail, I’ve added sanity checks for them. Here’s the complete code of this part.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filter_syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;scmp_filter_ctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seccomp_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCMP_ACT_ERRNO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCMP_ACT_ALLOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seccomp_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;seccomp_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;cgroups&quot;&gt;Resource restriction&lt;/h2&gt;
				&lt;p&gt;The last part we’ll visit is restricting container resources. Surely we don’t want a container to overuse system resources like CPU or RAM and make the host system less stable. Linux Control Groups (Cgroups) is designed for efficient resource constraint that we’re going to make use of. There are many “cgroup systems” for different aspects of system resources, including CPU, RAM and even disk I/O. Looks pretty neat, right?&lt;/p&gt;
				&lt;p&gt;Unlike other parts we’ve built so far, cgroup doesn’t use system calls for setup and configuration, but a filesystem-based interface instead, like those in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys&lt;/code&gt;. In fact, the cgroup control interface resides exactly under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys&lt;/code&gt;, at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/fs/cgroup&lt;/code&gt;. With this interface, we read and write “files” to change configuration values, and create and delete directories to add or remove structures.&lt;/p&gt;
				&lt;p&gt;There are multiple cgroup “controllers” working on different aspects of system resources, each having a distinct tree structure under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/fs/cgroup&lt;/code&gt;. So first we’ll examine what cgroup controllers are available:&lt;/p&gt;
				&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /sys/fs/cgroup
				&lt;span class=&quot;go&quot;&gt;blkio        cpuacct  freezer  net_cls           perf_event  systemd
				cpu          cpuset   hugetlb  net_cls,net_prio  pids        unified
				cpu,cpuacct  devices  memory   net_prio          rdma
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Here we’re interested in some of them, namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blkio&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpu&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pids&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Let’s first take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pids&lt;/code&gt;. We’ll create our own subtree to start with:&lt;/p&gt;
				&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /sys/fs/cgroup/pids/ispawn
				&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /sys/fs/cgroup/pids/ispawn
				&lt;span class=&quot;go&quot;&gt;cgroup.clone_children  notify_on_release  pid.events  tasks
				cgroup.procs           pid.current        pid.max
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It’s easily imagined that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid.max&lt;/code&gt; controls the maximum number of PIDs in this subsystem, so let’s write something to it:&lt;/p&gt;
				&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;16 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/pids/ispawn/pid.max
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;To verify that it’s working, make an attempt to exceed the limit. Open another shell and find its pid with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo $$&lt;/code&gt;. Write the number that you see (it’s the PID of the new shell) to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/fs/cgroup/pids/ispawn/cgroup.procs&lt;/code&gt;. You can verify that the new process has been added to the subsystem by reading that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgroup.procs&lt;/code&gt; files out, and you’ll see the PID you just written.&lt;/p&gt;
				&lt;p&gt;Now switch to the new shell and try spawning a lot of subprocesses, for example:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..20&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; /bin/sleep 10&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You can see the shell output as &lt;em&gt;Operation not permitted&lt;/em&gt; for 5 to 6 times. This means it has hit the PID cap and fails to spawn more processes.&lt;/p&gt;
				&lt;p&gt;In our C-based container program, we’ll do this in the parent process. The code is intuitively simple.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sys/fs/cgroup/pids/ispawn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0777&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sys/fs/cgroup/pids/ispawn/pid.max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sys/fs/cgroup/pids/ispawn/cgroup.procs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pid of the child process&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We can now proceed to setting other limits:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;To reduce CPU shares, we write to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpu/cpu.shares&lt;/code&gt;. Because CPU shares are relative to each other and the system default is usually 1024, setting the value to 256 for our container gives it 1/4 as much CPU as other processes when the system load goes up. (It still gets more CPU when needed and when the system is more idle.)&lt;/li&gt;
				&lt;li&gt;To limit memory usage, we write to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory/memory.limit_in_bytes&lt;/code&gt; (for userspace memory) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory/memory.kmem.limit_in_bytes&lt;/code&gt; (for kernel memory).
				&lt;ul&gt;
				&lt;li&gt;However, this limits only physical memory usage, so when swap is present, memory gets swapped out onto disk when it hits the limit. To completely disable swap for our container, set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory/memory.swappiness&lt;/code&gt; to zero.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;To reduce disk I/O priority, we write to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blkio/weight&lt;/code&gt;. This is relative to 100 so writing 50 will reduce its disk I/O priority to half.&lt;/li&gt;
				&lt;li&gt;The last thing to note is that the tree hierarchies are independent among different cgroup controllers, so you have to create the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ispawn&lt;/code&gt; directory in &lt;em&gt;each&lt;/em&gt; of them, and write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgroup.procs&lt;/code&gt; inside &lt;em&gt;each&lt;/em&gt; of them.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;heads-up&quot;&gt;&lt;i class=&quot;fas fa-fw fa-lightbulb&quot;&gt;&lt;/i&gt; Heads up&lt;/h4&gt;
				&lt;p&gt;The course lab at the time was based on Ubuntu 18.04 with Linux kernel 5.3 (18.04 HWE). The cgroup controllers in newer kernels may be very different from what’s presented in this article. For example, with Linux 5.4 on Ubuntu 20.04, the keys in PID cgroup begins with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pids.&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid.&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blkio&lt;/code&gt; has a completely different set of available keys. Make sure you examine the cgroup directories before copying and pasting code.&lt;/p&gt;
				&lt;/div&gt;
				&lt;h3 id=&quot;mount-cgroup-controllers&quot;&gt;Mounting cgroup controllers inside the container&lt;/h3&gt;
				&lt;p&gt;To enable applications in our container to use cgroup controllers, we must mount them inside. Like how we mounted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; and other filesystems, we check the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount&lt;/code&gt; to determine how we’re going to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount(2)&lt;/code&gt;.&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Everything looks similar to what we’ve just done, but there’s one different thing: There’s no mount flag for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pids&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Recalling &lt;a href=&quot;#mount-data-parameter&quot;&gt;we skipped the last parameter of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount&lt;/code&gt;&lt;/a&gt;, now it’s time to pick it back up. Fortunately, it isn’t too complicated. For our use case, we can just pass the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;pids&quot;&lt;/code&gt; to that parameter, and we swap the string for another to mount another cgroup controller. You can read the man page for &lt;a href=&quot;https://man7.org/linux/man-pages/man7/cgroups.7.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgroups(7)&lt;/code&gt;&lt;/a&gt; about this, look for &lt;em&gt;Mounting v1 controllers&lt;/em&gt;.&lt;/p&gt;
				&lt;p&gt;To mimic the monut points on our host system, we additionally mount a tmpfs at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/fs/cgroup&lt;/code&gt;, and remount this mountpoint as read-only after adding the controllers. The final result looks like this:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mount_cgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_NOSUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_NODEV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_NOEXEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_RELATIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Mount a tmpfs first&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mode=755&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Prepare mount points&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/blkio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/pids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Mount cgroup subsystems&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/blkio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blkio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/pids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// cpu and cpuacct need symlinks&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;symlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/cpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;symlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Remount the tmpfs as R/O&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_REMOUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_RDONLY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;cgroup-namespace-caveat&quot;&gt;A small problem with cgroup namespace&lt;/h3&gt;
				&lt;p&gt;During my experiments, I noticed a strange issue where I could see the host cgroup hierarchies in my container implementation. It turns out that the cgroup “root” inside a cgroup namespace is the subtree the process belongs in when this cgroup namespace is created / isolated. Once the namespaces is created, its root is determined and fixed, even if the “root” process is moved into another subtree later.&lt;/p&gt;
				&lt;p&gt;This means the child process must be “moved” to the desired cgroup subtree before the cgroup namespace is isolated. This leaves us with two options:&lt;/p&gt;
				&lt;ol&gt;
				&lt;li&gt;The parent process moves itself to the target cgroup subtree before calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone()&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLONE_NEWCGROUP&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;The parent process calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone()&lt;/code&gt; without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLONE_NEWCGROUP&lt;/code&gt;, moves the child process to the target cgroup subtree, and then tells the child process to isolate the cgroup namespace.&lt;/li&gt;
				&lt;/ol&gt;
				&lt;p&gt;It should be noted that with the second option, some kind of “syncing” is needed to avoid the child process going too quickly to perform the cgroup namespace isolation before the parent process finishes its job. It’s easy to come up with a solution that just works: We can create a pipe between the processes, where the parent process can send something to tell the child process that it’s ready.&lt;/p&gt;
				&lt;p&gt;With this in mind, the second option is actually &lt;a href=&quot;https://github.com/iBug/iSpawn/commit/cc4dcb1032e2a4d4fc57491cc904f126b719ba88&quot;&gt;easier to implement&lt;/a&gt;, since there’s another system call for isolating namespaces in-place (i.e. without creating a new process), that we put away earlier. It’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare(2)&lt;/code&gt;. It’s simple to use, too, just call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare(CLONE_NEWCGROUP)&lt;/code&gt; when ready.&lt;/p&gt;
				&lt;p&gt;To verify that this issue is handled correctly, check the content in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/1/cgroup&lt;/code&gt;. The correct result should look like this, where every line ends with a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;12:cpuset:/
				11:rdma:/
				10:blkio:/
				9:pids:/
				8:devices:/
				7:net_cls,net_prio:/
				6:memory:/
				5:hugetlb:/
				4:perf_event:/
				3:cpu,cpuacct:/
				2:freezer:/
				1:name=systemd:/
				0::/
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;With an incorrectly written container, certain lines may have an unexpected value, generally starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/../&lt;/code&gt;, for example:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;12:cpuset:/
				11:rdma:/
				10:blkio:/../user.slice
				9:pids:/../user.slice/user-0.slice/
				8:devices:/
				7:net_cls,net_prio:/
				6:memory:/../user.slice/user-0.slice/
				5:hugetlb:/
				4:perf_event:/
				3:cpu,cpuacct:/../user.slice
				2:freezer:/
				1:name=systemd:/
				0::/
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;As explained above, these paths are “paths to the cgroup location of PID 1 relative to the ‘root’ of the cgroup namespace”. When properly done, the PID 1 should have all of its cgroup hierarchies belonging at “root”.&lt;/p&gt;
				&lt;p&gt;Don’t be surprised to see the inconsistent lines from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/1/cgroup&lt;/code&gt;, as a process can be at different locations in different cgroup controllers.&lt;/p&gt;
				&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
				&lt;p&gt;Now here, at this point, we’ve gone through all technologies required for a functional and secure Linux container, although our “container” isn’t necessarily functional and secure. It’s going to be hard work examining and patching all the loopholes for the best security, if you’d like, but the fundamentals have been covered already so there won’t be anything new.&lt;/p&gt;
				&lt;p&gt;There are two namespaces we’ve skipped in the beginning (three if you count &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLONE_NEWTIME&lt;/code&gt;). They are slightly more complicated to set up and isn’t necessary for a container, as Docker doesn’t use User Namespaces and systemd-nspawn doesn’t use Network Namespaces by default.&lt;/p&gt;
				&lt;p&gt;There are also more to consider if you want multiple containers to run simultaneously. One notable thing is that each should have a separete cgroup subtree. Avoiding mount point conflict in race conditions is another thing to take into account.&lt;/p&gt;
				&lt;p&gt;Should you want a ready-to-use example to play with, here’s the complete code that I wrote, with some bells and whistles added: &lt;a href=&quot;https://github.com/iBug/iSpawn&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; iBug/iSpawn&lt;/a&gt;. Keep in mind that it’s wrote for Ubuntu 18.04 and things could have been changed drastically, so it may not work in your system.&lt;/p&gt;
				&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;strong&gt;Linux containers in 500 lines of code&lt;/strong&gt; by &lt;em&gt;Lizzie Dixon&lt;/em&gt; - &lt;a href=&quot;https://blog.lizzie.io/linux-containers-in-500-loc.html&quot;&gt;https://blog.lizzie.io/linux-containers-in-500-loc.html&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;Wikipedia articles on …
				&lt;ul&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_namespaces&quot;&gt;Linux Namespaces&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Capability-based_security&quot;&gt;Capability-based security&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Seccomp&quot;&gt;SecComp&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cgroups&quot;&gt;Cgroups&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Security-Enhanced_Linux&quot;&gt;SELinux&lt;/a&gt;, which we didn’t touch here&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="container" /><category term="c" /><summary type="html">Since years ago, containers have been a hot topic everywhere. There are many container softwares like Docker, Linux Containers and Singularity. It’s hard to say one understand what containers are without diving into all the gory details of them, so I decided to go on this exploration myself.</summary></entry><entry><title type="html">Keep using Flash Player in browsers in 2021</title><link href="https://ibug.io/blog/2021/01/keep-flash-player-browser/" rel="alternate" type="text/html" title="Keep using Flash Player in browsers in 2021" /><published>2021-01-12T00:00:00+00:00</published><updated>2021-02-04T21:47:35+00:00</updated><id>https://ibug.io/blog/2021/01/keep-flash-player-browser</id><content type="html" xml:base="https://ibug.io/blog/2021/01/keep-flash-player-browser/">&lt;p&gt;It’s 2021 now, and &lt;a href=&quot;https://www.adobe.com/products/flashplayer/end-of-life.html&quot;&gt;Adobe Flash Player has been end-of-life&lt;/a&gt; after December 31, 2020. There are many cases where you want to retain it, however. For example, you may want to keep enjoying an old game that’s been around for decades, or managing your organization’s infrastructure via &lt;a href=&quot;https://kb.vmware.com/s/article/78589&quot;&gt;VMware vSphere Flash Web Client (vSphere 6.5 and older)&lt;/a&gt;.&lt;/p&gt;
				&lt;h2 id=&quot;quick-solution&quot;&gt;Quick Solution&lt;/h2&gt;
				&lt;p&gt;According to &lt;a href=&quot;https://www.adobe.com/content/dam/acom/en/devnet/flashplayer/articles/flash_player_admin_guide/pdf/latest/flash_player_32_0_admin_guide.pdf&quot;&gt;Adobe Flash Player 32.0 Administration Guide&lt;/a&gt;, page 28 and 36, you can deploy a config file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mms.cfg&lt;/code&gt; with the following content to continue using Flash on whitelisted sites:&lt;/p&gt;
				&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;EOLUninstallDisable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;SilentAutoUpdateEnable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AutoUpdateDisable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;EnableAllowList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AllowListUrlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*://*.example.com/&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AllowListUrlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*://*.example.net/&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AllowListUrlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*://*.example.org/&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AllowListUrlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;file:*&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;TraceOutputEcho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Depending on your operating system, the file may be located at:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Windows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\System32\Macromed\Flash&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\SysWOW64\Macromed\Flash&lt;/code&gt; (if you’re on a 64-bit Windows)&lt;/li&gt;
				&lt;li&gt;macOS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/Application Support/Macromedia&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;Linux: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/adobe&lt;/code&gt; (yes it &lt;em&gt;is&lt;/em&gt; Adobe instead of Macromedia)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;Placing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mms.cfg&lt;/code&gt; file inside the correct directory (both directories for 64-bit Windows) should enable Flash on websites you whitelisted.&lt;/p&gt;
				&lt;p&gt;Additionally, if you’re using &lt;strong&gt;Google Chrome&lt;/strong&gt; or Chromium-based &lt;strong&gt;Microsoft Edge&lt;/strong&gt;, you need to place an additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mms.cfg&lt;/code&gt; file in the following directory:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Windows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Google\Chrome\User Data\Default\Pepper Data\Shockwave Flash\System\mms.cfg&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;macOS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/&amp;lt;username&amp;gt;/Library/Application Support/Google/Chrome/Default/Pepper Data/Shockwave Flash/System&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;Linux: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.config/google-chrome/Default/Pepper Data/Shockwave Flash/System/&lt;/code&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;For Microsoft Edge, replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chrome&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edge&lt;/code&gt; in the above paths. Don’t forget to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with your user name.&lt;/p&gt;
				&lt;p&gt;After placing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mms.cfg&lt;/code&gt; file, just restart your browser to see Flash come back again.&lt;/p&gt;
				&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;
				&lt;p&gt;The Chromium browser (basis of Google Chrome and modern Microsoft Edge) &lt;a href=&quot;https://www.chromium.org/flash-roadmap#TOC-Flash-Support-Removed-from-Chromium-Target:-Chrome-88---Jan-2021-&quot;&gt;will completely remove Flash&lt;/a&gt; since version 88, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Plugins/Roadmap#schedule&quot;&gt;so will Firefox&lt;/a&gt; since version 85. This means you can no longer enable Flash even with the above &lt;em&gt;Enterprise policy&lt;/em&gt; applied.&lt;/p&gt;
				&lt;p&gt;Unfortunately, you have to keep an old version of your browser of choice around if you plan to use Flash for an extended period. This means you have to find an available download, and disable the auto-update feature for the browser. You will be missing the latest web features and security improvements if you &lt;a href=&quot;https://browser-update.org/&quot;&gt;remain on an old browser&lt;/a&gt;, which will be an issue sooner or later.&lt;/p&gt;
				&lt;p&gt;You can get around the browser issue by using Internet Explorer if you’re on Windows, which is &lt;em&gt;already&lt;/em&gt; lacking new web features and security. You’ll want to prevent Windows Update &lt;a href=&quot;https://www.catalog.update.microsoft.com/search.aspx?q=4577586&quot;&gt;KB4577586&lt;/a&gt; from installing, following &lt;a href=&quot;https://support.microsoft.com/en-us/help/3183922/how-to-temporarily-prevent-a-windows-update-from-reinstalling-in-windo&quot;&gt;Microsoft’s guidelines&lt;/a&gt;.&lt;/p&gt;
				&lt;p&gt;A better approach is to keep the Flash Player installers around (I saved FP v29 &lt;a href=&quot;https://download.ibugone.com/fp_29.0.0.171_archive.zip&quot;&gt;here&lt;/a&gt; if you need - it’s a full set so beware of download size - 421 MB), and install them when needed.&lt;/p&gt;
				&lt;p&gt;Finally, the only way to secure your ability to use Flash in the distant future is to install a virtual machine running an older system (like Windows 7), with old software and old browsers, and &lt;em&gt;then&lt;/em&gt; put your Flash Player there.&lt;/p&gt;</content><author><name>iBug</name></author><category term="web" /><category term="flash" /><summary type="html">It’s 2021 now, and Adobe Flash Player has been end-of-life after December 31, 2020. There are many cases where you want to retain it, however. For example, you may want to keep enjoying an old game that’s been around for decades, or managing your organization’s infrastructure via VMware vSphere Flash Web Client (vSphere 6.5 and older).</summary></entry><entry><title type="html">Build GitHub Pages with GitHub Actions</title><link href="https://ibug.io/blog/2020/09/build-github-pages-with-github-actions/" rel="alternate" type="text/html" title="Build GitHub Pages with GitHub Actions" /><published>2020-09-19T00:00:00+00:00</published><updated>2021-02-04T21:47:35+00:00</updated><id>https://ibug.io/blog/2020/09/build-github-pages-with-github-actions</id><content type="html" xml:base="https://ibug.io/blog/2020/09/build-github-pages-with-github-actions/">&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;heads-up&quot;&gt;&lt;i class=&quot;fas fa-fw fa-lightbulb&quot;&gt;&lt;/i&gt; Heads up&lt;/h4&gt;
				&lt;p&gt;I wrote &lt;a href=&quot;/blog/2018/04/build-github-pages-with-travis-ci/&quot;&gt;another article&lt;/a&gt; two years ago about building with Travis CI, but from my experience in the past half year, GitHub Actions is, in all aspects, a better option than Travis CI.&lt;/p&gt;
				&lt;p&gt;You should also read that article if you’re unfamiliar with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, as I won’t be repeating common basics. This article will focus on GitHub Actions rather than building a Jekyll site in general.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Earlier this year, I switched my GitHub Pages build from CircleCI to GitHub Actions.&lt;/p&gt;
				&lt;p&gt;Yep, an article is missing for CircleCI, but why is it still needed? GitHub Actions is better than CircleCI in &lt;em&gt;almost&lt;/em&gt; every aspect, except for its CPU that runs slightly slower than that of CircleCI.&lt;/p&gt;
				&lt;h2 id=&quot;1-review&quot;&gt;1. Review&lt;/h2&gt;
				&lt;p&gt;In &lt;a href=&quot;/blog/2018/04/build-github-pages-with-travis-ci/&quot;&gt;my previous article&lt;/a&gt; on building with Travis CI, we went through the steps of setting up a local build environment for our Jekyll site. We set up a Ruby development environment, installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt;, wrote a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, and built the Jekyll site locally.&lt;/p&gt;
				&lt;p&gt;If you’re not yet ready for this part, check out that article first. I’m going straight to the main content this time.&lt;/p&gt;
				&lt;h2 id=&quot;setup-actions&quot;&gt;2. Setting up GitHub Actions&lt;/h2&gt;
				&lt;p&gt;Getting GitHub Actions ready for building is &lt;em&gt;much&lt;/em&gt; easier than Travis CI, as everything you need to do is to push a config file into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; directory of your repository.&lt;/p&gt;
				&lt;p&gt;If you’re working on a forked repository, you may want to navigate to the “Actions” tab in your repository, and enable Actions there. Actions is disabled for forked repositories by default.&lt;/p&gt;
				&lt;h3 id=&quot;setup-build&quot;&gt;Configure build settings&lt;/h3&gt;
				&lt;p&gt;You can use any name for the config file, but here I’ll go with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.yml&lt;/code&gt;. Here’s a minimal set of steps you’ll need.&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;push&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-ruby@v1&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.7&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup cache for Bundler&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/cache@v2&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vendor/bundle&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ runner.os }}-bundler-${{ hashFiles('Gemfile') }}&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;restore-keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;${{ runner.os }}-bundler-&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install dependencies&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;bundle install --path=vendor/bundle&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build site&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build --profile --trace&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;JEKYLL_GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Unlike Travis CI, all GitHub Actions builds run in an identical environment, while specific languages and software are loaded at runtime. This workflow contains 5 steps, with each step being:&lt;/p&gt;
				&lt;ol&gt;
				&lt;li&gt;&lt;strong&gt;Clone and checkout the repository.&lt;/strong&gt; Contrary to Travis CI, GitHub Actions does not clone the repository automatically, as GitHub Actions is intended for more general purposes than only running Continuous Integrations.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Setup Ruby development environment.&lt;/strong&gt; This one is obvious, since Jekyll is written in Ruby.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Setup cache.&lt;/strong&gt; For the same reason as with Travis CI: Caching installed gems speeds up &lt;em&gt;subsequent&lt;/em&gt; builds.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Install dependencies.&lt;/strong&gt; Self-explanatory.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Build site.&lt;/strong&gt; Same as above, self-explanatory.&lt;/li&gt;
				&lt;/ol&gt;
				&lt;p&gt;The build process is mostly the same as on Travis CI, except that many steps that are automatically taken on Travis CI have to be written explicitly.&lt;/p&gt;
				&lt;h2 id=&quot;deploy-actions&quot;&gt;3. Deploy to GitHub&lt;/h2&gt;
				&lt;h3 id=&quot;access-token&quot;&gt;Access token&lt;/h3&gt;
				&lt;p&gt;You’ve probably noticed that there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/code&gt; in the above GitHub Actions config. That’s &lt;a href=&quot;https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token&quot;&gt;a neat feature&lt;/a&gt; GitHub provides. The main downside is that the token has access only to the repository the workflow is running on (as well as any other public resources). So if you want to push to a different repository, you’ll still have to resort to creating your personal access token (PAT) for it.&lt;/p&gt;
				&lt;p&gt;To keep things simple, I’ll assume you’re pushing to the same repository for deployment, where the GitHub-provided token can be used.&lt;/p&gt;
				&lt;h3 id=&quot;setup-deployment&quot;&gt;Setting up deployment&lt;/h3&gt;
				&lt;p&gt;The deploy script from the other Travis CI article is as follows (with names replaced, of course):&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site
				git init
				git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;GitHub&quot;&lt;/span&gt;
				git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;noreply@github.com&quot;&lt;/span&gt;
				git add &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
				git commit &lt;span class=&quot;nt&quot;&gt;--message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Auto deploy from GitHub Actions build &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				git remote add deploy https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{ secrets.GITHUB_TOKEN &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;@github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1
				git push &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt; deploy master &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Again, replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;yourname&amp;gt;&lt;/code&gt; with your GitHub username in the above script.&lt;/p&gt;
				&lt;p&gt;Now, instead of writing it to a file, we can add this script directly to the build config, as shown below:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy site&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;cd _site&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git init&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.name &quot;GitHub&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.email &quot;noreply@github.com&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git add --all&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git commit --message &quot;Auto deploy from GitHub Actions build $GITHUB_RUN_NUMBER&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git remote add deploy https://${{ secrets.GITHUB_TOKEN }}@github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git push --force deploy gh-pages &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;fixing-issues-with-github-actions&quot;&gt;Fixing issues with GitHub Actions&lt;/h3&gt;
				&lt;p&gt;There are a few things to tackle, however, as GitHub Actions works differently than Travis CI.&lt;/p&gt;
				&lt;p&gt;First, the GitHub-provided token, for unknown reasons, could not trigger GitHub Pages deploys. This used to be the case&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot; rel=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; but has since been (partially) fixed. Now it can trigger Pages for non-root commits to the Pages branch. A “root commit” is the sole commit on a new branch, like the one created by the above build script, which always initializes a new repository and creates a single commit for the contents. This Pages issue makes the above build script non-functional, and we need to fix it.&lt;/p&gt;
				&lt;p&gt;An easy solution is to fetch the target (deploy) branch, and add a commit on top of whatever’s there already. So we modify the build script to include this fix:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy site&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;cd _site&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git init&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.name &quot;GitHub&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.email &quot;noreply@github.com&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git remote add deploy https://${{ secrets.GITHUB_TOKEN }}@github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git fetch --depth=1 deploy gh-pages&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git reset --soft FETCH_HEAD&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git checkout -B gh-pages&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git add --all&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git commit --message &quot;Auto deploy from GitHub Actions build $GITHUB_RUN_NUMBER&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git push deploy gh-pages &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;In this revised script, we first fetch the target branch, with depth set to 1 to avoid unnecessary downloads. Then we reset our “branch pointer” to the fetched branch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FETCH_HEAD&lt;/code&gt;), before finally adding our content as another commit on top of it.&lt;/p&gt;
				&lt;h3 id=&quot;fixing-issues-with-github-actions---alternative-approach&quot;&gt;Fixing issues with GitHub Actions - Alternative approach&lt;/h3&gt;
				&lt;p&gt;There’s an alternative solution to this issue, by cloning the deploy repository beforehand (and remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; from the deploy step).&lt;/p&gt;
				&lt;p&gt;Insert this “clone” step &lt;em&gt;before&lt;/em&gt; the “build” step:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prepare build&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git clone -q --depth=1 --branch=gh-pages --single-branch --no-checkout \&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;https://${{ secrets.GITHUB_TOKEN }}@github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git _site/&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;and change the deploy step to this:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy site&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;cd _site&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.name &quot;GitHub&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.email &quot;noreply@github.com&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git add --all&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git commit --message &quot;Auto deploy from GitHub Actions build $GITHUB_RUN_NUMBER&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git push deploy gh-pages&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;An important note is that you should tell Jekyll to keep your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory when building your site. This can be done by adding the following settings to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;keep_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;.git&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;I recall that Jekyll 4.0 has this setting emplaced by default, but can’t find the reference for now, so I’m recommending that you explicitly write this into your config file even if you have Jekyll 4 locally (which you probably don’t if you’re using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-pages&lt;/code&gt; gem). It’s a good idea to write configurations explicitly, after all.&lt;/p&gt;
				&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;
				&lt;p&gt;Now then, why did I migrate my website build to GitHub Actions, if both Travis CI and CircleCI are running perfectly?&lt;/p&gt;
				&lt;p&gt;I chose to do so for the following reasons:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;It’s free for public repositories, with unlimited total usage. One rarely hits the total usage quota, however, even with CircleCI, which has &lt;del&gt;a monthly limit of 1,000 total run minutes&lt;/del&gt; (&lt;strong&gt;Update&lt;/strong&gt;: It’s now 250 minutes weekly).
				&lt;ul&gt;
				&lt;li&gt;CircleCI’s limit applies at account level, and does not differentiate between public and private repositories.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;November 2020&lt;/strong&gt;: Travis CI’s &lt;a href=&quot;https://blog.travis-ci.com/2020-11-02-travis-ci-new-billing&quot;&gt;new pricing model&lt;/a&gt; and &lt;a href=&quot;https://travis-ci.community/t/builds-hang-in-queued-state/10250&quot;&gt;recent service degradations&lt;/a&gt; aren’t particularly interesting to learn about.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Better runtime environments, except for CPU power, which is only slightly slower that that on CircleCI.
				&lt;ul&gt;
				&lt;li&gt;Boots faster, runs faster, more memory&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;It’s provided by GitHub and hosted by Microsoft Azure, which may be more trusted than Travis CI and CircleCI for some users.&lt;/li&gt;
				&lt;li&gt;One less external service to depend on. No more need to log into a separate website to review logs.&lt;/li&gt;
				&lt;li&gt;… and more&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;The primary downside compared to Travis CI is increased build config complexity, but on the other hand it adds more flexibility to your build patterns, which reciprocates.&lt;/p&gt;
				&lt;p&gt;But the most important thing to note is that whatever others tell, you should try and find the one most suitable for you.&lt;/p&gt;
				&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
				&lt;ol&gt;
				&lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
				&lt;p&gt;&lt;a href=&quot;https://github.community/t/github-action-not-triggering-gh-pages-upon-push/16096&quot;&gt;https://github.community/t/github-action-not-triggering-gh-pages-upon-push/16096&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;/ol&gt;
				&lt;/div&gt;</content><author><name>iBug</name></author><category term="development" /><category term="github-pages" /><summary type="html">Why use an external service when there's an in-house GitHub service?</summary></entry><entry><title type="html">Working against WordPress DeBlocker plugin</title><link href="https://ibug.io/blog/2020/08/work-against-wordpress-deblocker/" rel="alternate" type="text/html" title="Working against WordPress DeBlocker plugin" /><published>2020-08-13T00:00:00+00:00</published><updated>2021-02-04T21:47:35+00:00</updated><id>https://ibug.io/blog/2020/08/work-against-wordpress-deblocker</id><content type="html" xml:base="https://ibug.io/blog/2020/08/work-against-wordpress-deblocker/">&lt;p&gt;I’ll go straight to the solution (keep in mind that it’s considerably primitive, so use at your own risk) with code attached below. It’s a &lt;a href=&quot;https://www.tampermonkey.net/&quot;&gt;Tampermonkey&lt;/a&gt; userscript.&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @name         WordPress Anti-DeBlocker&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @version      0.1&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @author       iBug&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @match        *://*/*&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @license      MIT&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @grant        none&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @run-at       document-start&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// a = event name (string), b = function&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/dev&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\W?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;tool/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Blocked function. Code below&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;encounter&quot;&gt;Encounter&lt;/h2&gt;
				&lt;p&gt;I was searching for some resources when I came across a WordPress site. I had both ABP and uBO installed, and the website flashed blood red. So it was an ad blocker detector, easy peasy, and I hit Ctrl-Shift-I, only to find that it didn’t work. I tried F12 and found it was blocked, too, so there must be other methods I could resort too.&lt;/p&gt;
				&lt;h2 id=&quot;getting-f12-developer-tools&quot;&gt;Getting F12 Developer Tools&lt;/h2&gt;
				&lt;p&gt;If I can’t open Dev Tools with the page showing, I can always have it open &lt;em&gt;before&lt;/em&gt; the page loads. I had a sense this would be a tough opponent, so I opened an incognito window, enabled ad blocker extensions, opened Dev Tools, and navigated to the page.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/debugger-pause.png&quot; alt=&quot;debugger paused&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Whoa, it’s paused with the debugger, and when I go to the Elements tab, I found that the script had removed the whole DOM, leaving only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag behind:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/empty-dom.png&quot; alt=&quot;empty dom&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;That was &lt;strong&gt;OUTRAGEOUS&lt;/strong&gt;! It’s the most offensive script I’ve seen. I must track it down and counter it.&lt;/p&gt;
				&lt;p&gt;Looking at the &lt;strong&gt;Network&lt;/strong&gt; tab, there are so many scripts that I probably can’t inspect them one-by-one.&lt;/p&gt;
				&lt;p&gt;When I reload the page, I found that my whole Chrome went unresponsive, and I had to stop it from Task Manager. What a job they’ve done!&lt;/p&gt;
				&lt;h2 id=&quot;locating-the-script&quot;&gt;Locating the script&lt;/h2&gt;
				&lt;p&gt;One (and the only one so far) key behavior is its removal of the whole DOM, so if I could track that change, I could very accurately locate the offending script.&lt;/p&gt;
				&lt;p&gt;I opened Chrome in incognito mode again, and opened Dev Tools. I need to add a breakpoint on change to the root element, and I have to add the watcher after opening the page, so the first thing to do is to add a breakpoint at page load. I navigated to the &lt;strong&gt;Sources&lt;/strong&gt; tab, under &lt;strong&gt;Event Listener Breakpoints&lt;/strong&gt;, I checked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt;:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/breakpoint-load.png&quot; alt=&quot;breakpoint load&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Then I navigated to the page, and an innocent script hit the breakpoint.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/break-at-load.png&quot; alt=&quot;break at load&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;That wasn’t too much of a problem, as I could then switch to the &lt;strong&gt;Elements&lt;/strong&gt; tab and add a breakpoint onto the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/set-breakpoint-on-html.png&quot; alt=&quot;set breakpoint on html&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The next task would be a bit boring, to keep on continuing the debugger while keeping an eye on what’s running.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/continue-execution.png&quot; alt=&quot;continue execution&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The same innocent script, along with jQuery, showed up around 20 times, before the first suspicious script poped up:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/first-suspicious-script.png&quot; alt=&quot;first suspicious script&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;It was named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ads.min.js&lt;/code&gt; and was pretty short, as shown below (formatted):&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mdp-deblocker-ads&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;So I let it continue.&lt;/p&gt;
				&lt;p&gt;It quickly became a tedious task, stepping through all those jQuery and analytics script with nothing interesting.&lt;/p&gt;
				&lt;p&gt;Recalling that the offending script would remove both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; elements, I changed the breakpoint to them:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/set-breakpoint-on-body.png&quot; alt=&quot;set breakpoint on body&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;It turned out that I did the right thing. Another suspicious script showed up very quickly:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/offending-script-found.png&quot; alt=&quot;offending script found&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;It’s minified and had a jumbled file name. Scrolling the line to the beginning shows a heavy hint that it’s the one I was looking for:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/start-of-script.png&quot; alt=&quot;start of script&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Its comments pretty much told it all: &lt;em&gt;Most effective way to detect ad blockers&lt;/em&gt;, so I pulled it out and took a closer look.&lt;/p&gt;
				&lt;p&gt;It wasn’t hard to find some traits, for example, the following code is a part of it:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Dev tools checker&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;tackling-the-vicious-script&quot;&gt;Tackling the vicious script&lt;/h2&gt;
				&lt;p&gt;The script starts with an event listener:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
				&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// function body&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;As I’m not particularly interested in disassembling the whole thing (you can always run it through a formatter to get a better idea of it), I decided to monkey-patch the event listener.&lt;/p&gt;
				&lt;p&gt;Because the script runs at a rather early stage of page load, I need to do something &lt;em&gt;even faster&lt;/em&gt;, so it would be nice to run the “solution script” as soon as the page is “created”. This can be done using Tampermonkey’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@run-on document-start&lt;/code&gt; directive:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @name         WordPress Anti-DeBlocker&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @run-at       document-start&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now I could write my logic and check what’s being executed. Let’s get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;document.addEventListener&lt;/code&gt; hooked up first:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Looking at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;the function prototype&lt;/a&gt;, it may have up to 4 arguments, so the patched function also needs to have 4:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It’s not a good naming choice, but neither is it a must to have good coding styles here, so I’m going to pass it over here.&lt;/p&gt;
				&lt;p&gt;As shown by the code, it adds a listener to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DOMContentLoaded&lt;/code&gt; event, with its code containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev tools checker&lt;/code&gt;. Knowing that the source code of a function can be retrieved with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString&lt;/code&gt;&lt;/a&gt; method, I easily composed the following code:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// a = event name (string), b = function&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/dev&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\W?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;tool/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Blocked function. Code below&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The idea is simple: If something matching the known patterns of the target script, interrupt and deny its code.&lt;/p&gt;
				&lt;p&gt;The last thing is I need this countermeasure to run on all sites, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@match&lt;/code&gt; directive should be the wildest wildcard:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @name         WordPress Anti-DeBlocker&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @match        *://*/*&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @run-at       document-start&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now save the userscript and reload the page. I knew that my solution worked as soon as I saw the expected output:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/captured-script.png&quot; alt=&quot;captured script&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Well done, iBug! You’ve just got another achievement for defeating this plugin!&lt;/p&gt;
				&lt;h2 id=&quot;the-bottom-line&quot;&gt;The bottom line&lt;/h2&gt;
				&lt;p&gt;While ads could be an important income for websites, there are users who detest them. Compelling every single and last user to disable their ad blocker for you is blunt and abusive. If you really want every piece of crummy money from your nasty ads, go fuck yourself.&lt;/p&gt;
				&lt;p&gt;Developer always wins.&lt;/p&gt;
				&lt;p&gt;I’ve uploaded the sample to &lt;a href=&quot;https://download.ibugone.com/wp-deblocker-2.0.3.js&quot;&gt;https://download.ibugone.com/wp-deblocker-2.0.3.js&lt;/a&gt; for analysis (run it through VSCode formatter or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang-format&lt;/code&gt; first).&lt;/p&gt;
				&lt;p&gt;Finally, &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https://1.envato.market/deblocker&quot;&gt;here’s the link&lt;/a&gt; to the horrible WordPress plugin, if you want to find out for yourself.&lt;/p&gt;</content><author><name>iBug</name></author><category term="web" /><summary type="html">I’ll go straight to the solution (keep in mind that it’s considerably primitive, so use at your own risk) with code attached below. It’s a Tampermonkey userscript.</summary></entry><entry><title type="html">Enabling better “Related Posts” with Jekyll</title><link href="https://ibug.io/blog/2020/05/jekyll-better-related-posts/" rel="alternate" type="text/html" title="Enabling better “Related Posts” with Jekyll" /><published>2020-05-27T00:00:00+00:00</published><updated>2021-02-04T21:47:35+00:00</updated><id>https://ibug.io/blog/2020/05/jekyll-better-related-posts</id><content type="html" xml:base="https://ibug.io/blog/2020/05/jekyll-better-related-posts/">&lt;p&gt;There’s a less-known feature of Jekyll that populates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;related_posts&lt;/code&gt; correctly with “related” posts, instead of the 10 latest posts when it’s disabled by default.&lt;/p&gt;
				&lt;h2 id=&quot;lsi&quot;&gt;LSI&lt;/h2&gt;
				&lt;p&gt;Back in October 2019 I gave this feature a try, but the first obstacle was that there weren’t any documentations around it. I had to struggle through random Google results to find the solution.&lt;/p&gt;
				&lt;p&gt;Fortunately, it wasn’t hidden or scattered around so terribly. Jekyll has an official plugin &lt;a href=&quot;https://github.com/jekyll/classifier-reborn&quot;&gt;classifier-reborn&lt;/a&gt; to enable &lt;a href=&quot;https://jekyll.github.io/classifier-reborn/lsi&quot;&gt;LSI (latent semantic indexing)&lt;/a&gt;, so one can simply install the gem and get Jekyll’s LSI feature running. The recommended way has always been adding requirements to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, like this:&lt;/p&gt;
				&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;classifier-reborn&quot;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And then refresh your dependency installation with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;. You can try building your site again with LSI enabled by appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--lsi&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; command:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;span class=&quot;nt&quot;&gt;--lsi&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Sit back and make yourself a cup of coffee, because what follows is going to &lt;em&gt;really slow&lt;/em&gt;. For every 10 posts with 1000 words each, you’re going to have to wait for a minute for Jekyll to build your site (measured on GitHub Actions). This grows terribly as for larger sites, each build could take more than 10 minutes.&lt;/p&gt;
				&lt;p&gt;The build time scared me off when I first tried with it.&lt;/p&gt;
				&lt;h2 id=&quot;improving-the-speed&quot;&gt;Improving the speed&lt;/h2&gt;
				&lt;p&gt;Fortunately, there is GNU Scientific Library to help speed up the process. There’s also a Ruby wrapper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsl&lt;/code&gt; for this.&lt;/p&gt;
				&lt;p&gt;To fully utilize the enhancements from GSL, a native library is required. On Ubuntu / Debian, this can be done by installing the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgsl-dev&lt;/code&gt;. On macOS, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install gsl&lt;/code&gt; will suffice. Then you can proceed to adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;gsl&quot;&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;The results are delighting: GSL reduced the build time of this website from 75s to 3s on my local machine (i7-8850H, Ubuntu 20.04), and from nearly 3 minutes to 8 seconds on GitHub Actions.&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;note&quot;&gt;&lt;i class=&quot;fas fa-lightbulb&quot;&gt;&lt;/i&gt; Note&lt;/h4&gt;
				&lt;p&gt;GitHub Pages doesn’t support LSI natively. You’ll have to build your site with a CI service (like GitHub Actions) and deploy manually.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Happy Jekylling!&lt;/p&gt;
				&lt;p&gt;Special thanks to this article &lt;a href=&quot;https://frankindev.com/2019/11/21/enable-related-posts-with-lsi/&quot;&gt;https://frankindev.com/2019/11/21/enable-related-posts-with-lsi/&lt;/a&gt;.&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><category term="jekyll" /><summary type="html">There’s a less-known feature of Jekyll that populates related_posts correctly with “related” posts, instead of the 10 latest posts when it’s disabled by default.</summary></entry><entry><title type="html">Use RSA CA Certificates with OpenSSH 8.2</title><link href="https://ibug.io/blog/2020/04/ssh-8.2-rsa-ca/" rel="alternate" type="text/html" title="Use RSA CA Certificates with OpenSSH 8.2" /><published>2020-04-07T00:00:00+00:00</published><updated>2021-02-04T21:47:35+00:00</updated><id>https://ibug.io/blog/2020/04/ssh-8.2-rsa-ca</id><content type="html" xml:base="https://ibug.io/blog/2020/04/ssh-8.2-rsa-ca/">&lt;p&gt;OpenSSH 8.2 is coming to the latest Long-Term Service release of Ubuntu, Focal Fossa (20.04), and has some breaking changes for users using &lt;a href=&quot;/p/30&quot;&gt;an SSH Certificate Authority&lt;/a&gt;.&lt;/p&gt;
				&lt;p&gt;With OpenSSH 8.1 or older, the default certificate type when signing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt;, although ECDSA- and SHA2-based algorithms have been supported since OpenSSH 5.7. As cited in the &lt;a href=&quot;https://www.openssh.com/txt/release-8.2&quot;&gt;release notes&lt;/a&gt;,&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;p&gt;It is now possible[1] to perform chosen-prefix attacks against the SHA-1 hash algorithm for less than USD$50K.&lt;/p&gt;
				&lt;p&gt;&lt;sup&gt;[1] &lt;em&gt;SHA-1 is a Shambles: First Chosen-Prefix Collision on SHA-1 and Application to the PGP Web of Trust&lt;/em&gt;&lt;br /&gt;
				Leurent, G and Peyrin, T (2020) &lt;a href=&quot;https://eprint.iacr.org/2020/014.pdf&quot;&gt;https://eprint.iacr.org/2020/014.pdf&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;So the SHA-1 based RSA certificate algorithm is no longer considered secure. As a result,&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;ul&gt;
				&lt;li&gt;ssh(1), sshd(8), ssh-keygen(1): this release removes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; (RSA/SHA1) algorithm from those accepted for certificate signatures (i.e. the client and server &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASignatureAlgorithms&lt;/code&gt; option) and will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsa-sha2-512&lt;/code&gt; signature algorithm by default when the ssh-keygen(1) CA signs new certificates.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;The immediate effect is, when you attempt to log in to a host that presents an RSA/SHA1 certificate, instead of logging in successfully, SSH will complain with the following message:&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;p&gt;check_host_cert: certificate signature algorithm ssh-rsa: signature algorithm not supported&lt;/p&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;and of course, you’re again asked to trust the host key even if you’ve already trusted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@cert-authority&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;This can be particularly annoying in larger organizations where the deployment of RSA/SHA1 certificates has spanned everywhere, and OpenSSH 8.2 essentially just broke them all.&lt;/p&gt;
				&lt;p&gt;Rest assured, there’s a way to make everything go back to normal once more. But as suggested by OpenSSH, &lt;strong&gt;you should not rely on this and should instead move away from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; certificates soon&lt;/strong&gt;.&lt;/p&gt;
				&lt;h2 id=&quot;fix&quot;&gt;Bring back the compatibility&lt;/h2&gt;
				&lt;p&gt;As described above, the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; has been dropped from the default list of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASignatureAlgorithms&lt;/code&gt;, though as of April 8, the man page for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh_config(5)&lt;/code&gt; contains a small mistake, which claims the default value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASignatureAlgorithms&lt;/code&gt; is as follows:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CASignatureAlgorithms ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The actual value, of course, is the same as the above list with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; stripped off, and all you need to do is to add it back.&lt;/p&gt;
				&lt;p&gt;If you just want to fix this for yourself, you can add the following lines to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host *
				CASignatureAlgorithms ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If you want to fix this for all users on a system, you can add the same lines to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; instead, which will affect all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; commands run on that system. &lt;strong&gt;Remember this is still not recommended in favor of upgrating the signature algorithm.&lt;/strong&gt;&lt;/p&gt;
				&lt;h2 id=&quot;new-certificate&quot;&gt;Sign new certificates&lt;/h2&gt;
				&lt;div class=&quot;notice--success&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;good-news&quot;&gt;&lt;i class=&quot;fas fa-fw fa-check&quot;&gt;&lt;/i&gt; Good news&lt;/h4&gt;
				&lt;p&gt;You don’t have to generate a new CA and deploy it everywhere. You can still use your RSA private key to generate new certificates for your machines, though it does require a little research first.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Let’s start by looking at the man page for ssh-keygen(1).&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; ca_key &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; certificate_identity &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; pkcs11_provider] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; principals] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; option] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt; validity_interval] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; serial_number] file ...
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It doesn’t look like there’s a way to control the certificate algorithm. But hold on, have you tried the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt; option that appears in many other subcommands…?&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; ~/.ssh/ca &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; Example &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa-sha2-256 id_rsa.pub
				&lt;span class=&quot;c&quot;&gt;#                                  ^^^^^^^^^^^^^^^&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;This will generate a new certificate at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa-cert.pub&lt;/code&gt;. You might want to examine it at once, and you might probably be disappointed to see that it still begins with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa-cert-v01@openssh.com&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;&lt;strong&gt;That simply doesn’t matter.&lt;/strong&gt; To examine a certificate, you should use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -L&lt;/code&gt; command:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-Lf&lt;/span&gt; id_rsa-cert.pub
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;… and check its output:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;id_rsa-cert.pub:
				Type: ssh-rsa-cert-v01@openssh.com user certificate
				Public key: RSA-CERT SHA256:yP2N3uawwSuoJdww2miEYrsGuBictGYJ6VmkdhvtYcg
				Signing CA: RSA SHA256:yP2N3uawwSuoJdww2miEYrsGuBictGYJ6VmkdhvtYcg (using rsa-sha2-256)
				Key ID: &quot;Example&quot;
				Serial: 0
				Valid: forever
				Principals: (none)
				Critical Options: (none)
				Extensions:
				permit-X11-forwarding
				permit-agent-forwarding
				permit-port-forwarding
				permit-pty
				permit-user-rc
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Notice how the fourth line reads &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using rsa-sha2-256&lt;/code&gt;? It’s now signed with a different algorithm that’s not considered deprecated anymore, which means it’s ready to deploy.&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;tip&quot;&gt;&lt;i class=&quot;fas fa-fw fa-lightbulb&quot;&gt;&lt;/i&gt; Tip&lt;/h4&gt;
				&lt;p&gt;OpenSSH 8.2 defaults to using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsa-sha2-256&lt;/code&gt; algorithm when signing new certificates with an RSA private key, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt; option is only necessary if you’re using OpenSSH 8.1 or older.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;You can try running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -L&lt;/code&gt; on one of your old certificates to see how SSH describes it. This is left as a small quiz for you to figure out for yourself.&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><category term="linux" /><category term="ssh" /><summary type="html">OpenSSH 8.2 is coming to the latest Long-Term Service release of Ubuntu, Focal Fossa (20.04), and has some breaking changes for users using an SSH Certificate Authority.</summary></entry><entry><title type="html">3 ways to use MySQL / MariaDB CLI without password</title><link href="https://ibug.io/blog/2020/02/use-mysql-cli-without-password/" rel="alternate" type="text/html" title="3 ways to use MySQL / MariaDB CLI without password" /><published>2020-02-04T00:00:00+00:00</published><updated>2021-02-04T21:47:35+00:00</updated><id>https://ibug.io/blog/2020/02/use-mysql-cli-without-password</id><content type="html" xml:base="https://ibug.io/blog/2020/02/use-mysql-cli-without-password/">&lt;p&gt;For all of us who are learning to use or developing with MySQL or MariaDB, it’s a common task to manually log in to the database for inspection. This is usually done with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; command line client, and for sure it’s cumbersome to log in to the database using your application’s credentials. For convenience purposes, you would like to make your life easy by configuring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; CLI to &lt;strong&gt;NOT&lt;/strong&gt; prompt you for a password each time. Here are three ways to do it on Linux.&lt;/p&gt;
				&lt;p&gt;(This may work on BSD and macOS as well, but I haven’t tested.)&lt;/p&gt;
				&lt;h2 id=&quot;method-1-use-sudo&quot;&gt;Method 1: Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt;&lt;/h2&gt;
				&lt;p&gt;By default, the local root user can log in to MySQL or MariaDB without password, so you can just use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo mysql&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt;, and expect everything to work. Of course, this depends on your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to not ask you for a password, or you’ll still have to enter one for the root privilege.&lt;/p&gt;
				&lt;p&gt;You can go one step further by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias mysql='sudo mysql'&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; or whatever shell you’re using, but this is still a bit hackish, and IMO is more a workaround than a solution, so read on before proceeding.&lt;/p&gt;
				&lt;h2 id=&quot;method-2-use-a-password-and-remember-it-somewhere&quot;&gt;Method 2: Use a password and remember it somewhere&lt;/h2&gt;
				&lt;p&gt;The second option is to use a password, and let it be “automatically supplied” in some other way.&lt;/p&gt;
				&lt;p&gt;First, create a database user for yourself. Don’t forget to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibug&lt;/code&gt; with your username.&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'some_password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now you can log in to MySQL or MariaDB using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -uibug -p'some password'&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;You’re probably urged to add that as an alias in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;, but hold on again, that’s the wrong way to do it. In case your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; is readable by others, you risk exposing your password. Also, in case you want to log in as another user some time later, you may mess things up because of the alias expansion.&lt;/p&gt;
				&lt;p&gt;The correct way to store the password for yourself is to write it in a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.my.cnf&lt;/code&gt; under your home directory. Its content should look like this:&lt;/p&gt;
				&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[client]&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ibug&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some_password&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Remember to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 600&lt;/code&gt; on it so no one else reads it. You can now try running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; directly, and it’ll read your username and password from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.my.cnf&lt;/code&gt; without prompting you for anything.&lt;/p&gt;
				&lt;p&gt;But again, if you use a weak password and someone manages to guess it, you still risk exposing your whole MySQL database to them.&lt;/p&gt;
				&lt;p&gt;Think how the root user on your system logs in to MySQL directly - it’s safe and secure, because you can’t log in without password using the root user (unless you’re running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; as root, but not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -uroot -p&lt;/code&gt; as a regular user). The good news is, &lt;em&gt;you&lt;/em&gt; can replicate this setup for yourself! So read on for the last and perfect solution.&lt;/p&gt;
				&lt;h2 id=&quot;method-3-use-unix-authentication&quot;&gt;Method 3: Use Unix authentication&lt;/h2&gt;
				&lt;p&gt;A bit of background first. Like how one can get the address and port of other end of a TCP or UDP socket, one can also get the connector information of the other end of a unix socket, namely, the process ID, user ID and group ID (see &lt;a href=&quot;http://man7.org/linux/man-pages/man7/unix.7.html&quot; title=&quot;unix(7)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man 7 unix&lt;/code&gt;&lt;/a&gt;, look for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCM_CREDENTIALS&lt;/code&gt;).&lt;/p&gt;
				&lt;p&gt;When you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; on your local machine, it will try to connect to the MySQL server using a unix socket located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/run/mysqld/mysqld.sock&lt;/code&gt;, and this way the MySQL server will know who it is trying to connect. This is exactly how MySQL identifies the local root user: The root user won’t have the same access if it tries connecting via TCP (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -h 127.0.0.1&lt;/code&gt;).&lt;/p&gt;
				&lt;p&gt;To let MySQL recognize you using unix socket magic, you can use the following query to create your user:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If you have already created a user, you can change its authentication method by simply replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALTER&lt;/code&gt; in the above query:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h3 id=&quot;mariadb-makes-a-difference-here&quot;&gt;&lt;i class=&quot;fas fa-exclamation-circle&quot;&gt;&lt;/i&gt; MariaDB makes a difference here!&lt;/h3&gt;
				&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/MariaDB&quot;&gt;MariaDB&lt;/a&gt;, a community fork of Oracle MySQL, uses a similar query for unix socket authentication:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;--                                        ^^^^^^^^^^^^^^^&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;p&gt;Better yet, MariaDB supports user creation with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRANT&lt;/code&gt; query, so the first two queries can be merged into one:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;/div&gt;
				&lt;p&gt;After the user is set up properly, use the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRANT&lt;/code&gt; query to grant access to yourself.&lt;/p&gt;
				&lt;p&gt;Now you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; to manage your whole database without being prompted for password. You can safely delete &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.my.cnf&lt;/code&gt; if you created it following Method 2 and you don’t have other options in it. You can also try using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -u&amp;lt;your username&amp;gt;&lt;/code&gt; under another user and see it fail, to ensure that only &lt;em&gt;you&lt;/em&gt; can access the database directly.&lt;/p&gt;
				&lt;h2 id=&quot;-creating-and-granting-access-to-more-users&quot;&gt;&lt;i class=&quot;fas fa-lightbulb&quot;&gt;&lt;/i&gt; Creating and granting access to more users&lt;/h2&gt;
				&lt;p&gt;If you want to create more users with your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; command line, you’ll probably see this message:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR 1045 (28000): Access denied for user 'ibug'@'localhost' (using password: YES)
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;This is because you haven’t granted yourself &lt;em&gt;the privilege to grant&lt;/em&gt;, or in other words, your privilege isn’t “redistributable”.&lt;/p&gt;
				&lt;p&gt;You can set the privileges again, but with the privilege to “redistribute” your access to more users, with the following query:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Similarly, the one-liner for MariaDB looks like this:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix_socket&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Both MySQL and MariaDB requires “flushing” after any privilege assignment is altered.&lt;/p&gt;
				&lt;p&gt;You can then create more users with your passwordless access, and play around with MySQL to fulfill your curiosity.&lt;/p&gt;
				&lt;p&gt;And that concludes this tutorial. Cheers!&lt;/p&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="mysql" /><summary type="html">For all of us who are learning to use or developing with MySQL or MariaDB, it’s a common task to manually log in to the database for inspection. This is usually done with the mysql command line client, and for sure it’s cumbersome to log in to the database using your application’s credentials. For convenience purposes, you would like to make your life easy by configuring the mysql CLI to NOT prompt you for a password each time. Here are three ways to do it on Linux.</summary></entry></feed>