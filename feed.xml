<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://ibug.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ibug.io/" rel="alternate" type="text/html" /><updated>2021-12-01T19:45:33+00:00</updated><id>https://ibug.io/feed.xml</id><title type="html">iBug</title><subtitle>The little personal site for iBug</subtitle><author><name>iBug</name></author><entry><title type="html">New Pandora’s box: Install Linux and Windows onto the same NTFS partition</title><link href="https://ibug.io/blog/2021/11/linux-windows-amalgam-monster-ntfs/" rel="alternate" type="text/html" title="New Pandora’s box: Install Linux and Windows onto the same NTFS partition" /><published>2021-11-28T00:00:00+00:00</published><updated>2021-11-28T04:39:20+00:00</updated><id>https://ibug.io/blog/2021/11/linux-windows-amalgam-monster-ntfs</id><content type="html" xml:base="https://ibug.io/blog/2021/11/linux-windows-amalgam-monster-ntfs/">&lt;p&gt;Linux 5.15 is shipped with a brand new driver for Microsoft’s classic NTFS filesystem, &lt;a href=&quot;https://www.techrepublic.com/article/linux-kernel-5-15-is-now-available-and-it-has-something-special-for-ntfs-users/&quot;&gt;NTFS3&lt;/a&gt;. Unlike the decades-old open-source NTFS-3G project, which is based on FUSE and have always received criticism for breaking existing filesystems, NTFS3 is a new driver that is designed to be compatible with contemporary NTFS filesystems, while providing safer read/write operations. This makes it possible to install Linux onto NTFS (as is with most other filesystems), and opens up a whole new can of worms: run Linux alongside Windows, TOGETHER.&lt;/p&gt;
				&lt;div class=&quot;notice--danger&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;warning&quot;&gt;&lt;i class=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt; WARNING&lt;/h4&gt;
				&lt;p&gt;This is COMPLETELY EXPERIMENTAL. If you are not familiar with either Linux or Windows, &lt;strong&gt;do not try this&lt;/strong&gt;.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Sounds WEIRD to me. I’m going to do this experiment on my Proxmox VE cluster.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/monster/vm-create.png&quot; alt=&quot;Create virtual machine&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;h2 id=&quot;preparation&quot;&gt;Preparation&lt;/h2&gt;
				&lt;h3 id=&quot;archiso&quot;&gt;Archiso&lt;/h3&gt;
				&lt;p&gt;At the time of writing this article, the latest Arch Linux ISO (2021.11.01) was shipped with Kernel &lt;strong&gt;5.14&lt;/strong&gt;.15 - no new NTFS3 driver. I need to create one for myself or this won’t work.&lt;/p&gt;
				&lt;p&gt;&lt;a href=&quot;https://wiki.archlinux.org/title/archiso&quot;&gt;Archiso&lt;/a&gt; is Arch’s official tool for creating custom ISO images. I’m not normally an Arch user, so I choose to install Arch first from an official ISO (20211101) before wiping it.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/monster/install-arch-partition.png&quot; alt=&quot;Partitioning in Arch ISO&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;After this temporary system is set up, I just follow the Archiso guide and receive my own &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;archlinux-2021.11.22-x86_64.iso&lt;/code&gt; with no trouble. It has Kernel &lt;strong&gt;5.15&lt;/strong&gt;.4 packed.&lt;/p&gt;
				&lt;p&gt;I copy the ISO onto the Proxmox VE host system, reboot the VM with this new ISO and wipe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda2&lt;/code&gt; to avoid (possible) further issues with the Windows installer. I also format &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda1&lt;/code&gt; again to ensure I’m really starting over anew.&lt;/p&gt;
				&lt;h3 id=&quot;install-windows&quot;&gt;Install Windows&lt;/h3&gt;
				&lt;p&gt;Since NTFS is developed by Microsoft and for Windows, it seems reasonable to assume Windows is best suited for NTFS. So I’ll install Windows first lest it recognizes the filesystem created by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mkfs.ntfs&lt;/code&gt; (from the old &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntfs-3g&lt;/code&gt; package) as “foreign” and complains anyhow.&lt;/p&gt;
				&lt;p&gt;The installation process of Windows 10 has always been as boring and mundane as it is, so I’m not going to be verbose here. Following the usual steps, except that the disk has already been partitioned, it’s easy to get Windows 10 up and ready.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/monster/install-win10-oobe.png&quot; alt=&quot;Windows 10 OOBE screen&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Proceeding through the out-of-box experience and I get to the desktop. There’s not many things of interest here, so I just shutdown the VM and take a snapshot.&lt;/p&gt;
				&lt;p&gt;Now it’s time to get this compound monstrosity set up.&lt;/p&gt;
				&lt;h2 id=&quot;the-main-show&quot;&gt;The Main Show&lt;/h2&gt;
				&lt;p&gt;Swap the CD/DVD drive image for the newly created archiso and boot it up:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/monster/install-archiso.png&quot; alt=&quot;CD/DVD image selection&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;With the proper Linux kernel equipped, I can now mount the NTFS partition create by Windows installer. It seems NTFS is sophisticated enough to even allow Unix filesystem attibutes, like file modes (permissions) and ownership, as well as “special file types” like symbolic links and named sockets (Unix domain sockets). This may hint that bootstrapping a Linux system should not be too problematic.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;fdisk &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; /dev/sda  &lt;span class=&quot;c&quot;&gt;# confirm partition layout&lt;/span&gt;
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; ntfs3 /dev/sda2 /mnt
				&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; /mnt/boot/efi
				mount /dev/sda1 /mnt/boot/efi
				pacstrap /mnt base linux linux-firmware
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Indeed, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pacstrap&lt;/code&gt; goes so smoothly that I almost forget it’s on a non-native filesystem. The only thing that makes me concerned is that &lt;strong&gt;there’s no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsck&lt;/code&gt; tool for NTFS&lt;/strong&gt; (&lt;em&gt;file not found: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsck.ntfs3&lt;/code&gt;&lt;/em&gt; in console output).&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/monster/install-arch-pacstrap.png&quot; alt=&quot;pacstrap output&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now I can chroot into the system and set up the rest of the system.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;genfstab &lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt; /mnt &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; /mnt/etc/fstab
				arch-chroot /mnt
				&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-sf&lt;/span&gt; /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
				vim /etc/locale.gen  &lt;span class=&quot;c&quot;&gt;# add en_US.UTF-8 UTF-8&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;monster &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /etc/hostname
				passwd &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; root
				&lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# quit chroot environment, return to archiso&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Fixing the bootloader is a bit different than usual, as Linux detects NTFS partitions as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntfs&lt;/code&gt;, not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ntfs3&lt;/code&gt;. In case of auto mounting, Linux will try to mount with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t ntfs&lt;/code&gt;, which is not available (it’s provided by ntfs-3g). Fortunately, there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rootfstype=&lt;/code&gt; &lt;a href=&quot;https://wiki.archlinux.org/title/kernel_parameters&quot;&gt;kernel command-line parameter&lt;/a&gt; to override the “filesystem type” parameter when mounting.&lt;/p&gt;
				&lt;p&gt;Putting this into action:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;arch-chroot /mnt
				&lt;span class=&quot;c&quot;&gt;# configure networking&lt;/span&gt;
				pacman &lt;span class=&quot;nt&quot;&gt;-Sy&lt;/span&gt; grub efibootmgr
				vim /etc/default/grub
				&lt;span class=&quot;c&quot;&gt;# remove &quot;quiet&quot; from GRUB_CMDLINE_LINUX&lt;/span&gt;
				&lt;span class=&quot;c&quot;&gt;# set GRUB_CMDLINE_LINUX_DEFAULT=&quot;rootfstype=ntfs3&quot;&lt;/span&gt;
				grub-install
				grub-mkconfig &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; /boot/grub/grub.cfg
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/monster/install-arch-grub.png&quot; alt=&quot;Install GRUB for Arch Linux&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;To make things a bit more interesting, I’m adding a desktop environment:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pacman &lt;span class=&quot;nt&quot;&gt;-Sy&lt;/span&gt; gnome
				&lt;span class=&quot;c&quot;&gt;# select some items - not everything&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And configure networking as well:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /etc/systemd/network
				vim ens18.network
				&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; ../system
				&lt;span class=&quot;nb&quot;&gt;ln&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; /lib/systemd/system/systemd-networkd.service multi-user.target.wants/
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;All set, let’s give it a try.&lt;/p&gt;
				&lt;h2 id=&quot;usage-experience&quot;&gt;Usage experience&lt;/h2&gt;
				&lt;p&gt;Arch Linux plays surprisingly well with the new NTFS3 filesystem driver.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/monster/after-arch-neofetch.png&quot; alt=&quot;System information in Arch Linux&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;To keep things simple, I didn’t install too much software. During my testing, the only issue I encountered was that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ldconfig&lt;/code&gt; never worked. It always aborts.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/monster/arch-terminal-sigabrt.png&quot; alt=&quot;ldconfig stops working&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;A non-issue is that there’s no working &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fsck&lt;/code&gt; tool, and there’s a systemd service “Fsck at boot” that consequently fails. It’s not as useful so I just disabled it.&lt;/p&gt;
				&lt;p&gt;The pioneer from r/archlinux said the system breaks after a few reboots, which didn’t happen to me. On the contrary, my Arch Linux was considerably resistant to Windows, and survived multiple Windows Updates, one Microsoft Update, and a few more. It even survived a CHKDSK despite a bunch of files being reported for “invalid filename” because &lt;a href=&quot;https://stackoverflow.com/a/25477235/5958455&quot;&gt;Windows dislikes colons in filenames&lt;/a&gt; (not that NTFS doesn’t support).&lt;/p&gt;
				&lt;h2 id=&quot;thoughts&quot;&gt;Thoughts&lt;/h2&gt;
				&lt;p&gt;I must admit I’m amazed at how exquisitely NTFS is designed. It’s so mature that it hasn’t even been updated &lt;a href=&quot;https://en.wikipedia.org/wiki/NTFS#Versions&quot;&gt;since Windows XP&lt;/a&gt;. One important part of NTFS is its Extended Attributes (EA) for files. Every NTFS filesystem contains a special file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$MFT&lt;/code&gt; located under its root directory. This is the metadata for all files, including file names, “normal attributes” and ACL, among which is the EA. Every file has an associated entry for EA, which can contain an arbitrary number of attributes (key-value pairs). In fact, the first generation of Windows Subsystem for Linux (WSL) stores Linux file modes and permissions &lt;a href=&quot;https://docs.microsoft.com/en-us/windows/wsl/file-permissions&quot;&gt;using custom EA keys&lt;/a&gt;, which gets adapted by the new NTFS3 driver. Other EA keys are also used as needed, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;security.capability&lt;/code&gt;, which is a 20-byte bitset. (Interestingly, EA was originally designed for compatibility with HPFS, which also has a similarly-extensible “Extended Attributes”.)&lt;/p&gt;
				&lt;p&gt;The new NTFS3 driver is a delighting improvement to the Linux ecosystem. Complaints about the classic NTFS-3G driver &lt;a href=&quot;https://superuser.com/q/613869/688600&quot;&gt;have&lt;/a&gt; &lt;a href=&quot;https://www.reddit.com/r/linuxquestions/comments/73v5pi/why_is_ntfs_on_linux_so_slow/&quot;&gt;always&lt;/a&gt; &lt;a href=&quot;https://askubuntu.com/q/187813/612877&quot;&gt;been&lt;/a&gt; &lt;a href=&quot;https://unix.stackexchange.com/q/107978/211239&quot;&gt;around&lt;/a&gt;. Performance was one of the primary concerns because it not only is based on FUSE (Filesystem in USErspace), but also badly optimized. Use of FUSE means extra context switches when accessing files, which, paired with hard-coded 4 KiB read/write unit, delivers unusually slow access speeds.&lt;/p&gt;
				&lt;p&gt;While the NTFS3 driver is a bit more optimized, concerns around compatibility are still encompassing. This is mainly because it’s still built on knowledge obtained from reverse engineering than technical documentation and standard. Fortunately, stability for NTFS-3G is already at a satisfactory level, and the new driver is thought to be more reliable than the old one.&lt;/p&gt;
				&lt;p&gt;Besides, this is a perfect example of Linux’s inclusiveness. Years before the commencement of the new NTFS3 driver, &lt;a href=&quot;https://github.com/CyanoHao/NTFS-as-rootfs&quot;&gt;attempts were made&lt;/a&gt; to run Linux on top of NTFS using NTFS-3G. This leads to an interesting question: Will Linux run on top of FAT32? Technical difficulties are more conspicuous and critical this time, like lack of support and extensibility for file modes and more. I’ll explore into this challenge and share my findings in a subsequent blog post. Stay tuned!&lt;/p&gt;
				&lt;h2 id=&quot;links--credits&quot;&gt;Links &amp;amp; Credits&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Pioneer from r/archlinux: &lt;a href=&quot;https://www.reddit.com/r/archlinux/comments/qwsftq/arch_linux_on_ntfs3/&quot;&gt;Arch Linux on NTFS3!&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Original idea by a GitHub user: &lt;a href=&quot;https://gist.github.com/motorailgun/cc2c573f253d0893f429a165b5f851ee&quot;&gt;Installing Windows and Linux into the same partition&lt;/a&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;/ul&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="windows" /><summary type="html">Linux 5.15 is shipped with a brand new driver for Microsoft’s classic NTFS filesystem, NTFS3. Unlike the decades-old open-source NTFS-3G project, which is based on FUSE and have always received criticism for breaking existing filesystems, NTFS3 is a new driver that is designed to be compatible with contemporary NTFS filesystems, while providing safer read/write operations. This makes it possible to install Linux onto NTFS (as is with most other filesystems), and opens up a whole new can of worms: run Linux alongside Windows, TOGETHER.</summary></entry><entry><title type="html">Reinstall Windows VPS into Linux with iPXE network boot</title><link href="https://ibug.io/blog/2021/11/convert-windows-vps-to-linux/" rel="alternate" type="text/html" title="Reinstall Windows VPS into Linux with iPXE network boot" /><published>2021-11-22T00:00:00+00:00</published><updated>2021-11-23T01:53:16+00:00</updated><id>https://ibug.io/blog/2021/11/convert-windows-vps-to-linux</id><content type="html" xml:base="https://ibug.io/blog/2021/11/convert-windows-vps-to-linux/">&lt;p&gt;This November I found a discount from one of my favorite VPS providers, &lt;a href=&quot;https://go.ibugone.com/vps-hk&quot;&gt;NETfront&lt;/a&gt;. They offered &lt;strong&gt;Linux VPS with 2 vCPUs and 2 GB RAM&lt;/strong&gt; at HK$56/mo, and also &lt;strong&gt;Windows VPS with 4 vCPUs and 4 GB RAM&lt;/strong&gt; at HK$49/mo. Looks strange, right? Why buy the crappy Linux VPS when you can have a better configuration with &lt;em&gt;less&lt;/em&gt; money (if possible)?&lt;/p&gt;
				&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Note&lt;/strong&gt;: I knew this VPS provider ran &lt;a href=&quot;https://www.proxmox.com/en/proxmox-ve&quot;&gt;Proxmox VE&lt;/a&gt; because I already had their VPSs. They’d give you a Proxmox VE noVNC console when you click “Console” to manage your VPS, from which you know they’re using QEMU/KVM as their virtualization platform. Direct access to QEMU screen is &lt;em&gt;awesome&lt;/em&gt;!&lt;/p&gt;
				&lt;h2 id=&quot;get-vps&quot;&gt;Get a VPS&lt;/h2&gt;
				&lt;p&gt;First I head to the shopping cart to order a Windows VPS.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/vps-buy.png&quot; alt=&quot;VPS SKU item&quot; class=&quot;border&quot; style=&quot;border-radius: 12px;&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Nice offer. It comes with unlimited traffic rate limited to 20 Mbps (BTW, it’s full duplex using Proxmox VE’s built-in “Rate Limit” feature for QEMU/KVM). I complete an order and get to create a VM for this service.&lt;/p&gt;
				&lt;p&gt;Completely expected, only Windows images are available for choosing.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/vps-create.png&quot; alt=&quot;VPS creation page&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;That doesn’t matter, since I’m prepared to bypass the provided VM images and set it up on my own, so I picked &lt;em&gt;Disabled&lt;/em&gt; for KVM OS Template. Hopefully it’ll speed up the VM creation process a bit, which, well, wouldn’t matter after all 😊.&lt;/p&gt;
				&lt;p&gt;The next part involves a bit of patient waiting. The VM creation took quite a few minutes, perhaps to reserve that 128 GB of HDD? It would probably make sense to wipe the reserved area lest any previous data be left behind, which is a good practice in terms of security. Whatever, now the new VPS is ready, and I can see some basic information about it. I take down the IP address because later in iPXE environment I need to configure it as a static IP address.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/vps-status.png&quot; alt=&quot;VPS ready&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Because I did not choose an OS template for the VPS, it must boot from network (which is true even if I &lt;em&gt;did&lt;/em&gt; take a template).&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/vps-boot-order.png&quot; alt=&quot;Set boot order of VPS&quot; style=&quot;border-radius: 6px;&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now it’s time to start working!&lt;/p&gt;
				&lt;h2 id=&quot;network-booting-with-ipxe&quot;&gt;Network booting with iPXE&lt;/h2&gt;
				&lt;p&gt;iPXE is an open-source PXE (network boot) firmware, and is built into QEMU, ready for use.&lt;/p&gt;
				&lt;p&gt;I open up the noVNC console and start the VPS. When I see “Press ESC for Boot Menu”, I go for it for the iPXE menu.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/ipxe-boot.png&quot; alt=&quot;iPXE boot screen&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;iPXE tries to configure network automatically using DHCP, but since the VPS environment does not have DHCP, I have to manually configure the network.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/ipxe-config.png&quot; alt=&quot;iPXE configure IP address&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now it’s time to load some boot source. &lt;a href=&quot;https://netboot.xyz/docs/booting/ipxe&quot;&gt;Netboot.xyz&lt;/a&gt; is the first Google result for “publix pxe boot server”, so I’ll trust it for good.&lt;/p&gt;
				&lt;div class=&quot;notice--danger&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;trap&quot;&gt;&lt;i class=&quot;fas fa-bug&quot;&gt;&lt;/i&gt; Trap&lt;/h4&gt;
				&lt;p&gt;I previously got trapped following its &lt;a href=&quot;https://netboot.xyz/docs/quick-start&quot;&gt;quick start&lt;/a&gt; guide. It didn’t boot for me and just dropped network connection mid-way. Turns out the &lt;a href=&quot;https://netboot.xyz/docs/booting/ipxe&quot;&gt;&lt;em&gt;Boot using iPXE&lt;/em&gt;&lt;/a&gt; guide is the one I should follow.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;According to &lt;a href=&quot;https://netboot.xyz/docs/booting/ipxe&quot;&gt;Netboot.xyz documentation&lt;/a&gt;, the only command needed after network is up is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chain&lt;/code&gt;. Noting that the iPXE firmware built into QEMU does not support HTTPS, I use plaintext HTTP instead. The final commands used in iPXE environment are here:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;net0/ip 192.0.2.2           &lt;span class=&quot;c&quot;&gt;# Replace with your IP address&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;net0/netmask 255.255.255.0  &lt;span class=&quot;c&quot;&gt;# Replace as needed&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;net0/gateway 192.0.2.1      &lt;span class=&quot;c&quot;&gt;# Replace with your gateway address&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;dns 8.8.8.8
				ifopen net0
				chain &lt;span class=&quot;nt&quot;&gt;--autofree&lt;/span&gt; http://boot.netboot.xyz
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Within a few seconds, I see the OS selection screen.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/ipxe-netboot.xyz.png&quot; alt=&quot;Loaded Netboot.xyz from iPXE&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Debian has always been my #1 choice for servers, no reason to miss it. Select Linux Network Installs and look for Debian Bullseye.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/ipxe-install-debian.png&quot; alt=&quot;Debian network installer&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now I’m halfway to success as Debian installer shows up. There’s still a small note: the Debian installer doesn’t “inherit” network settings from the iPXE firmware, so it must be configured again for Debian. The auto configuration attempt will fail and Debian will prompt for manual configuration. Not any difficult.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/ipxe-install-debian-network.png&quot; alt=&quot;Configure network for Debian installer&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now it’s time to wipe Windows (where’s Windows?) and install Linux!&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/ipxe-install-debian-disk.png&quot; alt=&quot;Configure disk partitions for Debian&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Select &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;deb.debian.org&lt;/code&gt; as package source since this is a Hong Kong VPS and not a mainland China one, and proceed through the rest of the process. After a reboot, I can see the login screen of the newly installed OS. Hooray!&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/debian-ok.png&quot; alt=&quot;Debian ready&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;If I replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-image-amd64&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;linux-image-cloud-amd64&lt;/code&gt;, I can free up some 100 MB disk space than the default setup:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipxe/debian-df.png&quot; alt=&quot;Debian DF&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;That’s it. With just some small efforts, this is now an afforable, high-spec Linux VPS.&lt;/p&gt;
				&lt;p&gt;While the VPS control panel would never offer Linux templates should anything go wrong, it’s always possible to boot from iPXE again for a “rescue environment”.&lt;/p&gt;
				&lt;h2 id=&quot;easter-egg&quot;&gt;Easter Egg&lt;/h2&gt;
				&lt;p&gt;During Debian installation, the installer automatically added the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;hyperv-daemon&lt;/code&gt; package after examining hardware. After booting into Debian, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemd-detect-virt&lt;/code&gt; reports “microsoft” (i.e. Windows Hyper-V). This VPS hosting provider may have some black magic with their Windows VPS cluster so that QEMU/KVM behaves so. This issue doesn’t seem to exist in their “native” Linux VPS, but it’s worth noting.&lt;/p&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="networking" /><summary type="html">This November I found a discount from one of my favorite VPS providers, NETfront. They offered Linux VPS with 2 vCPUs and 2 GB RAM at HK$56/mo, and also Windows VPS with 4 vCPUs and 4 GB RAM at HK$49/mo. Looks strange, right? Why buy the crappy Linux VPS when you can have a better configuration with less money (if possible)?</summary></entry><entry><title type="html">Secure site-to-site connection with Linux IPsec VPN</title><link href="https://ibug.io/blog/2021/10/linux-ipsec-with-ip-xfrm/" rel="alternate" type="text/html" title="Secure site-to-site connection with Linux IPsec VPN" /><published>2021-10-23T00:00:00+00:00</published><updated>2021-10-24T00:43:55+00:00</updated><id>https://ibug.io/blog/2021/10/linux-ipsec-with-ip-xfrm</id><content type="html" xml:base="https://ibug.io/blog/2021/10/linux-ipsec-with-ip-xfrm/">&lt;p&gt;Linux has a built-in framework for Internet Protocol Security (IPsec), which is often combined with other tunneling technologies (e.g. &lt;a href=&quot;https://en.wikipedia.org/wiki/Layer_2_Tunneling_Protocol&quot;&gt;L2TP&lt;/a&gt; and &lt;a href=&quot;https://en.wikipedia.org/wiki/Generic_Routing_Encapsulation&quot;&gt;GRE&lt;/a&gt;) to create secure cross-site network connections. As an innovative attempt to a lab in this semester’s Network Security course, which was designed to work over multiple Windows Server 2003 virtual machines (VM), I decided to go on my own and proceed with Linux VMs.&lt;/p&gt;
				&lt;p&gt;As covered in &lt;a href=&quot;/blog/2021/01/linux-container-explained/#namespaces&quot;&gt;my previous blog&lt;/a&gt;, one of the fundamentals of a Linux container is namespaces, among which the network namespace is of great interest here. Since a network namespace creates a copy of the entire network stack, it’s suitable as a substitute for a full VM for this lab. This enables me to work on this lab with lightweight containers on my Proxmox VE cluster.&lt;/p&gt;
				&lt;h2 id=&quot;setting-up-network&quot;&gt;Setting up network&lt;/h2&gt;
				&lt;p&gt;The lab is designed to work on VirtualBox platform, and the network structure is laid out as follows:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/network-structure-vbox.png&quot; alt=&quot;VirtualBox network structure&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;As &lt;a href=&quot;https://pve.proxmox.com/wiki/Network_Configuration#_naming_conventions&quot;&gt;Proxmox VE requires&lt;/a&gt; bridges to be named as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmbr#&lt;/code&gt; where &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#&lt;/code&gt; is a number, I renamed the networks as follows:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/network-structure-pve.png&quot; alt=&quot;Proxmox VE network structure&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;To create the networks, I edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/network/interfaces&lt;/code&gt; to append these lines:&lt;/p&gt;
				&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;auto vmbr91
				iface vmbr91 inet manual
				bridge_ports none
				bridge_stp off
				bridge_fd 0
				auto vmbr92
				iface vmbr92 inet manual
				bridge_ports none
				bridge_stp off
				bridge_fd 0
				auto vmbr95
				iface vmbr95 inet manual
				bridge_ports none
				bridge_stp off
				bridge_fd 0
				auto vmbr96
				iface vmbr96 inet manual
				bridge_ports none
				bridge_stp off
				bridge_fd 0
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge_stp&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bridge_fd&lt;/code&gt; options turns off &lt;a href=&quot;https://en.wikipedia.org/wiki/Spanning_Tree_Protocol&quot;&gt;STP&lt;/a&gt;, which is &lt;a href=&quot;https://wiki.debian.org/BridgeNetworkConnections#Configuring_bridging_in_.2Fetc.2Fnetwork.2Finterfaces&quot;&gt;usually a better choice&lt;/a&gt; in a virtualized environment.&lt;/p&gt;
				&lt;p&gt;I then bring up the new bridges so VMs can later be attached to:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ifup vmbr91 vmbr92 vmbr95 vmbr96
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now it’s time to set up the VMs.&lt;/p&gt;
				&lt;h2 id=&quot;setting-up-containers&quot;&gt;Setting up containers&lt;/h2&gt;
				&lt;p&gt;As explained above, container is an excellent replacement for full-fledged virtual machines for this lab, so I create containers using the Proxmox VE web interface.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/create-ct.png&quot; alt=&quot;Create CT&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;It’s also helpful to make a plan for the container IDs first, since I will heavily utilize &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pct enter&lt;/code&gt; to get into the container. The web console won’t work with some shortcut keys, notably &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;W&lt;/kbd&gt; and &lt;kbd&gt;Ctrl&lt;/kbd&gt;+&lt;kbd&gt;T&lt;/kbd&gt;.&lt;/p&gt;
				&lt;table&gt;
				&lt;thead&gt;
				&lt;tr&gt;
				&lt;th&gt;Container (Name)&lt;/th&gt;
				&lt;th&gt;ID&lt;/th&gt;
				&lt;th&gt;Network&lt;/th&gt;
				&lt;th&gt;IP Address&lt;/th&gt;
				&lt;/tr&gt;
				&lt;/thead&gt;
				&lt;tbody&gt;
				&lt;tr&gt;
				&lt;td&gt;Router&lt;/td&gt;
				&lt;td&gt;980&lt;/td&gt;
				&lt;td&gt;vmbr95&lt;br /&gt;vmbr96&lt;/td&gt;
				&lt;td&gt;10.55.55.55/24&lt;br /&gt;10.66.66.66/24&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Server A&lt;/td&gt;
				&lt;td&gt;981&lt;/td&gt;
				&lt;td&gt;vmbr91&lt;br /&gt;vmbr95&lt;/td&gt;
				&lt;td&gt;192.168.1.1/24&lt;br /&gt;10.55.55.1/24&lt;br /&gt;Gateway 10.55.55.55&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Server B&lt;/td&gt;
				&lt;td&gt;982&lt;/td&gt;
				&lt;td&gt;vmbr92&lt;br /&gt;vmbr96&lt;/td&gt;
				&lt;td&gt;192.168.2.1/24&lt;br /&gt;10.66.66.1/24&lt;br /&gt;Gateway 10.66.66.66&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Client A&lt;/td&gt;
				&lt;td&gt;983&lt;/td&gt;
				&lt;td&gt;vmbr91&lt;/td&gt;
				&lt;td&gt;192.168.1.2&lt;br /&gt;Gateway 192.168.1.1&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Client B&lt;/td&gt;
				&lt;td&gt;984&lt;/td&gt;
				&lt;td&gt;vmbr92&lt;/td&gt;
				&lt;td&gt;192.168.2.2&lt;br /&gt;Gateway 192.168.2.1&lt;/td&gt;
				&lt;/tr&gt;
				&lt;/tbody&gt;
				&lt;/table&gt;
				&lt;p&gt;Also I’m more comfortable with newer software, so I go with the Debian 11 template provided by Proxmox.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/create-ct-template.png&quot; alt=&quot;Select template&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The rest of the settings aren’t of much interest, and the default settings should suffice. On a side note, 2 GB is more than abundant for Root Disk because I need virtually no extra software to work on this lab.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/create-ct-confirm.png&quot; alt=&quot;CT configuration&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Don’t start the container right now, because there’s another network interface to be added. I head to the page to add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;eth6&lt;/code&gt; for the router, connecting to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vmbr96&lt;/code&gt; as illustrated in the graph.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/router-add-network.png&quot; alt=&quot;Add network interface to Router&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;To save some time, I created the remaining containers using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pct&lt;/code&gt; command. The command for creating CT 981 is as follows and the others are similar (omitted for brevity).&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pct create 981 nfs-template:vztmpl/debian-11-standard_11.0-1_amd64.tar.gz &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--rootfs&lt;/span&gt; local-lvm:2 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--hostname&lt;/span&gt; ibug-ServerA &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--net0&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eth1,bridge&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vmbr91,firewall&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0,ip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;192.168.1.1/24 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--net1&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;eth5,bridge&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;vmbr95,firewall&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0,ip&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.55.55.1/24,gw&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;10.55.55.55 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--unprivileged&lt;/span&gt; 1
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now that the containers have been created, it’s time to get some extra software ready for the lab.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/cts.png&quot; alt=&quot;Containers ready&quot; /&gt;&lt;/p&gt;
				&lt;h3 id=&quot;configure-containers&quot;&gt;Configure containers&lt;/h3&gt;
				&lt;p&gt;The lab originally requires capturing traffic with Wireshark on Windows Server, but on Linux it’s more typical to do this with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;, which needs to be installed on the Router. Additionally to make working and debugging easier, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; and a text editor of your choice should also go on &lt;strong&gt;the Router and the two Servers&lt;/strong&gt;. So I install Vim and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; on all three containers mentioned. No extra software is needed for the two Clients.&lt;/p&gt;
				&lt;p&gt;You may find it easier to temporarily change the network setting to allow the container to connect to the APT repository, install the software and then change it back.&lt;/p&gt;
				&lt;p&gt;But for me I’d rather “just do it”, so I connect the Router container to the external network and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install&lt;/code&gt; as needed.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/install-software.png&quot; alt=&quot;Install software on Router&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;And then I configure the router to perform NAT for other containers to reach the outer world, so that I can do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install&lt;/code&gt; directly (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;iptables&lt;/code&gt; lines). It’s also helpful to configure the routing table so the Clients can reach each other easily (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip route&lt;/code&gt; lines).&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/setup-nat.png&quot; alt=&quot;Configure firewall and routing&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;I also need to enable IP forwarding on the Router and both Servers.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/enable-ip-forward.png&quot; alt=&quot;Enable IP forwarding&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;I can now see that Client A can reach Client B correctly. If I do packet capturing on the Router or either Server, I can see plaintext traffic going through.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/tcpdump-plain.png&quot; alt=&quot;tcpdump plain traffic&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;If you can reach here, it means your lab environment is now ready as I do.&lt;/p&gt;
				&lt;h2 id=&quot;ipsec-rules&quot;&gt;IPsec rules&lt;/h2&gt;
				&lt;p&gt;Linux provides native support for IPsec via the XFRM framework, and the (primitive) tool to manage it is the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm&lt;/code&gt; command. The XFRM framework matches packets with &lt;strong&gt;policies&lt;/strong&gt; (as &lt;strong&gt;Security Policies, SP&lt;/strong&gt;) and transforms (hence the name) packets with &lt;strong&gt;states&lt;/strong&gt; (as &lt;strong&gt;Security Associations, SA&lt;/strong&gt;). SP and SA are managed through two subcommands, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm policy&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm state&lt;/code&gt;, and there’s one last subcommand &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm monitor&lt;/code&gt; that may come in handy from time to time.&lt;/p&gt;
				&lt;h3 id=&quot;ip-xfrm-command&quot;&gt;ip-xfrm command&lt;/h3&gt;
				&lt;p&gt;The syntax for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm policy&lt;/code&gt; is as follows. Only &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;delete&lt;/code&gt; are given because we’re not interested in others. The full syntax can always be seen via &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm policy help &lt;/code&gt; and &lt;a href=&quot;https://man7.org/linux/man-pages/man8/ip-xfrm.8.html&quot;&gt;the man page&lt;/a&gt;.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip xfrm policy add SELECTOR &lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;DIR tmpl TMPL &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; tmpl TMPL &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;...
				ip xfrm policy delete SELECTOR &lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;DIR
				ip xfrm policy flush  &lt;span class=&quot;c&quot;&gt;# deletes everything&lt;/span&gt;
				SELECTOR :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; src IP/CIDR &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; dst IP/CIDR &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; dev DEV &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; UPSPEC &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
				DIR :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; | out | fwd
				TMPL :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; src IP &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; dst IP &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; proto PROTO &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; spi SPI &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; mode MODE &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; reqid REQID &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
				MODE :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; transport | tunnel
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The syntax for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm state&lt;/code&gt; is as follows. Similarly, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm state help&lt;/code&gt; gives the full syntax.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip xfrm state add TMPL ALGO &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ALGO &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;...
				ip xfrm state delete TMPL
				ip xfrm state flush  &lt;span class=&quot;c&quot;&gt;# deletes everything&lt;/span&gt;
				ALGO :&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; enc | auth &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; ALGO-NAME ALGO-KEY |
				aead ALGO-NAME ALGO-KEY ALGO-ICV-LEN
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h4 id=&quot;one-important-note&quot;&gt;One important note&lt;/h4&gt;
				&lt;p&gt;Among all the elements there’s one I’d like to specifically note: the direction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir&lt;/code&gt; isn’t quite the same as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INPUT&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;OUTPUT&lt;/code&gt; / &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FORWARD&lt;/code&gt; as in the iptables firewall. Instead it carries the following meaning (&lt;a href=&quot;https://serverfault.com/a/1048382/450575&quot;&gt;source&lt;/a&gt;):&lt;/p&gt;
				&lt;table&gt;
				&lt;thead&gt;
				&lt;tr&gt;
				&lt;th&gt;Security Policy&lt;/th&gt;
				&lt;th&gt;Meaning&lt;/th&gt;
				&lt;/tr&gt;
				&lt;/thead&gt;
				&lt;tbody&gt;
				&lt;tr&gt;
				&lt;td&gt;Output policy (dir out)&lt;/td&gt;
				&lt;td&gt;SP works as a selector on &lt;strong&gt;outgoing packets&lt;/strong&gt; to select which are to be encrypted+encapsulated (analogous to firewall &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;POSTROUTING&lt;/code&gt; chain)&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Input policy (dir in)&lt;/td&gt;
				&lt;td&gt;SP works as a selector on &lt;strong&gt;incoming packets which already have been decrypted+decapsulated&lt;/strong&gt; and have a destination IP local to the system (analogous to firewall &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;INPUT&lt;/code&gt; chain)&lt;/td&gt;
				&lt;/tr&gt;
				&lt;tr&gt;
				&lt;td&gt;Forward policy (dir fwd)&lt;/td&gt;
				&lt;td&gt;SP works as a selector on &lt;strong&gt;incoming packets which already have been decrypted+decapsulated&lt;/strong&gt; and have a destination IP not local to the system (analogous to firewall &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FORWARD&lt;/code&gt; chain)&lt;/td&gt;
				&lt;/tr&gt;
				&lt;/tbody&gt;
				&lt;/table&gt;
				&lt;p&gt;So the direction works like this:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir out&lt;/code&gt; is for encryption policies&lt;/li&gt;
				&lt;li&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir in&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir fwd&lt;/code&gt; is to select and filter encrypted packets&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;The curious may now ask: Where are the decryption policies?&lt;/p&gt;
				&lt;p&gt;The answer is: The Security Associations! (Surprise!)&lt;/p&gt;
				&lt;p&gt;Incoming IPsec packets (ESP, AH etc.) that match a SA will &lt;em&gt;always&lt;/em&gt; be decrypted, regardless of configured SPs (so SA is analogous to the firewall &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;PREROUTING&lt;/code&gt; chain). &lt;strong&gt;However&lt;/strong&gt;, if the decrypted packet (or plain traffic) does not match a valid SP, it’s silently dropped and no further processing in the Linux network stack is done.&lt;/p&gt;
				&lt;p&gt;I got trapped in this part for an hour in my initial experiments because it’s just too intuitive to misunderstand how &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir&lt;/code&gt; works. And that’s why I’m taking a special note on this.&lt;/p&gt;
				&lt;h3 id=&quot;configure-ipsec-rules&quot;&gt;Configure IPsec rules&lt;/h3&gt;
				&lt;p&gt;Because I want to enable the Clients to connect to each other via the Servers, I configure &lt;strong&gt;an output policy and a forwarding policy&lt;/strong&gt; on both Servers (with the opposite directions, of course).&lt;/p&gt;
				&lt;p&gt;I add the Security Associations on Server A with the following commands. Note that it’s often better to generate the keys randomly than using a easily guessable value.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;SPI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x69427567
				&lt;span class=&quot;nv&quot;&gt;AUTHKEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0x0123456789ABCDEF0123456789ABCDEF
				&lt;span class=&quot;nv&quot;&gt;ENCKEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;0xFEDCBA9876543210FEDCBA9876543210
				ip xfrm state add &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				src 10.55.55.1 dst 10.66.66.1 proto esp spi &lt;span class=&quot;nv&quot;&gt;$SPI&lt;/span&gt; mode tunnel &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				auth sha256 &lt;span class=&quot;nv&quot;&gt;$AUTHKEY&lt;/span&gt; enc aes &lt;span class=&quot;nv&quot;&gt;$ENCKEY&lt;/span&gt;
				ip xfrm state add &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				src 10.66.66.1 dst 10.55.55.1 proto esp spi &lt;span class=&quot;nv&quot;&gt;$SPI&lt;/span&gt; mode tunnel &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				auth sha256 &lt;span class=&quot;nv&quot;&gt;$AUTHKEY&lt;/span&gt; enc aes &lt;span class=&quot;nv&quot;&gt;$ENCKEY&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;As the encrypted packets will be transported through the virtual “public Internet”, the source and destination addresses must be those of the public interfaces on the Servers.&lt;/p&gt;
				&lt;p&gt;You can of course use different Security Parameter Indices and keys for both directions, but I choose the same parameters for simplicity.&lt;/p&gt;
				&lt;p&gt;I then add the Security Policies on Server A with the following commands:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip xfrm policy add &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				src 192.168.1.0/24 dst 192.168.2.0/24 &lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;out &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				tmpl src 10.55.55.1 dst 10.66.66.1 proto esp spi &lt;span class=&quot;nv&quot;&gt;$SPI&lt;/span&gt; mode tunnel
				ip xfrm policy add &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				src 192.168.2.0/24 dst 192.168.1.0/24 &lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;fwd &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				tmpl src 10.66.66.1 dst 10.55.55.1 proto esp spi &lt;span class=&quot;nv&quot;&gt;$SPI&lt;/span&gt; mode tunnel
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;I also add the Security Associations on Server B with the same Security Parameter Index, Authentication Key and Encryption Key. The commands are identical to those run on Server A.&lt;/p&gt;
				&lt;p&gt;The Security Policies require minimal changes: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir out&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dir fwd&lt;/code&gt; should be swapped on Server B. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm policy add&lt;/code&gt; commands are otherwise identical.&lt;/p&gt;
				&lt;p&gt;Now I enter Client A to see if Client B is still reachable:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/ping-with-ipsec.png&quot; alt=&quot;Client A still reaches Client B&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;However, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; on the Router shows Encrypted Security Payload instead of any plain traffic:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/tcpdump-esp.png&quot; alt=&quot;tcpdump showing ESP packets&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The packet capturing shows that traffic between Server A and Server B is correctly encrypted with IPsec, so that communication between the two “sites” are now secured (except the key is weak).&lt;/p&gt;
				&lt;h2 id=&quot;inspecting-traffic-with-wireshark&quot;&gt;Inspecting traffic with Wireshark&lt;/h2&gt;
				&lt;p&gt;In fact, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt; supports dumping captured packets to file in Pcap format, which is a universal format also supported by the popular GUI software Wireshark.&lt;/p&gt;
				&lt;p&gt;To start over again with a “clean” IPsec tunnel, I reset the Security Policies and Security Associations with&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip xfrm policy flush
				ip xfrm state flush
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And then I reapply all Policies and Associations with the commands shown in the previous section.&lt;/p&gt;
				&lt;p&gt;I start capturing packets to file with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;tcpdump &lt;span class=&quot;nt&quot;&gt;-ni&lt;/span&gt; eth5 &lt;span class=&quot;nt&quot;&gt;-w&lt;/span&gt; a.pcap ip and not arp
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;I add filter expression to reduce noise (get rid of ARP and IPv6 NDP stuff), and again I send some traffic from Client A to Client B. I capture 10 packets here, which is enough for illustration purposes.&lt;/p&gt;
				&lt;p&gt;I take the Pcap file from the container to my (Windows) computer, and open it with Wireshark:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/wireshark-no-decryption.png&quot; alt=&quot;Pcap file in Wireshark&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The captured packets are correct - they’re encrypted in ESP format.&lt;/p&gt;
				&lt;p&gt;I then head to &lt;strong&gt;Edit → Preferences&lt;/strong&gt;, locate &lt;strong&gt;Protocol » ESP&lt;/strong&gt; on the left, and add the Security Associations used in this experiment. I also tick the “&lt;em&gt;Attempt to detect/decode ecnrypted ESP payloads&lt;/em&gt;” checkbox.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/wireshark-import-esp-sa.png&quot; alt=&quot;Add ESP SA in Wireshark&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now I go back to the main screen, and I can see that Wireshark decrypts the ESP payload using the SAs I just supplied. The inner packet data is revealed to be ICMP packets because I use Ping to perform the reachability test all the way.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/wireshard-decrypted.png&quot; alt=&quot;Wireshark showing decrypted ESP data&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Wireshark also highlights all packets because they are identified to belong to the same “connection” (ICMP session).&lt;/p&gt;
				&lt;p&gt;If you’re wondering, the decrypted payload content (shown in the “Decrypted Data” tab at the bottom) is a complete IPv4 packet, plus ESP metadata like authentication information and a “Next Header” value. The Next Header is the same as the “Protocol” field in an ordinary IPv4 packet. For an IPv4 packet encapsulated, the Next Header value is 4, which is the same value as “IP-in-IP tunnel”. For carried IPv6 traffic, the Next Header value is 41, the value for “IP6-in-IP tunnel” (or Simple Internet Transition, SIT).&lt;/p&gt;
				&lt;h3 id=&quot;easter-egg&quot;&gt;Easter egg&lt;/h3&gt;
				&lt;p&gt;Before loading SAs into Wireshark, I noticed it showing an interesting note for every other packet:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/wireshark-expected-sn.png&quot; alt=&quot;Wireshark suggesting alternative sequence number&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;This is because Wireshark is identifying streams by SPI, which is normally different for every IPsec stream, including both directions between the same pair of tunnel endpoints. When I’m using the same SPI for both directions, Wireshark gets confused and mistakes them for one stream, and suggests incrementing sequence numbers for “repeated” packets.&lt;/p&gt;
				&lt;h2 id=&quot;bonus-ipsec-tunnel-mode-vs-ip-in-ip-tunneling-inside-ipsec-transport-mode&quot;&gt;Bonus: IPsec tunnel mode vs. IP-in-IP tunneling inside IPsec transport mode&lt;/h2&gt;
				&lt;p class=&quot;notice--primary&quot;&gt;Big shoutout to my friend &lt;a href=&quot;https://github.com/RTXUX&quot;&gt;@RTXUX&lt;/a&gt; who originally came up with this idea!&lt;/p&gt;
				&lt;p&gt;Notice how Wireshark shows the “decrypted data” as a complete IP packet, and that the “Next Header” field in the outer ESP packet is 4 (&lt;a href=&quot;https://en.wikipedia.org/wiki/IP_in_IP&quot;&gt;IP-in-IP tunneling protocol&lt;/a&gt;):&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/bonus-wireshark-decrypted-data.png&quot; alt=&quot;Wireshark decrypted payload&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Recalling the differences between IPsec transport mode and tunnel mode as taught in class or covered by &lt;a href=&quot;https://docs.oracle.com/cd/E36784_01/html/E36838/ipsecov-13.html&quot;&gt;Oracle’s documentation&lt;/a&gt;:&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;ul&gt;
				&lt;li&gt;In transport mode, the IP addresses in the outer header are used to determine the IPsec policy that will be applied to the packet.&lt;/li&gt;
				&lt;li&gt;In tunnel mode, two IP headers are sent. The inner IP packet determines the IPsec policy that protects its contents.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;It’s reasonable to wonder if the tunnel mode is equivalent to the transport mode with an identical IP-in-IP tunnel inside. This wouldn’t sound too silly because with an IP-based tunneling protocol like IP-in-IP or GRE, we’re literally wrapping up the inner payload and using the tunneling protocol as a means of transport (at Transport Layer), and the Transport Layer is exactly what’s carried in an IPsec transport mode packet. The only way to find this out is with practice.&lt;/p&gt;
				&lt;p&gt;To test if they’re compatible, continuing from the end state of the course lab, I reset all Security Policies and Security Associations on Server A while leaving Server B intact.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# on Server A&lt;/span&gt;
				ip xfrm policy flush
				ip xfrm state flush
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The test setup would be an IP-in-IP tunnel as it has the same protocol number (4) as the ESP payload, so I create one on Server A first.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip tunnel add ipip0 mode ipip &lt;span class=&quot;nb&quot;&gt;local &lt;/span&gt;10.55.55.1 remote 10.66.66.1 ttl 64
				ip &lt;span class=&quot;nb&quot;&gt;link set &lt;/span&gt;ipip0 up
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;I also need to setup routing, since I don’t have IPsec policies to wrap it up for me. (Note: You can add a network address to this tunnel interface, but it’s not necessary.)&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip route add 192.168.2.0/24 dev ipip0
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Then I wrap it up with the same IPsec policies, except that the mode has been switched to “transport” and there’s no longer a “forward” direction, since the transported packets are IP-in-IP packets with the two servers being the source and the destination:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ip xfrm policy add &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				src 10.55.55.1 dst 10.66.66.1 &lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;out &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				tmpl src 10.55.55.1 dst 10.66.66.1 proto esp spi &lt;span class=&quot;nv&quot;&gt;$SPI&lt;/span&gt; mode transport
				ip xfrm policy add &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				src 10.66.66.1 dst 10.55.55.1 &lt;span class=&quot;nb&quot;&gt;dir &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				tmpl src 10.66.66.1 dst 10.55.55.1 proto esp spi &lt;span class=&quot;nv&quot;&gt;$SPI&lt;/span&gt; mode transport
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The Security Associations need no change as the encrypted packets will have the same source, destination and SPI.&lt;/p&gt;
				&lt;p&gt;With Server B retaining its original setup, I can confirm that Client A can still reach Client B:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/bonus-ping-with-ipsec.png&quot; alt=&quot;Client A still reaches Client B&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;This phenomenon at least proves that IPsec tunnel mode is compatible with IP-in-IP tunnel inside IPsec transport mode.&lt;/p&gt;
				&lt;p&gt;Same as above, I perform packet capturing on the Router and compare the results in Wireshark:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/ipsec/bonus-wireshark-compare.png&quot; alt=&quot;Comparing packet streams in Wireshark&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Seeing how they have identical structures, I can now draw the conclusion that the two modes are fully equivalent, &lt;em&gt;if properly set up&lt;/em&gt;.&lt;/p&gt;
				&lt;h3 id=&quot;caveats&quot;&gt;Caveats&lt;/h3&gt;
				&lt;p&gt;I emphasized &lt;em&gt;properly set up&lt;/em&gt; at the end of the last line above. This is because Linux implements IPsec as a &lt;em&gt;policy-based&lt;/em&gt; VPN (and so does Windows), as opposed to &lt;em&gt;route-based&lt;/em&gt; VPNs (with OpenVPN being a common example). There’s a difference worth noting.&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;
				&lt;p&gt;&lt;strong&gt;Policy-based VPN&lt;/strong&gt; matches and works on &lt;em&gt;outgoing packets&lt;/em&gt;, which may have already gone through multiple levels of routing decisions, and are recaptured before they leave the network processing stack.&lt;/p&gt;
				&lt;p&gt;Wikipedia has an excellent graph showing the packet flow in Linux network stack, and you can see that “xfrm lookup” happens right before the packet processing ends.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;https://upload.wikimedia.org/wikipedia/commons/3/37/Netfilter-packet-flow.svg&quot; alt=&quot;Packet flow in Linux network stack&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Policy-based VPN has the advantage of minimizing the setup job, as it works as a tunnel and handles transport policies on its own, but is sometimes less convenient for being a separate facility from the already-complicated routing policies and NAT rules that a common network gateway may already have. Also, you may want to avoid multiple levels of encryption for both performance reasons and &lt;a href=&quot;https://security.stackexchange.com/a/18104/168307&quot;&gt;security concerns&lt;/a&gt;, which further adds to the complexity of your Security Policies and management efforts.&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;&lt;strong&gt;Route-based VPN&lt;/strong&gt; creates a virtual network interface (usually either TUN or TAP) and applies cryptographic transformations to traffic sent to or received from this interface. It has the advantage of integrating perfectly with existing routing policies, NAT rules, firewall (if the firewall is configured on the tunnel endpoint) and even packet capturing. As route-based VPNs use the same routing policy database (RPDB) as the main network stack, you can even run dynamic routing protocols inside, like OSPF or BGP. In fact, it is a very common modus operandi in &lt;a href=&quot;https://en.wikipedia.org/wiki/Decentralized_network_42&quot;&gt;DN42&lt;/a&gt; to connect with &lt;a href=&quot;https://en.wikipedia.org/wiki/WireGuard&quot;&gt;WireGuard&lt;/a&gt; and run BGP inside.&lt;/p&gt;
				&lt;p&gt;Depending on the software used, it may be even easier to setup a route-based VPN (like OpenVPN), but traffic filtering needs to be done from inside. This is virtually the only disadvantage of route-based VPN.&lt;/p&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;It’s often a matter of choice between these options. There are more route-based VPN implementations (OpenVPN, WireGuard etc.) but enterprise support for policy-based VPN is more mature, so a decision is to be made when it comes to deployment. I personally never used policy-based VPN outside this lab because I often need complex routing policies and NAT rules that policy VPNs are bad at, but YMMV.&lt;/p&gt;
				&lt;h2 id=&quot;troubleshooting&quot;&gt;Troubleshooting&lt;/h2&gt;
				&lt;p&gt;Finally, if you are going to use my article as a hands-on tutorial for setting up a similar lab, some troubleshooting experiences and tips would certainly turn useful.&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Creating &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip xfrm state&lt;/code&gt; results in &lt;em&gt;Protocol not supported&lt;/em&gt;: Check on the Proxmox VE host if &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modprobe xfrm4_tunnel&lt;/code&gt; works correctly. It may fail with &lt;em&gt;Unknown symbol in module&lt;/em&gt; or &lt;em&gt;Invalid argument&lt;/em&gt;. In either case, update the Linux kernel package to the latest and reboot the host.&lt;/li&gt;
				&lt;li&gt;Decrypted packets not found except in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tcpdump&lt;/code&gt;: Check &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/net/xfrm_stat&lt;/code&gt; and see which number is going up. This kernel interface provides statistics for packets dropped by the XFRM framework. Refer to &lt;a href=&quot;https://www.kernel.org/doc/Documentation/networking/xfrm_proc.txt&quot;&gt;the kernel documentation&lt;/a&gt; to see what each number means.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Bonus section:&lt;/strong&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ip tunnel add&lt;/code&gt; showing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add tunnel &quot;tunl0&quot;: failed: No such device&lt;/code&gt;: The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ipip&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tunnel4&lt;/code&gt; modules need to be loaded on the host. A simple &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;modprobe&lt;/code&gt; command should do it&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="networking" /><summary type="html">Linux has a built-in framework for Internet Protocol Security (IPsec), which is often combined with other tunneling technologies (e.g. L2TP and GRE) to create secure cross-site network connections. As an innovative attempt to a lab in this semester’s Network Security course, which was designed to work over multiple Windows Server 2003 virtual machines (VM), I decided to go on my own and proceed with Linux VMs.</summary></entry><entry><title type="html">Disassembling a hardware RAID 1 array in Proxmox VE</title><link href="https://ibug.io/blog/2021/08/proxmox-disassemble-hardware-raid1/" rel="alternate" type="text/html" title="Disassembling a hardware RAID 1 array in Proxmox VE" /><published>2021-08-15T00:00:00+00:00</published><updated>2021-08-16T01:05:26+00:00</updated><id>https://ibug.io/blog/2021/08/proxmox-disassemble-hardware-raid1</id><content type="html" xml:base="https://ibug.io/blog/2021/08/proxmox-disassemble-hardware-raid1/">&lt;p&gt;Yesterday in a server maintenance period, we decided to tune the storage layout of our Proxmox VE server, which included disassembling a RAID 1 array and adjusting the size of the root filesystem.&lt;/p&gt;
				&lt;h2 id=&quot;backup-data&quot;&gt;Backup data&lt;/h2&gt;
				&lt;p class=&quot;notice--danger&quot;&gt;As is always, potentially destructive disk operations should be preceded with a backup of anything necessary for recovery.&lt;/p&gt;
				&lt;p&gt;Proxmox VE uses a kind of “standard” partition layout, with the first 512 MB of the primary disk allocated for the EFI System Partition (ESP), and the rest forming an LVM physical volume (PV), which then becomes a volume group (VG) named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pve&lt;/code&gt;. In the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pve&lt;/code&gt; VG, a fifth of total available space is allocated to the root filesystem for the Proxmox VE system, and the rest goes to a thin pool named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;The initial disk layout on our server is like this:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/initial-fdisk.png&quot; alt=&quot;Initial disk layout&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The system is booted with UEFI, so the first partition can be safely ignored. The second partition is the ESP and contains no critical data, as it can be rebuilt when needed. The only thing left for backup is the rootfs since we haven’t made use of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;data&lt;/code&gt; volume. A good news is that the rootfs only has less then 3.5 GB of content (we have separate storages for the system and our virtual machines), so backing up is as easy as allocating a 4 GB volume on our data storage and copying the whole rootfs over with &lt;a href=&quot;https://www.samba.org/rsync/&quot;&gt;Rsync&lt;/a&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;rsync &lt;span class=&quot;nt&quot;&gt;-aHAXx&lt;/span&gt; / /mnt/backup/
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;In addition, it’s been said in &lt;a href=&quot;https://superuser.com/a/137310/688600&quot;&gt;this Super User answer&lt;/a&gt; that&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;p&gt;Of course, it may be a complete jerk for you and wipe the drives for no good reason, but this is very unlikely.&lt;/p&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;So we might not even need that backup (in fact we didn’t). After all, it’s better safe than sorry, isn’t it?&lt;/p&gt;
				&lt;h2 id=&quot;disassemble-array&quot;&gt;Disassembling the RAID array&lt;/h2&gt;
				&lt;p&gt;The standard procedure for this is to reboot into BIOS setup and change the settings there.&lt;/p&gt;
				&lt;p&gt;I reboot the server, hitting F9 on its POST screen.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/hpe-enter-bios.png&quot; alt=&quot;HPE POST Screen&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Next, I locate the built-in RAID controller. It’s called “HPE Smart Array”. I navigate into the options, locate the RAID-1 array, and select “Delete Array”. It completes just in a flash.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/hpe-bios-array-setting.png&quot; alt=&quot;HPE Array Setting&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;To ensure the changes take effect, I reboot the server again.&lt;/p&gt;
				&lt;h2 id=&quot;restore-partitions&quot;&gt;Restore the partition table&lt;/h2&gt;
				&lt;p&gt;Because the disks may previously contain some RAID information at their start, their content may not be recognized now, so I insert a virtual CD-ROM drive using the “Virtual Media” feature provided by the Baseboard Management Controller (BMC, also known as IPMI). It’s good we have a file server providing these handy resources. As the host system has been updated to &lt;a href=&quot;https://pve.proxmox.com/wiki/Roadmap#Proxmox_VE_7.0&quot;&gt;Proxmox VE 7&lt;/a&gt;, I picked the new Debian Bullseye Live CD instead of Buster. This ensures I can start the server for disk recovery jobs.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/set-virtual-media.png&quot; alt=&quot;Insert ISO from IPMI&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;This time I enter “One-Time Boot Menu” to boot from the CD-ROM. I select “iLO Virtual CD-ROM” and it starts up.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/hpe-bios-boot-from-iso.png&quot; alt=&quot;Select boot item&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;In a few seconds, the Debian boot screen shows up.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/debian-11-livecd.png&quot; alt=&quot;Debian Bullseye GRUB screen&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now I can run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; to check the disk status. As expected, no partitions are found.&lt;/p&gt;
				&lt;p&gt;Given that the “Delete Array” operation completes so quickly, I’m sure it did nothing to data stored on the disk, so I can try recovering the partition table. &lt;a href=&quot;https://linux.die.net/man/1/testdisk&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;testdisk&lt;/code&gt;&lt;/a&gt; is one of the utilities that do this job.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/after-disassembly-fdisk.png&quot; alt=&quot;Disk layout after disassembly&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The terminal interface of testdisk is straightforward. Select the only disk given (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda&lt;/code&gt;, the one you gave it as CLI argument), select the previous partition table type (testdisk tells you if it can find out, which matches that in the first image of this article), and select “Analyze”.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/testdisk-disk-type.png&quot; alt=&quot;Testdisk select disk type&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;If testdisk found a partition table in the previous screen, the analyze step doesn’t need a second - it will just show the discovered partition. If it didn’t find anything, you can still run “Quick Search” and get your partition table back.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/testdisk-analysis.png&quot; alt=&quot;Testdisk partition analysis&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;In my case, I just select “Backup” and proceed to next step. Testdisk is smart enough to discard the first nonsense partition (it’s completely redundant on a UEFI system), and I’m left with two.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/testdisk-overview.png&quot; alt=&quot;Testdisk found partitions&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;There’s no change I need to make at this stage, so I just proceed to the final screen and let testdisk write the partition table.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/testdisk-confirm.png&quot; alt=&quot;Testdisk confirm partitions&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Although testdisk tells me “&lt;em&gt;You will have to reboot for the change to take effect&lt;/em&gt;”, calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partprobe&lt;/code&gt; is all that’s necessary. Now I can confirm with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;fdisk&lt;/code&gt; that the partition table has been restored.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/restored-fdisk.png&quot; alt=&quot;Restored disk layout&quot; /&gt;&lt;/p&gt;
				&lt;p class=&quot;notice--info&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;partprobe&lt;/code&gt; doesn’t come with Debian Bullseye live CD (it did with Debian Buster). To get the command I installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;parted&lt;/code&gt; package.&lt;/p&gt;
				&lt;h2 id=&quot;shrink-rootfs&quot;&gt;Shrinking the root filesystem&lt;/h2&gt;
				&lt;p&gt;It’s a complete waste to give the rootfs a whopping 96 GB when we only use some 3.5 GB, so I go to shrink it down to 16 GB.&lt;/p&gt;
				&lt;p&gt;Before shrinking the volume, it’s necessary to shrink the &lt;em&gt;filesystem&lt;/em&gt; first. Yes, a “partition” and a “filesystem” are two different concepts.&lt;/p&gt;
				&lt;p&gt;The rootfs of Proxmox VE resides in LVM, so the first thing is to get LVM tools up and running. I tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install lvm2&lt;/code&gt;, and was (a bit) surprised to found that it came with Debian Bullseye Live CD.&lt;/p&gt;
				&lt;p&gt;I get back the VG &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pve&lt;/code&gt; by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vgscan&lt;/code&gt;, and make all LVs available for operation by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;vgchange -ay pve&lt;/code&gt;. I can then mount &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/pve/root&lt;/code&gt; somewhere and check the volume usage with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;df -h&lt;/code&gt;. Just around 4 gigs, we’re good.&lt;/p&gt;
				&lt;p&gt;Many years ago I read &lt;a href=&quot;https://matt.berther.io/2015/02/03/how-to-resize-aws-ec2-ebs-volumes/&quot;&gt;this blog by Matt Berther&lt;/a&gt; about shrinking EBS volumes on AWS EC2. The same solution is still applicable here (though years of Linux experience relieved me of the need for the blog as a reference).&lt;/p&gt;
				&lt;p&gt;I unmount the rootfs and run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e2fsck -f /dev/pve/root&lt;/code&gt; to ensure a clean state of the filesystem, followed by &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resize2fs -M -p /dev/pve/root&lt;/code&gt; to perform the shrinking.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/shrink-rootfs.png&quot; alt=&quot;Shrinking rootfs&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;After the filesystem is shrunk, I shrink the logical volume with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;lvresize -L 16G pve/root&lt;/code&gt;. Then I grow the filesystem back to the full size of the volume with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;resize2fs -p /dev/pve/root&lt;/code&gt; (without the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-M&lt;/code&gt; option).&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/grow-rootfs.png&quot; alt=&quot;Restore rootfs&quot; /&gt;&lt;/p&gt;
				&lt;h2 id=&quot;convert-rootfs-to-mirrored&quot;&gt;Restoring rootfs to “RAID” state&lt;/h2&gt;
				&lt;p&gt;The main reason we set up RAID 1 for these disks is to provide resilience against disk failures, so we can still have the system running if either disk dies. Completely breaking up the RAID array defeats this purpose, so it’s helpful to at least add the rootfs back to the mirrored state.&lt;/p&gt;
				&lt;p&gt;Luckily, &lt;a href=&quot;https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/6/html/logical_volume_manager_administration/mirror_create&quot;&gt;LVM provides the ability&lt;/a&gt; to create mirrored volumes. Converting an existing one is even easier:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lvconvert &lt;span class=&quot;nt&quot;&gt;-m1&lt;/span&gt; pve/root
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The command failed for an obvious reason: There’s only one disk in the VG.&lt;/p&gt;
				&lt;p&gt;Recalling that a RAID 1 array has just been broken up, there’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sdb&lt;/code&gt; with an identical partition structure available. I repeat the same steps to recover the partition table on &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sdb&lt;/code&gt;, and wiped &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sdb2&lt;/code&gt; to avoid conflict. I can then add it to the VG as a second PV:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/zero &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/sdb2 &lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1M &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
				pvcreate /dev/sdb2
				vgextend pve /dev/sdb2
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now I can convert the rootfs to “mirrored” volume.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/extend-vg.png&quot; alt=&quot;Extend volume group&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The “data” volume can also be extended to take all remaining space as well:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;lvextend &lt;span class=&quot;nt&quot;&gt;-l&lt;/span&gt; +100%FREE pve/data
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;fix-grub&quot;&gt;Fixing up GRUB&lt;/h2&gt;
				&lt;p&gt;To ensure the system can boot up normally, GRUB should be updated. This needs to be done in chroot inside the original system environment. A bunch of mounts must be setup for GRUB reinstallation to work.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount /dev/pve/root /srv
				&lt;span class=&quot;c&quot;&gt;# systemd-udev requires these two directories to be available&lt;/span&gt;
				mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; rbind /run /srv/run
				mount &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; rbind /tmp /srv/tmp
				&lt;span class=&quot;nb&quot;&gt;chroot&lt;/span&gt; /srv
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; devtmpfs _ /dev
				mount /dev/sda1 /boot/efi
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; proc _ /proc
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; sysfs _ /sys
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now I can replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grub-pc&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grub-efi&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install grub-efi&lt;/code&gt;, and then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grub-install&lt;/code&gt; on both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sda1&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev/sdb1&lt;/code&gt; so that both disks are bootable.&lt;/p&gt;
				&lt;h2 id=&quot;fix-initrd&quot;&gt;Fixing up ramdisk&lt;/h2&gt;
				&lt;div class=&quot;notice--info&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;save-yourself-some-hassle&quot;&gt;&lt;i class=&quot;fas fa-lightbulb&quot;&gt;&lt;/i&gt; Save yourself some hassle&lt;/h4&gt;
				&lt;p&gt;This paragraph tells a trap I encountered. If you’re following this article as a step-by-step guide, you can skip this paragraph and do this instead:&lt;/p&gt;
				&lt;ol&gt;
				&lt;li&gt;Either install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mdadm&lt;/code&gt;, or&lt;/li&gt;
				&lt;li&gt;Edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/initramfs-tools/modules&lt;/code&gt; and append two lines &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dm_raid&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;raid1&lt;/code&gt;.&lt;/li&gt;
				&lt;/ol&gt;
				&lt;p&gt;After picking an action above, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update-initramfs -u -k all&lt;/code&gt; and you can proceed to rebooting from the live CD.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Looking at the checklist, everything should have been taken care of, so I reboot the server. The Proxmox GRUB screen passed as normal. To my surprise, the server is stuck at &lt;em&gt;Loading initial ramdisk&lt;/em&gt;.&lt;/p&gt;
				&lt;p&gt;To display more information for troubleshooting, I reboot the server again, pressing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;e&lt;/code&gt; on the GRUB screen so I can edit the boot item. I remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;quiet&lt;/code&gt; and added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nomodeset&lt;/code&gt; to the kernel command line (see &lt;a href=&quot;https://askubuntu.com/q/716957/612877&quot;&gt;Ask Ubuntu&lt;/a&gt;), and hit Ctrl-X to boot. This does turn up something useful:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/proxmox-raid1/loading-initial-ramdisk-nomodeset.png&quot; alt=&quot;Debug output for Loading initial ramdisk&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Google search for “raid: failed to run raid array” brings me to &lt;a href=&quot;https://askubuntu.com/q/292092/612877&quot;&gt;this Ask Ubuntu question&lt;/a&gt;. Checking the answers and the comments, I reboot again into Debian Live CD, mount the rootfs, install &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mdadm&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update-initramfs&lt;/code&gt; again. The next reboot proved correct, and the Proxmox VE server is back up now.&lt;/p&gt;
				&lt;h2 id=&quot;other-stuff&quot;&gt;Other stuff&lt;/h2&gt;
				&lt;p&gt;At this point, this server maintenance job has been concluded. If you’re stumbling upon this article and find a mistake or have other questions, feel free to leave a comment below.&lt;/p&gt;</content><author><name>iBug</name></author><category term="linux" /><summary type="html">Yesterday in a server maintenance period, we decided to tune the storage layout of our Proxmox VE server, which included disassembling a RAID 1 array and adjusting the size of the root filesystem.</summary></entry><entry><title type="html">I switched from Google Chrome to Microsoft Edge</title><link href="https://ibug.io/blog/2021/06/switch-from-google-chrome-to-microsoft-edge/" rel="alternate" type="text/html" title="I switched from Google Chrome to Microsoft Edge" /><published>2021-06-12T00:00:00+00:00</published><updated>2021-06-12T03:08:23+00:00</updated><id>https://ibug.io/blog/2021/06/switch-from-google-chrome-to-microsoft-edge</id><content type="html" xml:base="https://ibug.io/blog/2021/06/switch-from-google-chrome-to-microsoft-edge/">&lt;p&gt;Last year (maybe September? I don’t remember now) I switched my primary browser from Google Chrome to the new Microsoft Edge. It turned out to be a wise move and I’ve been with Edge for more than half a year now. In this article I’ll share my ideas with this move.&lt;/p&gt;
				&lt;h3 id=&quot;same-chromium-kernel&quot;&gt;Same Chromium kernel&lt;/h3&gt;
				&lt;p&gt;The moment Microsoft Edge went attractive was when I learned that &lt;a href=&quot;https://www.browserstack.com/blog/chromium-based-edge/&quot;&gt;&lt;strong&gt;it started to be based on Chromium&lt;/strong&gt;&lt;/a&gt;, so that web pages will behave identially as if they were on Google Chrome or the Chromium browser. This is particularly important as I often engineer for Chrome when developing front-end applications.&lt;/p&gt;
				&lt;p&gt;Beside that, the seamless availability of existing Chrome extensions is also a great plus. I rely heavily on several extensions to enhance my surfing experience, some of which are:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;a href=&quot;https://microsoftedge.microsoft.com/addons/detail/tampermonkey/iikmkjmpaadaobahmlepeloendndfphd&quot;&gt;Tampermonkey&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://microsoftedge.microsoft.com/addons/detail/ublock-origin/odfafepnkmbhccpbejgmiehpchacaeak&quot;&gt;uBlock Origin&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;Proxy SwitchyOmega&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://microsoftedge.microsoft.com/addons/detail/https-everywhere/fchjpkplmbeeeaaogdbhjbgbknjobohb&quot;&gt;HTTPS Everywhere&lt;/a&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;Needless to say, the old EdgeHTML Edge browser was just disappointing, lacking many common browser features and a buggy rendering engine. I surely take it as a sensible move to replace the old kernel.&lt;/p&gt;
				&lt;h3 id=&quot;windows-integration&quot;&gt;Integration with Windows&lt;/h3&gt;
				&lt;p&gt;As for everything else designed for or ships with Windows, Microsoft Edge integrates excellently into Windows and other Microsoft online products.&lt;/p&gt;
				&lt;p&gt;You can log in to Microsoft Edge with your Microsoft account with just one click, if you have the account set up with your Windows user. Then the syncing launches automatically, and your saved bookmarks, histories, forms etc. are readily available.&lt;/p&gt;
				&lt;p&gt;A logged-in Microsoft Edge browser also eases the login process of most Microsoft products, like Office Online, OneDrive, or whatever web application using Microsoft OAuth login. As long as the browser is authenticated, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;login.microsoftonline.com&lt;/code&gt; page proceeds automatically. This comes in handy when you want to maximize your operation on the web.&lt;/p&gt;
				&lt;p&gt;For sensitive access like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;account.microsoft.com&lt;/code&gt;, Microsoft Edge will prompt you for your PIN (if you have it set up on the computer) or password via the native Windows authentication system, bringing the same level of security of your Windows login to browser Microsoft account access.&lt;/p&gt;
				&lt;h3 id=&quot;data-syncing&quot;&gt;Data syncing&lt;/h3&gt;
				&lt;p&gt;Since I’m already using OneDrive for my document storage and syncing, I feel my data safer with Microsoft, and so does my browser information. Just like Google Chrome, the new Microsoft Edge syncs everything across computers and mobile devices. For the best connected experience, I also fetched Microsoft Edge (Android) from Google Play Store and signed in there. This enabled me to continue where I left off from my computer right on my phone.&lt;/p&gt;
				&lt;p&gt;One extra bonus point for mainland China users: Browser data sync for Microsoft Edge doesn’t require “over-the-wall” internet access. But for power users of Google Chrome (and Google search), I believe this isn’t an issue already.&lt;/p&gt;
				&lt;h3 id=&quot;better-pdf-reader&quot;&gt;Better PDF reader&lt;/h3&gt;
				&lt;p&gt;As with the old EdgeHTML version, the built-in PDF reader of Microsoft Edge outperforms that of all other browsers. Given its good performance and lower power consumption, it’s my PDF reader of choice on a business laptop that focuses on battery-run duration, so that I don’t need Adobe Acrobat for all its fancy features and battery hogging. Microsoft Edge provides all the basic functionalities I need on-the-go, like bookmarks nagivation and pen drawing.&lt;/p&gt;
				&lt;h3 id=&quot;better-performance&quot;&gt;Better performance&lt;/h3&gt;
				&lt;p&gt;Microsoft Edge, as promised, eats around 20% to 30% less memory than Google Chrome under the same load. This may not be a problem for beefy workstations with a lot of memory, but it surely plays a role in common househeld desktops and laptops. At a minimum, even if you don’t need to keep more tabs at the same time, the extra memory allows you to run other applications, or simply gives the computer a breath.&lt;/p&gt;
				&lt;h2 id=&quot;disadvantages&quot;&gt;Disadvantages&lt;/h2&gt;
				&lt;p&gt;Being relatively new as a consumer product, the new Microsoft Edge is still distant from perfection. There are quite a number of bugs or incomplete functionalities to spot.&lt;/p&gt;
				&lt;h3 id=&quot;missing-favicons&quot;&gt;Missing favicons&lt;/h3&gt;
				&lt;p&gt;The first thing it should fix is loading favicons for Favorites website. &lt;strong&gt;It doesn’t, at all.&lt;/strong&gt; With a newly imported Favorites library from another browser, &lt;strong&gt;all favicons are missing&lt;/strong&gt;. On contrary, Google Chrome tries to load as many as possible after importing bookmarks, which is usually done in a few minutes. This makes the initial setup particularly bothersome, as you now have to read every bookmark title to determine its target, when you &lt;em&gt;could have&lt;/em&gt; done so just by skimming through the icons.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/microsoft-edge/missing-favicons.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;I really appreciate these blank icons. Thank you for reminding me of the 90’s nostagia of the web’s simplicity, Microsoft.&lt;/p&gt;
				&lt;h3 id=&quot;new-tab-page-search-locked-to-bing&quot;&gt;“New Tab” page search locked to Bing&lt;/h3&gt;
				&lt;p&gt;This one is obvious: Whatever you enter into the most noticeable input form will be searches &lt;strong&gt;via Bing&lt;/strong&gt;. While in the settings Edge does allow you to choose a search provider for the &lt;em&gt;address bar&lt;/em&gt;, it doesn’t, however, for the New Tab page. Google Chrome, however, does this with more sanity: The search provider for the address bar is also used for the New Tab page, giving you a consistent experience for searching.&lt;/p&gt;
				&lt;p&gt;To be honest, I would’ve stood with it had Chrome also locked the New Tab page search to Google, which is what I’m using extensively. But Bing just never gives the same level of precision with its search results, so locking a search form to Bing gives me the impression that Microsoft is &lt;em&gt;condescending&lt;/em&gt;.&lt;/p&gt;
				&lt;h2 id=&quot;summary&quot;&gt;Summary&lt;/h2&gt;
				&lt;p&gt;So far so good. I’ve stayed with Microsoft Edge since and overall it’s quite satisfactory. There are many other differences that makes my experiences with Edge subtly better than with Chrome, like larger UI buttons and menus. So unless you’re a 100% Google power user, I’d recommend the new Microsoft Edge to you, too.&lt;/p&gt;</content><author><name>iBug</name></author><category term="software" /><category term="web" /><summary type="html">Last year (maybe September? I don’t remember now) I switched my primary browser from Google Chrome to the new Microsoft Edge. It turned out to be a wise move and I’ve been with Edge for more than half a year now. In this article I’ll share my ideas with this move.</summary></entry><entry><title type="html">Tunight talk</title><link href="https://ibug.io/blog/2021/04/tunight-talk/" rel="alternate" type="text/html" title="Tunight talk" /><published>2021-04-17T00:00:00+00:00</published><updated>2021-04-17T21:55:43+00:00</updated><id>https://ibug.io/blog/2021/04/tunight-talk</id><content type="html" xml:base="https://ibug.io/blog/2021/04/tunight-talk/">&lt;p&gt;class: center, middle&lt;/p&gt;
				&lt;h1 id=&quot;tech-talk&quot;&gt;Tech Talk&lt;/h1&gt;
				&lt;p&gt;&lt;a href=&quot;//ibug.io&quot;&gt;iBug&lt;/a&gt;
				&lt;br /&gt;
				&lt;a href=&quot;https://lug.ustc.edu.cn&quot;&gt;LUG @ USTC&lt;/a&gt;
				&lt;br /&gt;
				April 17, 2021&lt;/p&gt;
				&lt;hr /&gt;
				&lt;h2 id=&quot;overview&quot;&gt;Overview&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Intranet of USTCLUG&lt;/li&gt;
				&lt;li&gt;Auto SSL certificate&lt;/li&gt;
				&lt;li&gt;Vlab&lt;/li&gt;
				&lt;li&gt;Miscellaneous&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;h2 id=&quot;intranet-of-ustclug&quot;&gt;Intranet of USTCLUG&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Multiple cloud and on-premises servers in different datacenters&lt;/li&gt;
				&lt;li&gt;Public and internal services
				&lt;ul&gt;
				&lt;li&gt;Public: Mirrors, Auth DNS, Homepage&lt;/li&gt;
				&lt;li&gt;Internal: LDAP, Mail gateway, InfluxDB&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;Layer 2 overlay network
				&lt;ul&gt;
				&lt;li&gt;&lt;a href=&quot;//www.tinc-vpn.org&quot;&gt;Tinc VPN&lt;/a&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;h2 id=&quot;tinc-vpn&quot;&gt;Tinc VPN&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Configured in switch mode&lt;/li&gt;
				&lt;li&gt;Mesh layout&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Bridged within one datacenter (cluster)&lt;/strong&gt;&lt;/li&gt;
				&lt;li&gt;Secured over the Internet&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;iframe src=&quot;https://www.draw.io/?lightbox=1&amp;amp;highlight=0000ff&amp;amp;edit=_blank&amp;amp;layers=1&amp;amp;nav=1&amp;amp;title=LUG%20Network.html#Uhttps%3A%2F%2Fdrive.google.com%2Fa%2F0x01.me%2Fuc%3Fid%3D1WAROAPB8ThTkIjMyFnGvtGgbH-TV4FWh%26export%3Ddownload&quot; frameborder=&quot;0&quot; style=&quot;width: 100%; height: 100%;&quot;&gt;&lt;/iframe&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;automatic-ssl-certificate-issue--renewal&quot;&gt;Automatic SSL certificate issue &amp;amp; renewal&lt;/h2&gt;
				&lt;hr /&gt;
				&lt;hr /&gt;
				&lt;p&gt;Compliance:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Our friend sponsored us a Japan VPS so we resolve most of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ustclug.org&lt;/code&gt; (from outside USTCnet) to it
				&lt;ul&gt;
				&lt;li&gt;We resolve &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ustclug.org&lt;/code&gt; to USTCnet when source is also in USTCnet&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;USTC Mirrors has 4 ISP connections (CERNET, Telecom, Mobile, Unicom) and we want to route users by source&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;Solution: Self-hosted Bind9 server
				&lt;ul&gt;
				&lt;li&gt;Return different answers based on source IP (views)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;ul&gt;
				&lt;li&gt;Solution: Self-hosted Bind9 server
				&lt;ul&gt;
				&lt;li&gt;Return different answers based on source IP (views)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Custom authoritative DNS servers&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Git-based DNS management&lt;/li&gt;
				&lt;li&gt;Integration into existing applications?
				&lt;ul&gt;
				&lt;li&gt;We have no easy-to-use API&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;automatic-ssl-certificate-issue--renewal-1&quot;&gt;Automatic SSL certificate issue &amp;amp; renewal&lt;/h2&gt;
				&lt;p&gt;Use an existing API!&lt;/p&gt;
				&lt;hr /&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# apt list ~npython3-certbot-dns&lt;/span&gt;
				python3-certbot-dns-cloudflare    - Doesn&lt;span class=&quot;s1&quot;&gt;'t support sub-zones
				python3-certbot-dns-digitalocean  - [OK]
				python3-certbot-dns-dnsimple      - Paid
				python3-certbot-dns-gandi         - Doesn'&lt;/span&gt;t support sub-zones
				python3-certbot-dns-gehirn        - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;Couldn&lt;span class=&quot;s1&quot;&gt;'t determine]
				python3-certbot-dns-google        - Doesn'&lt;/span&gt;t support sub-zones
				python3-certbot-dns-linode        - No account, couldn&lt;span class=&quot;s1&quot;&gt;'t determine
				python3-certbot-dns-ovh           - Could not register account
				python3-certbot-dns-rfc2136       - Performance?
				python3-certbot-dns-route53       - Paid
				python3-certbot-dns-sakuracloud   - Could not register account
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;acme.sh&lt;/code&gt;?&lt;/p&gt;
				&lt;hr /&gt;
				&lt;pre&gt;&lt;code class=&quot;language-dns&quot;&gt;_acme-challenge.lug.ustc.edu.cn.     600 IN CNAME  lug.ssl-digitalocean.ustclug.org.
				_acme-challenge.ustclug.org.         600 IN CNAME  lug.ssl-digitalocean.ustclug.org.
				_acme-challenge.proxy.ustclug.org.   600 IN CNAME  lug.ssl-digitalocean.ustclug.org.
				_acme-challenge.mirrors.ustc.edu.cn. 600 IN CNAME  mirrors.ssl-digitalocean.ustclug.org.
				&lt;/code&gt;&lt;/pre&gt;
				&lt;pre&gt;&lt;code class=&quot;language-dns&quot;&gt;ssl-digitalocean.ustclug.org.  86400 IN NS  ns1.digitalocean.com.
				86400 IN NS  ns2.digitalocean.com.
				86400 IN NS  ns3.digitalocean.com.
				&lt;/code&gt;&lt;/pre&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acme.sh &lt;span class=&quot;nt&quot;&gt;--issue&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--dns&lt;/span&gt; dns_dgon &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--domain-alias&lt;/span&gt; lug.ssl-digitalocean.ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; lug.ustc.edu.cn &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.lug.ustc.edu.cn &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.proxy.ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--cert-file&lt;/span&gt; cert/lug/cert.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--key-file&lt;/span&gt; cert/lug/privkey.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--fullchain-file&lt;/span&gt; cert/lug/fullchain.pem
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;acme.sh &lt;span class=&quot;nt&quot;&gt;--issue&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--dns&lt;/span&gt; dns_dgon &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--domain-alias&lt;/span&gt; mirrors.ssl-digitalocean.ustclug.org &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; mirrors.ustc.edu.cn &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\*&lt;/span&gt;.mirrors.ustc.edu.cn &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--cert-file&lt;/span&gt; cert/mirrors/cert.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--key-file&lt;/span&gt; cert/mirrors/privkey.pem &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;--fullchain-file&lt;/span&gt; cert/mirrors/fullchain.pem
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; cert add &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
				git &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; cert &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; user.name&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;GitHub &lt;span class=&quot;nt&quot;&gt;-c&lt;/span&gt; user.email&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;noreply@github.com commit &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Update certificates on &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;date&lt;/span&gt; +%Y-%m-%d&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;git log &lt;span class=&quot;nt&quot;&gt;-1&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--pretty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'tformat:[%h] %an: %s'&lt;/span&gt; HEAD&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				git &lt;span class=&quot;nt&quot;&gt;-C&lt;/span&gt; cert push
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;vlab&quot;&gt;Vlab&lt;/h2&gt;
				&lt;hr /&gt;
				&lt;p&gt;&lt;img src=&quot;https://vlab.ustc.edu.cn/docs/images/home.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: false
				class: center, middle&lt;/p&gt;
				&lt;div&gt;&lt;img src=&quot;https://vlab.ustc.edu.cn/docs/images/vlab-in-browser.jpg&quot; /&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;vlab-1&quot;&gt;Vlab&lt;/h2&gt;
				&lt;hr /&gt;
				&lt;ul&gt;
				&lt;li&gt;Xilinx Vivado
				&lt;ul&gt;
				&lt;li&gt;Multiple GBs of &lt;em&gt;slow&lt;/em&gt; downloading&lt;/li&gt;
				&lt;li&gt;Hard to setup and maintain&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Other software (MATLAB, Wolfram Mathematica etc.)
				&lt;ul&gt;
				&lt;li&gt;Same size &amp;amp; complexity issues&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;
				&lt;s&gt;Another VPS provider&lt;/s&gt;
				&lt;/li&gt;
				&lt;li&gt;LXC containers
				&lt;ul&gt;
				&lt;li&gt;Lightweight&lt;/li&gt;
				&lt;li&gt;Host-manageable&lt;/li&gt;
				&lt;li&gt;System container (&lt;s&gt;application container&lt;/s&gt;)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;ul&gt;
				&lt;li&gt;Sharing &amp;amp; Isolation&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;Storage allocation: LVM
				&lt;ul&gt;
				&lt;li&gt;iSCSI isn’t multi-mount-aware&lt;/li&gt;
				&lt;li&gt;ZFS doesn’t support&lt;/li&gt;
				&lt;li&gt;NFS = SPOF&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;But why does LVM work?&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;strong&gt;“Activated volume”&lt;/strong&gt;
				&lt;ul&gt;
				&lt;li&gt;PVE native support: Only activate volumes in use by VMs/CTs&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;!-- --&gt;
				&lt;ul&gt;
				&lt;li&gt;Network isolation: VXLAN
				&lt;ul&gt;
				&lt;li&gt;&lt;span style=&quot;color: salmon;&quot;&gt;❤&lt;/span&gt; -50&lt;/li&gt;
				&lt;li&gt;Solution: Increase host &lt;span style=&quot;color: salmon;&quot;&gt;❤&lt;/span&gt; to 1550&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;p&gt;User access:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;VNC unified login
				&lt;ul&gt;
				&lt;li&gt;10,000 lines of C++ (by &lt;a href=&quot;//github.com/pdlan&quot;&gt;pdlan&lt;/a&gt;)
				&lt;ul&gt;
				&lt;li&gt;Identify users via VNC login username
				&lt;ul&gt;
				&lt;li&gt;Multi VM selection: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;username:id&lt;/code&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Queries Django for VM information&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Browser login: noVNC&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;–&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;SSH unified login
				&lt;ul&gt;
				&lt;li&gt;Modified from &lt;a href=&quot;//github.com/tg123/sshpiper&quot;&gt;tg123/sshpiper&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;Pubkey-based user identificaion
				&lt;ul&gt;
				&lt;li&gt;Certificate-based VM access&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Browser login: Wetty (alpha)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: false&lt;/p&gt;
				&lt;iframe src=&quot;https://vlab.ustc.edu.cn/grafana/d-solo/2/vlab-usage-statistics?orgId=1&amp;amp;from=1587065070291&amp;amp;to=1618601070291&amp;amp;theme=light&amp;amp;panelId=2&quot; frameborder=&quot;0&quot; style=&quot;width: 100%; height: 100%;&quot;&gt;&lt;/iframe&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: true&lt;/p&gt;
				&lt;h2 id=&quot;miscellaneous&quot;&gt;Miscellaneous&lt;/h2&gt;
				&lt;hr /&gt;
				&lt;ul&gt;
				&lt;li&gt;Protect ports of VM from host (iptables)
				&lt;ul&gt;
				&lt;li&gt;SSH-based “authentication” ✔&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;hr /&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;:INPUT DROP &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:0]
				&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
				:iBug - &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;0:0]
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; conntrack &lt;span class=&quot;nt&quot;&gt;--ctstate&lt;/span&gt; RELATED,ESTABLISHED &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; lo &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; iBug
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; INPUT &lt;span class=&quot;nt&quot;&gt;-g&lt;/span&gt; BLOCK
				&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; iBug &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; icmp &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; iBug &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; multiport &lt;span class=&quot;nt&quot;&gt;--dports&lt;/span&gt; 22,80,443,8888,25565 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; ACCEPT
				&lt;span class=&quot;nt&quot;&gt;-A&lt;/span&gt; iBug &lt;span class=&quot;nt&quot;&gt;-m&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--match-set&lt;/span&gt; home src &lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; tcp &lt;span class=&quot;nt&quot;&gt;--dport&lt;/span&gt; 3389 &lt;span class=&quot;nt&quot;&gt;-j&lt;/span&gt; BLOCK
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/iptables/ipsets&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;create home &lt;span class=&quot;nb&quot;&gt;hash&lt;/span&gt;:ip family inet &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;600
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/rc&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BASH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /bin/bash &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1
				&lt;span class=&quot;k&quot;&gt;fi
				&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_ssh_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;SSH_CONNECTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;%% *&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;_ppid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;ps &lt;span class=&quot;nt&quot;&gt;-o&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ppid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$PPID&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;))&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;nohup&lt;/span&gt; /home/ubuntu/.local/bin/_ssh_refresh_client &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ssh_client&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ppid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &amp;amp;&amp;gt;/dev/null &amp;amp; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_ssh_refresh_client&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$BASH&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exec&lt;/span&gt; /bin/bash &lt;span class=&quot;nt&quot;&gt;--&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$0&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;fi
				&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;_ssh_client&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;_ppid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;while &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;kill&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-0&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ppid&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; 2&amp;gt;/dev/null&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;ipset &lt;span class=&quot;nt&quot;&gt;-exist&lt;/span&gt; add home &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$_ssh_client&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;timeout &lt;/span&gt;300
				&lt;span class=&quot;nb&quot;&gt;sleep &lt;/span&gt;60
				&lt;span class=&quot;k&quot;&gt;done
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;0
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;hr /&gt;
				&lt;p&gt;layout: false&lt;/p&gt;
				&lt;h2 id=&quot;your-notification-center&quot;&gt;&lt;em&gt;Your&lt;/em&gt; notification center&lt;/h2&gt;
				&lt;p&gt;&lt;a href=&quot;https://github.com/iBug/rss-to-telegram&quot;&gt;iBug/rss-to-telegram&lt;/a&gt;&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/rss-to-telegram.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
				&lt;hr /&gt;
				&lt;h2 id=&quot;cloudflare-worker-makes-free-file-sharing-site&quot;&gt;Cloudflare Worker makes free file sharing site&lt;/h2&gt;
				&lt;p&gt;&lt;a href=&quot;https://github.com/iBug/cf-github-releases&quot;&gt;iBug/cf-github-releases&lt;/a&gt;&lt;/p&gt;
				&lt;p&gt;&lt;a href=&quot;https://download.ibugone.com&quot;&gt;My demo site&lt;/a&gt; (&lt;a href=&quot;https://github.com/iBug/Archive/releases&quot;&gt;Repository&lt;/a&gt;)&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/cloudflare/cf-github-releases.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
				&lt;hr /&gt;
				&lt;p&gt;class: center, middle
				layout: false&lt;/p&gt;
				&lt;h1 id=&quot;thank-you&quot;&gt;Thank you!&lt;/h1&gt;</content><author><name>iBug</name></author><summary type="html">class: center, middle</summary></entry><entry><title type="html">Setting up a GitHub webhook on AWS Lambda</title><link href="https://ibug.io/blog/2021/02/github-webhook-on-aws-lambda/" rel="alternate" type="text/html" title="Setting up a GitHub webhook on AWS Lambda" /><published>2021-02-19T00:00:00+00:00</published><updated>2021-02-27T03:04:22+00:00</updated><id>https://ibug.io/blog/2021/02/github-webhook-on-aws-lambda</id><content type="html" xml:base="https://ibug.io/blog/2021/02/github-webhook-on-aws-lambda/">&lt;p&gt;Last month I set up my own Telegram bot for GitHub event notification. To receive GitHub events via webhook, a receiver is needed. True, it isn’t hard to write a &lt;a href=&quot;https://palletsprojects.com/p/flask/&quot;&gt;Flask&lt;/a&gt; or &lt;a href=&quot;http://sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; server and throw the whole thing onto a VPS, but thinking about the complexity and maintenance efforts, serverless platforms like AWS Lambda smells like a better fit. So I decided to take this opportunity to begin my exploration to “the serverless industry”.&lt;/p&gt;
				&lt;p&gt;&lt;small&gt;&lt;a href=&quot;/p/41-cn&quot;&gt;There’s a Chinese version of this article / 本文还有中文版&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
				&lt;h2 id=&quot;aws-lambda&quot;&gt;Setting up AWS Lambda&lt;/h2&gt;
				&lt;p&gt;I have had an AWS account for years, so I’ll skip the sign-up process in this article and head straight to &lt;a href=&quot;https://console.aws.amazon.com/&quot;&gt;AWS Management Console&lt;/a&gt;.&lt;/p&gt;
				&lt;p&gt;Locate the &lt;a href=&quot;https://console.aws.amazon.com/lambda/home&quot;&gt;&lt;strong&gt;Lambda&lt;/strong&gt;&lt;/a&gt; entry in the list of AWS services. It’s in the first group so should be easy to spot.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/console-home-1.png&quot; alt=&quot;AWS Management Console Home&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;And then we create a new Lambda function, selecting Python 3.8 as the runtime environment&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/lambda-create-function-1.png&quot; alt=&quot;Create new Lambda function&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;After clicking “Create”, you’ll be brought to the edit page of that function, with the following code filled in as a starting point.&lt;/p&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;json&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;# TODO implement
				&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hello from Lambda!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We don’t know what this code can do for now, so let’s put it aside and turn to the API Gateway part, since eventually we’ll use it as the webhook receiver endpoint.&lt;/p&gt;
				&lt;h2 id=&quot;api-gateway&quot;&gt;Setting up AWS API Gateway&lt;/h2&gt;
				&lt;p&gt;Open the &lt;a href=&quot;https://console.aws.amazon.com/apigateway/main&quot;&gt;AWS API Gateway console&lt;/a&gt; and click &lt;strong&gt;Create API&lt;/strong&gt; on the top right.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-new-1.png&quot; alt=&quot;Create API&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;On the next screen, we add our Lambda function created earlier as an integration here.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-new-2.png&quot; alt=&quot;Configure integrations&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Then it turns to Routes. Routes describe how HTTP endpoints are mapped to integrations (receivers). An example (default) route is pre-filled in the dialog.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-routes-1.png&quot; alt=&quot;Configure routes (1)&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Since we have our Lambda function as the only integration here, we want to process actual routes by ourselves. Delete that path &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/myGitHubWebhook&lt;/code&gt; and enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$default&lt;/code&gt; into that box. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$default&lt;/code&gt; is a special value that once entered, the “method” dropdown greys out.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-routes-2.png&quot; alt=&quot;Configure routes (2)&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;We can now visit our API to see if it works.&lt;/p&gt;
				&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;ubuntu@iBug-Server:~ $&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;curl https://nad73szpz7.execute-api.us-east-1.amazonaws.com/
				&lt;span class=&quot;go&quot;&gt;&quot;Hello from Lambda!&quot;
				&lt;/span&gt;&lt;span class=&quot;gp&quot;&gt;ubuntu@iBug-Server:~ $&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;lambda-code&quot;&gt;Coding for Lambda&lt;/h2&gt;
				&lt;p&gt;With the infrastructure set up, we should now write our code for the GitHub webhook receiver.&lt;/p&gt;
				&lt;p&gt;We need to first know how the client request is passed to our Lambda function. This is not hard to figure out with some simple code that just spits out what it receives. To save some time, I’ve done this so you don’t have to. Here’s what you’d receive via the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; object passed to the Lambda function entry. Keep in mind that it’s a dictionary in Python.&lt;/p&gt;
				&lt;details&gt;
				&lt;summary&gt;
				&lt;p&gt;Example content of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;event&lt;/code&gt; object&lt;/p&gt;
				&lt;/summary&gt;
				&lt;div class=&quot;language-json highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;version&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;routeKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rawPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/api-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;rawQueryString&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;taoky=strong&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;headers&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accept&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;*/*&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accept-encoding&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;gzip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cdn-loop&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;cloudflare&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-connecting-ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:db8::1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-ipcountry&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;XX&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-pseudo-ipv4&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;255.255.255.255&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-ray&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;8b8cca72b23e09a5-NRT&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-request-id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;d2160d7f1100000738c5e62000000001&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;cf-visitor&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;{&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;scheme&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;content-length&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;host&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;user-agent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;curl/7.68.0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-amzn-trace-id&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Root=1-8dab11ae-d63d4eec890259ddab5a7709&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-forwarded-for&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2001:db8::1, 162.158.118.243&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-forwarded-port&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;443&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-forwarded-proto&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;x-custom-header&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;queryStringParameters&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;taoky&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;strong&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;requestContext&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;accountId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;166333366666&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;apiId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;nad73szpz7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;domainName&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api.example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;domainPrefix&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;api&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;http&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;method&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;POST&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;path&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/api-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;protocol&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;HTTP/1.1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;sourceIp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; 162.158.118.243&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;userAgent&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;curl/7.68.0&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;requestId&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;ZcOQCw-WICLEQdg=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;routeKey&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;stage&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;$default&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;time&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;20/Jan/2021:16:40:00 +0000&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;timeEpoch&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1611160800000&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;body&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Cg==&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;&quot;isBase64Encoded&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;/details&gt;
				&lt;p&gt;A few notes about the content:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;isBase64Encoded&lt;/code&gt; refers to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; item. In the above example, the actual POST content is a single newline.-&lt;/li&gt;
				&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;body&lt;/code&gt; may be absent for requests that doesn’t send data, like a GET request.&lt;/li&gt;
				&lt;li&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;headers&lt;/code&gt; are all in lowercase which is in line with HTTP/2 specifications. &lt;strong&gt;It could be due to me placing my custom domain behind Cloudflare.&lt;/strong&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;With that in mind, we can expand the boilerplate Lambda function:&lt;/p&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lambda_handler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;context&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;rawPath&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/api-test&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'headers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Content-Type'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'application/json'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dumps&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/github-webhook&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;# TODO Write webhook receiver code
				&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;pass&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The actual webhook processing code shouldn’t be too difficult to write. For example, here’s an example of verifying GitHub via the HMAC signature:&lt;/p&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;base64&lt;/span&gt;
				&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hashlib&lt;/span&gt;
				&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;hmac&lt;/span&gt;
				&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;os&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environ&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'MY_ENV_VAR'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'headers'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x-hub-signature'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'isBase64Encoded'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base64&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b64decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;hashsum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hmac&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;secret&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashlib&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sha1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hexdigest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hashsum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;signature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;401&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Bad signature&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;# Do whatever you want
				&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'statusCode'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;'body'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;OK&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;lambda-environment-variables&quot;&gt;Adding environment variables&lt;/h3&gt;
				&lt;p&gt;As shown in the example above, I put the webhook secret in an environment variable. We need to add it to our Lambda function before it could be used.&lt;/p&gt;
				&lt;p&gt;Doing so is straightforward. Head to Lambda console and select the function, then scroll down to &lt;em&gt;Environment variables&lt;/em&gt; section, where you can manage variables for this Lambda function.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/lambda-environment-variables-1.png&quot; alt=&quot;Lambda - Environment variables&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;h2 id=&quot;customization&quot;&gt;Customizing the webhook&lt;/h2&gt;
				&lt;p&gt;Now we’ve got all the foundation established, we can do whatever we want with it. Here are some ideas that could try with:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Connect to Slack and send a notification for every push or CI run result (&lt;a href=&quot;https://docs.github.com/en/developers/webhooks-and-events/webhook-events-and-payloads#check_run&quot;&gt;the event is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;check_run&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt;
				&lt;li&gt;Connect to a Telegram bot and send a message to you for your subscribed events&lt;/li&gt;
				&lt;li&gt;Start a Netlify or Vercel build or deployment&lt;/li&gt;
				&lt;li&gt;Start GitHub Actions on another repository&lt;/li&gt;
				&lt;li&gt;and many more possibilities…&lt;/li&gt;
				&lt;/ul&gt;
				&lt;h2 id=&quot;custom-domain&quot;&gt;Bonus: Adding a custom domain&lt;/h2&gt;
				&lt;p&gt;Before calling this an article, there’s one more thing I’d like to cover. A custom domain is handy so that you’re in full control of your API, and fortunately AWS API Gateway &lt;em&gt;does&lt;/em&gt; support this.&lt;/p&gt;
				&lt;p&gt;You may have already noticed the &lt;em&gt;Custom Domain Names&lt;/em&gt; on the left pane of API Gateway console, so it’s time to pay that a visit.&lt;/p&gt;
				&lt;p&gt;The box on the left with a title &lt;em&gt;Domain names&lt;/em&gt; is where we need to start from. Click the big &lt;strong&gt;Create&lt;/strong&gt; button and enter your custom domain dedicated for AWS API Gateway, like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api.example.com&lt;/code&gt;, and click the bridge red button on the bottom right to save the settings. You don’t have to change any other things there as the defaults just work.&lt;/p&gt;
				&lt;p&gt;Now you should see this screen:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-custom-domain-1.png&quot; alt=&quot;API Gateway - Custom domain&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Head to your DNS provider and add a CNAME record for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;api.example.com&lt;/code&gt; pointing to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;execute-api&lt;/code&gt; domain shown there. If you’re using Cloudflare, you can safely turn on the CDN setting (the orange cloud icon) to enjoy Cloudflare’s faster global network.&lt;/p&gt;
				&lt;p&gt;Next we’ll add “API mapping” for our custom domain. Select the &lt;em&gt;API mapping&lt;/em&gt; tab in the center of the above image and click &lt;strong&gt;Configure API mappings&lt;/strong&gt; on the right. Add a new mapping, select your API and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;$default&lt;/code&gt; stage, and give it a subpath if you want, like shown below:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/aws/api-gateway-custom-domain-2.png&quot; alt=&quot;API Gateway - Custom domain - API mapping&quot; class=&quot;border&quot; /&gt;&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;dont-worry-about-your-subpath&quot;&gt;&lt;i class=&quot;fas fa-fw fa-sun&quot;&gt;&lt;/i&gt; Don’t worry about your subpath&lt;/h4&gt;
				&lt;p&gt;API Gateway will automatically strip the path before passing it to the Lambda function. This means if you set the path to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/hello&lt;/code&gt; and visit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.example.com/hello/world&lt;/code&gt;, your Lambda function will still see the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rawPath&lt;/code&gt; key being &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/world&lt;/code&gt;. You don’t have to change your code to adapt this part. Very convenient, isn’t it?&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Now our GitHub webhook receiver will start with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.example.com/github&lt;/code&gt;, and our “API test” endpoint will be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;https://api.example.com/github/api-test&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;You may need to configure AWS Certificate Manager to obtain a valid SSL certificate for use on AWS, so that your API is accessible through HTTPS, depending on your domain settings. With Cloudflare this is unnecessary and you can safely ignore it.&lt;/p&gt;
				&lt;h2 id=&quot;others&quot;&gt;Other notes&lt;/h2&gt;
				&lt;p&gt;AWS Lambda provides 400,000 GB-seconds of execution for free each month, and this Free Tier does not expire. However, AWS API Gateway doesn’t have a perpetual Free Tier offer, and their standard pricing is US$1 per 1M API calls. The cost on this part is generally low unless you’re making a public service (that becomes popular).&lt;/p&gt;
				&lt;p&gt;Besides, AWS provides 1 GB of free outbound traffic each month, and bills you at US$0.09 per GB thereafter. This means you’ll need to be careful when generating a lot of traffic, like frequently uploading large images.&lt;/p&gt;
				&lt;p&gt;All pricing examples are based on US East 1 (N. Virginia) region. Other regions are generally more expensive than this, so watch your bills if you make something big.&lt;/p&gt;</content><author><name>iBug</name></author><category term="github" /><category term="aws" /><summary type="html">Last month I set up my own Telegram bot for GitHub event notification. To receive GitHub events via webhook, a receiver is needed. True, it isn’t hard to write a Flask or Sinatra server and throw the whole thing onto a VPS, but thinking about the complexity and maintenance efforts, serverless platforms like AWS Lambda smells like a better fit. So I decided to take this opportunity to begin my exploration to “the serverless industry”.</summary></entry><entry><title type="html">Fix traceroute not showing intermediate results in a virtual machine on Windows</title><link href="https://ibug.io/blog/2021/02/traceroute-from-vmware/" rel="alternate" type="text/html" title="Fix traceroute not showing intermediate results in a virtual machine on Windows" /><published>2021-02-04T00:00:00+00:00</published><updated>2021-02-10T19:09:18+00:00</updated><id>https://ibug.io/blog/2021/02/traceroute-from-vmware</id><content type="html" xml:base="https://ibug.io/blog/2021/02/traceroute-from-vmware/">&lt;p&gt;Today when I was running some networking diagnostics from an Ubuntu inside VMware Workstation, I noticed this strange result from &lt;a href=&quot;https://en.wikipedia.org/wiki/MTR_(software)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mtr&lt;/code&gt; (My Traceroute)&lt;/a&gt;:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/traceroute-failure.png&quot; alt=&quot;MTR with all intermediate hops blank&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;This doesn’t look right. Googling around brought me to this page: &lt;a href=&quot;https://communities.vmware.com/t5/VMware-Workstation-Player/traceroute-from-Ubuntu-just-shows-first-and-last-hops-on/m-p/1677263&quot;&gt;traceroute from Ubuntu just shows first and last hops on VMPlayer 3.1.4 - VMware Technology Network VMTN&lt;/a&gt;&lt;/p&gt;
				&lt;p&gt;The answers in that thread mentioned two points:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;em&gt;On the other hand once I switched to bridge, everything works.&lt;/em&gt;&lt;/li&gt;
				&lt;li&gt;&lt;em&gt;What about the intermediary requests, well the answers come back but somehow they are blocked by the Windows firewall.&lt;/em&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;I immediately realized that it’s because &lt;strong&gt;Windows Firewall blocked responses from the intermediate hops&lt;/strong&gt;.&lt;/p&gt;
				&lt;h2 id=&quot;the-answer&quot;&gt;The answer&lt;/h2&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;the-short-answer&quot;&gt;&lt;i class=&quot;fas fa-shield-check&quot;&gt;&lt;/i&gt; The short answer&lt;/h4&gt;
				&lt;p&gt;The responses from the intermediate routers aren’t “expected” and are blocked off by Windows Firewall.&lt;/p&gt;
				&lt;/div&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;the-long-answer&quot;&gt;The long answer&lt;/h4&gt;
				&lt;p&gt;Windows Firewall has a built-in connection tracking mechanism, similar to that of Linux (conntrack). Since &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mtr&lt;/code&gt; sends &lt;a href=&quot;https://en.wikipedia.org/wiki/Ping_(networking_utility)#Echo_request&quot;&gt;pings (ICMP Echo Requests)&lt;/a&gt; to the target host, Windows Firewall is expecting ICMP Echo Replies from the target host as the correct response. However, traceroute works by sending packets with TTL starting from 1 until it reaches the target host, and receiving “timed out” notices from the intermediate routers when the packet “dies from time”. This creates two discrepancies:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;The responses are ICMP Time Exceeded packets, not Echo Replies.&lt;/li&gt;
				&lt;li&gt;The responses come from the intermediate routers, not the target host.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;This unfortunately somehow “broke” the connection tracking mechanism in Windows Firewall, and leads to the responses being blocked off by Windows Firewall by default.&lt;/p&gt;
				&lt;h2 id=&quot;the-solution&quot;&gt;The solution&lt;/h2&gt;
				&lt;div class=&quot;notice--warning&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;the-short-solution&quot;&gt;&lt;i class=&quot;fas fa-shield-check&quot;&gt;&lt;/i&gt; The short solution&lt;/h4&gt;
				&lt;p&gt;Just turn off Windows Firewall entirely. &lt;strong&gt;You probably don’t want to or shouldn’t do this.&lt;/strong&gt; Read on for the complete and real solution.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;The correct solution to this problem is to let the intermediary responses through Windows Firewall. To actually do this, we’ll &lt;strong&gt;create a new firewall rule that allows ICMP Time Exceeded packets to come in&lt;/strong&gt;. You can stop here now if you know how to configure Windows Firewall.&lt;/p&gt;
				&lt;p&gt;Step-by-step solution:&lt;/p&gt;
				&lt;ol&gt;
				&lt;li&gt;Open &lt;strong&gt;Windows Defender Firewall with Advanced Security&lt;/strong&gt; (at least it’s called as such on my Windows 10). This can be done in two ways:
				&lt;ul&gt;
				&lt;li&gt;Go to &lt;strong&gt;Start&lt;/strong&gt; → &lt;strong&gt;Windows Administrative Tools&lt;/strong&gt; → &lt;strong&gt;Windows Defender Firewall with Advanced Security&lt;/strong&gt;&lt;/li&gt;
				&lt;li&gt;Or hit &lt;strong&gt;&lt;kbd&gt;&lt;i class=&quot;fab fa-fw fa-windows&quot;&gt;&lt;/i&gt;Win&lt;/kbd&gt;+&lt;kbd&gt;R&lt;/kbd&gt;&lt;/strong&gt;, enter &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;WF.msc&lt;/code&gt; and hit Enter.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Select &lt;strong&gt;Inbound Rules&lt;/strong&gt; on the left and then &lt;strong&gt;New Rule…&lt;/strong&gt; on the right.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;https://i.stack.imgur.com/m1suMs.png&quot; alt=&quot;Screenshot&quot; /&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;Follow the prompt to create a new rule. Select the following options for each step. Note that the desired options are selected by default in some steps so you can simply click &lt;strong&gt;Next&lt;/strong&gt;.&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Rule Type: &lt;strong&gt;Custom&lt;/strong&gt;&lt;/li&gt;
				&lt;li&gt;Program: &lt;strong&gt;All programs&lt;/strong&gt; (just click Next)&lt;/li&gt;
				&lt;li&gt;Protocol and Ports:
				&lt;ul&gt;
				&lt;li&gt;Protocol type: &lt;strong&gt;ICMPv4&lt;/strong&gt;&lt;/li&gt;
				&lt;li&gt;&lt;em&gt;(Optional)&lt;/em&gt; Internet Control Message Protocol (ICMP) settings: Click &lt;strong&gt;Customize&lt;/strong&gt; → Select &lt;strong&gt;Specific ICMP types&lt;/strong&gt; and tick &lt;strong&gt;Time Exceeded&lt;/strong&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Scope: &lt;strong&gt;Any IP address&lt;/strong&gt; for both (just click Next)&lt;/li&gt;
				&lt;li&gt;Action: &lt;strong&gt;Allow&lt;/strong&gt; (just click Next)&lt;/li&gt;
				&lt;li&gt;Profile: Select all (just click Next)&lt;/li&gt;
				&lt;li&gt;Name: &lt;strong&gt;Core Networking - Time Exceeded (ICMPv4-In)&lt;/strong&gt; (apparently just any name you prefer)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;Click &lt;strong&gt;Finish&lt;/strong&gt; and you should immediately see intermediate hops if you’re using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mtr&lt;/code&gt;. For example:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/linux/traceroute-ok.png&quot; alt=&quot;MTR correctly functioning&quot; /&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;&lt;em&gt;(Optional)&lt;/em&gt; Repeat the above steps but select &lt;strong&gt;ICMPv6&lt;/strong&gt; for &lt;em&gt;Protocol type&lt;/em&gt; if you want to enable IPv6 traceroute. Don’t forget to give it a different name (e.g. &lt;em&gt;(ICMPv6-In)&lt;/em&gt; at the end).&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;In my case there’s already a built-in rule named &lt;strong&gt;Core Networking - Time Exceeded (ICMPv6-In)&lt;/strong&gt; which is even enabled by default. If you find it there, you can simply enable it.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ol&gt;
				&lt;h3 id=&quot;bonus&quot;&gt;Bonus&lt;/h3&gt;
				&lt;p&gt;If you want to make your rule &lt;em&gt;more solid&lt;/em&gt; and &lt;em&gt;look&lt;/em&gt; “canonical”, you can add it to the built-in system group &lt;strong&gt;Core Networking&lt;/strong&gt; with the help of PowerShell.&lt;/p&gt;
				&lt;div class=&quot;language-powershell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Get-NetFirewallRule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-DisplayName&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Core Networking - Time Exceeded (ICMPv4-In)&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Group&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Core Networking&quot;&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$rule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set-NetFirewallRule&lt;/span&gt;&lt;span class=&quot;w&quot;&gt;
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Your new rule will look like this after running the above commands. You may need to restart the Windows Firewall window to see changes.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/windows/core-networking-time-exceeded-icmpv4-in.png&quot; alt=&quot;New Rule&quot; /&gt;&lt;/p&gt;
				&lt;hr /&gt;
				&lt;p&gt;This article was originally written as &lt;a href=&quot;https://superuser.com/a/1623001/688600&quot;&gt;an answer on Super User&lt;/a&gt;.&lt;/p&gt;</content><author><name>iBug</name></author><category term="networking" /><category term="windows" /><summary type="html">Today when I was running some networking diagnostics from an Ubuntu inside VMware Workstation, I noticed this strange result from mtr (My Traceroute):</summary></entry><entry><title type="html">A Deep Dive into Containers</title><link href="https://ibug.io/blog/2021/01/linux-container-explained/" rel="alternate" type="text/html" title="A Deep Dive into Containers" /><published>2021-01-31T00:00:00+00:00</published><updated>2021-02-05T15:47:37+00:00</updated><id>https://ibug.io/blog/2021/01/linux-container-explained</id><content type="html" xml:base="https://ibug.io/blog/2021/01/linux-container-explained/">&lt;p&gt;Since years ago, containers have been a hot topic everywhere. There are many container softwares like &lt;a href=&quot;https://www.docker.com/&quot;&gt;Docker&lt;/a&gt;, &lt;a href=&quot;https://linuxcontainers.org/&quot;&gt;Linux Containers&lt;/a&gt; and &lt;a href=&quot;https://sylabs.io/singularity/&quot;&gt;Singularity&lt;/a&gt;. It’s hard to say one &lt;em&gt;understand&lt;/em&gt; what containers are without diving into all the gory details of them, so I decided to go on this exploration myself.&lt;/p&gt;
				&lt;p&gt;The actual motivation was (quite) a bit different, though, as I was a TA of &lt;em&gt;Operating Systems (H)&lt;/em&gt; in Spring 2020, and I wanted to bring a wave of innovation into the course labs, so I worked this out very early.&lt;/p&gt;
				&lt;p&gt;The contents in this article are listed in the Table of Contents &lt;span class=&quot;wide-only&quot;&gt;on the right&lt;/span&gt;&lt;span class=&quot;nonwide-only&quot;&gt;at the top of this page&lt;/span&gt;. My implementation in my GitHub repository and the original lab documents (which is also written primarily by me, in Chinese) are linked right above.&lt;/p&gt;
				&lt;p&gt;My test environment is Ubuntu 18.04 LTS (Kernel 5.3, HWE 18.04). In case of any difference, you can consult Google for details.&lt;/p&gt;
				&lt;p&gt;If you want to find out the exact system calls involved in a command-line tool, &lt;a href=&quot;https://strace.io/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strace&lt;/code&gt;&lt;/a&gt; is your friend.&lt;/p&gt;
				&lt;div class=&quot;notice--warning&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;code-samples-have-a-different-license-than-this-article&quot;&gt;&lt;i class=&quot;fas fa-exclamation-triangle&quot;&gt;&lt;/i&gt; Code samples have a different license than this article&lt;/h4&gt;
				&lt;p&gt;While this article is licensed under the CC BY-SA 4.0 license, code samples and snippets are taken from the GitHub repository, which is licensed under &lt;a href=&quot;https://github.com/iBug/iSpawn/blob/master/LICENSE&quot;&gt;the GPL-3.0 license&lt;/a&gt;.&lt;/p&gt;
				&lt;/div&gt;
				&lt;h2 id=&quot;experimenting&quot;&gt;Experimenting with isolation&lt;/h2&gt;
				&lt;p&gt;Before we jump straight to writing code, let’s warm ourselves up by playing with an existing, minimal container implementation, to get a better idea of our target.&lt;/p&gt;
				&lt;h3 id=&quot;rootfs&quot;&gt;Preparing the root filesystem&lt;/h3&gt;
				&lt;p&gt;To keep things simple, we’re going to use the system images from the LXC project. Grab the latest Ubuntu image from &lt;a href=&quot;https://images.linuxcontainers.org/images/ubuntu/&quot;&gt;https://images.linuxcontainers.org/images/ubuntu/&lt;/a&gt;, unzip it to somewhere convenient for you, and this part is &lt;em&gt;almost&lt;/em&gt; done.&lt;/p&gt;
				&lt;p&gt;If you’re on a “modern” distro like latest Ubuntu, Debian or Fedora, you need to populate the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/machine-id&lt;/code&gt; file in the container image with a valid “machine ID”, because systemd needs it. A simple way to do this is&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-machine-id-setup &lt;span class=&quot;nt&quot;&gt;--root&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/path/to/your/rootfs
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If you’re running systemd 240 or later, there’s a better neat tool for this job:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;systemd-id128 new &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /path/to/your/rootfs/etc/machine-id
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;chroot&quot;&gt;Playing with chroot&lt;/h3&gt;
				&lt;p&gt;&lt;a href=&quot;https://wiki.debian.org/chroot&quot;&gt;chroot&lt;/a&gt; is an old way to limit the directory tree a process (and its subprocesses) can see to a specific subtree. Under normal circumstances, processes cannot see anything outsite the chroot’d directory. This is called a &lt;em&gt;chroot jail&lt;/em&gt;. Understanding the concepts of chroot is an important first step to understanding containers, though a typical container does &lt;em&gt;not&lt;/em&gt; use chroot (more on this below).&lt;/p&gt;
				&lt;p&gt;Using chroot is very easy:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;chroot&lt;/span&gt; /path/to/your/rootfs
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You now get a shell inside the &lt;em&gt;chroot jail&lt;/em&gt;. You can perform file-based operation like running “regular” commands and editing system files. All changes are saved in this “container rootfs”. You can even try &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt update&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;apt install vim&lt;/code&gt; and see if it works.&lt;/p&gt;
				&lt;p&gt;As you’re probably aware, chroot is just too simple and sometimes naive to be secure. You can try the following commands, but be sure to save your work. &lt;strong&gt;Proceed with caution!&lt;/strong&gt;&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;reboot
				mount
				&lt;span class=&quot;nb&quot;&gt;dd &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/dev/sda &lt;span class=&quot;nv&quot;&gt;of&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;bs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;4k &lt;span class=&quot;nv&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;1
				&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$$&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;systemd-nspawn&quot;&gt;Playing with systemd-nspawn&lt;/h3&gt;
				&lt;p&gt;As you can see, chroot lacks too many security constaints. &lt;a href=&quot;https://wiki.debian.org/nspawn&quot;&gt;Systemd-nspawn&lt;/a&gt;, on the other hand, is a &lt;em&gt;complete&lt;/em&gt; container implementation and is thus secure against random programs.&lt;/p&gt;
				&lt;p&gt;Using systemd-nspawn is equally easy:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; /path/to/your/rootfs
				systemd-nspawn
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now repeat your experiments in the chroot section and carefully observe the differences.&lt;/p&gt;
				&lt;h2 id=&quot;base-program&quot;&gt;The base program&lt;/h2&gt;
				&lt;p&gt;After getting your rootfs up for rocking, we’ll start with a fairly simple chroot-based program, modify it step-by-step, until it becomes the container we want.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#include &amp;lt;stdio.h&amp;gt;
				#include &amp;lt;unistd.h&amp;gt;
				#include &amp;lt;sys/types.h&amp;gt; // For wait(2)
				#include &amp;lt;sys/wait.h&amp;gt;  // For wait(2)
				&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;Usage: %s &amp;lt;directory&amp;gt; &amp;lt;command&amp;gt; [args...]&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;&quot;  Run &amp;lt;directory&amp;gt; as a container and execute &amp;lt;command&amp;gt;.&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;perror&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stderr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;usage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;error_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;pid_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Child goes for target program&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;chroot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;error_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;chroot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;execvp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;error_exit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;exec&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Parent waits for child&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIFEXITED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Exited with status %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WEXITSTATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ecode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WEXITSTATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WIFSIGNALED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Killed by signal %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WTERMSIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;ecode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;WTERMSIG&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ecode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;namespaces&quot;&gt;Namespaces&lt;/h2&gt;
				&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_namespaces&quot;&gt;Namespaces&lt;/a&gt; are a fundamental aspect of Linux containers. They provide isolation for a variety of mission-critical system resources like process IDs, hostnames, network stacks and inter-process communication. They are the key to making containers “look independent” from the host system.&lt;/p&gt;
				&lt;p&gt;As of Linux kernel 5.6 released in April 2020, there are 8 kinds of namespaces present:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;strong&gt;Mount namespace&lt;/strong&gt; isolates mount points (visibility) from the parent. New mount activities in the parent namespace won’t be visible in child namespaces. However, to achieve the reverse, a separate thing called “mount propagation” is involved. First appeared in 2002, Linux 2.4.19.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;UTS namespace&lt;/strong&gt; provides isolated hostnames. UTS stands for &lt;a href=&quot;https://en.wikipedia.org/wiki/History_of_Unix&quot;&gt;“&lt;strong&gt;U&lt;/strong&gt;NIX &lt;strong&gt;T&lt;/strong&gt;ime-&lt;strong&gt;S&lt;/strong&gt;haring system”&lt;/a&gt;. First appeared in 2006, Linux 2.6.19.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;IPC namespace&lt;/strong&gt; isolates traditional System V-style IPC methods. First appeared in 2006, Linux 2.6.19.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;PID namespace&lt;/strong&gt; provides a separate set of process IDs so that a process may look different inside. This is important for certain programs to function properly, most notably the init process, which must be PID 1. First appeared in 2008, Linux 2.6.24.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Networking namespace&lt;/strong&gt; provides a full set of network stack. Suitable for creating isolated network environments for containers. First appeared in 2009, Linux 2.6.29.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;User namespace&lt;/strong&gt; allows mapping UIDs / GIDs from containers to hosts, so that unpriviledged users can perform certain tasks that normally require the superuser privilege, without actually elevating themselves or posing risks to the host. First appeared in 2013, Linux 3.8.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Cgroup namespace&lt;/strong&gt; provides isolated cgroup hierarchies so containers can safely utilize cgroup functionalities without affecting the host. First appeared in 2016, Linux 4.6.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Time namespace&lt;/strong&gt; allows different processes to “see” different system times. First appeared in 2020, Linux 5.6.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;There are two ways to get namespaces isolated, &lt;a href=&quot;https://man7.org/linux/man-pages/man2/unshare.2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://man7.org/linux/man-pages/man2/clone.2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone()&lt;/code&gt;&lt;/a&gt;. A brief difference is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare&lt;/code&gt; isolates for the calling process (except PID namespace, check the manual for more details), while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; creates a new process with isolated namespaces. We’ll go for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; because it’s the system call underneath Go’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;span class=&quot;n&quot;&gt;exec&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Command&lt;/span&gt;&lt;/code&gt;, and that Go is used for popular container software like Docker and Singularity.&lt;/p&gt;
				&lt;p&gt;To utilize the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; system call, we need some adaptions, among which the most notable ones are the entry function and the child stack (using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mmap()&lt;/code&gt;, I had problems later with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;malloc()&lt;/code&gt; in my early testing). The rest are covered pretty well in the manual so there’s no need to repeat them here (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SIGCHLD&lt;/code&gt; appearing in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flags&lt;/code&gt; parameter).&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;My name is %s&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;child&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;cp&quot;&gt;#define STACK_SIZE (1024 * 1024) // 1 MiB
				&lt;/span&gt;    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mmap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;PROT_READ&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PROT_WRITE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;MAP_PRIVATE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_ANONYMOUS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAP_STACK&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Assume stack grows downwards&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child_stack_start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_stack&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;STACK_SIZE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_stack_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;wait&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Child exited with code %d&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;WEXITSTATUS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And for the include headers as well.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;#define _GNU_SOURCE    // Required for enabling clone(2)
				#include &amp;lt;stdio.h&amp;gt;
				#include &amp;lt;sched.h&amp;gt;     // For clone(2)
				#include &amp;lt;signal.h&amp;gt;    // For SIGCHLD constant
				#include &amp;lt;sys/mman.h&amp;gt;  // For mmap(2)
				#include &amp;lt;sys/types.h&amp;gt; // For wait(2)
				#include &amp;lt;sys/wait.h&amp;gt;  // For wait(2)
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now that we have &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone&lt;/code&gt; ready, adding support for namespace isolation is as simple as adding flags to the parameters.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;clone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;child&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;child_stack_start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWNS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWUTS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWIPC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWPID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CLONE_NEWCGROUP&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SIGCHLD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;mounts&quot;&gt;Mounts&lt;/h2&gt;
				&lt;p&gt;Traditionally, mounting is a way to map raw disks to accessible filesystems. Since then, its usage has evolved and supports much more than disk mapping. We’re particularly interested in using special filesystems like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc&lt;/code&gt; (the FS that provides runtime information like processes and kernel parameters), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys&lt;/code&gt; (system settings, device information etc.), &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; (a temporary filesystem backed by RAM) etc., without which a container won’t function properly.&lt;/p&gt;
				&lt;p&gt;For a minimal example, we’ll mount 4 essential filesystems with correct mount options for our container. They are the three mentioned above plus &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev&lt;/code&gt; as a tmpfs. We’ll also create a few device nodes under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev&lt;/code&gt; so things can go smoothly when they’re needed (e.g. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;some_command &amp;gt; /dev/null&lt;/code&gt;).&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;were-not-using-devtmpfs-here&quot;&gt;&lt;i class=&quot;fas fa-times-circle&quot;&gt;&lt;/i&gt; We’re not using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devtmpfs&lt;/code&gt; here&lt;/h4&gt;
				&lt;p&gt;If you examine current mounts in your host system, you’ll probably see that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev&lt;/code&gt; is mounted as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;devtmpfs&lt;/code&gt;. While it may appear straightforward to employ that, it’s unacceptable for &lt;strong&gt;a container&lt;/strong&gt;, as it exposes &lt;em&gt;all&lt;/em&gt; device nodes to the container, which violates the purpose of isolation of containers. See &lt;a href=&quot;https://unix.stackexchange.com/q/77933/211239&quot;&gt;this answer&lt;/a&gt; on Unix &amp;amp; Linux Stack Exchange.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;To do this manually, you’ll issue the following commands in a shell.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; tmpfs tmpfs /dev
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; proc proc /proc
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; sysfs sysfs /sys
				mount &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; tmpfs tmpfs /tmp
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You can then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount&lt;/code&gt; without arguments to see the mount results.&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysfs on /sys type sysfs (rw,relatime)
				proc on /proc type proc (rw,relatime)
				tmpfs on /dev type devtmpfs (rw,relatime)
				tmpfs on /tmp type tmpfs (rw,relatime)
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If you compare this with the mount points in your host system, you may notice something different.&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sysfs on /sys type sysfs (rw,nosuid,nodev,noexec,relatime)
				proc on /proc type proc (rw,nosuid,nodev,noexec,relatime)
				udev on /dev type devtmpfs (rw,nosuid,noexec,relatime,size=65895752k,nr_inodes=16473938,mode=755)
				tmpfs on /run type tmpfs (rw,nosuid,nodev,noexec,relatime,size=13191916k,mode=755)
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The extra flags (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nosuid,nodev,noexec&lt;/code&gt;) control the behavior of the mount point. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;nosuid&lt;/code&gt; means the set-uid bit will be ignored for entries under the mount point, while &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;noexec&lt;/code&gt; prevents any execution of programs from inside.&lt;/p&gt;
				&lt;p&gt;Now we’re going to do it in C. The system call is also named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount&lt;/code&gt;, and has the following signature:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;source&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;target&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filesystemtype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;unsigned&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It should be intuitive enough what the first three parameters are for, so for now we can just write&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/dev&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;proc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/proc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;proc&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sysfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/sys&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sysfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The fourth parameter corresponds to the flags we discussed above. All applicable flags can be found in the man page for &lt;a href=&quot;https://man7.org/linux/man-pages/man2/mount.2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount(2)&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
				&lt;p id=&quot;mount-data-parameter&quot;&gt;Keep in mind that, however, the last parameter isn’t entirely useless. It’s simply not used for now, but it’ll play a role later. (Actually, you may have noticed already. Good job for that.)&lt;/p&gt;
				&lt;h3 id=&quot;device-nodes&quot;&gt;Creating device nodes&lt;/h3&gt;
				&lt;p&gt;Now that we have an empty &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/dev&lt;/code&gt; directory, we should populate it with some device nodes so that software expecting their presence could work. At a minimum, we need &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;null&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zero&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;random&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;urandom&lt;/code&gt;, but you can add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tty&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;console&lt;/code&gt; if you want (these two are a bit different - you have been warned).&lt;/p&gt;
				&lt;p&gt;Device nodes are created with &lt;a href=&quot;https://man7.org/linux/man-pages/man2/mknod.2.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mknod(2)&lt;/code&gt;&lt;/a&gt;, whose prototype is:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dev_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;With a little research effort, we know we’ll call it like this:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/dev/something&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MAJOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MINOR&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;To determine the device node numbers, you can take a look at the same nodes in the host system, using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ls -l&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stat&lt;/code&gt;. Don’t worry, the numbers for special devices remain the same across Linux distros, &lt;a href=&quot;https://unix.stackexchange.com/a/354985/211239&quot;&gt;unlike BSD systems&lt;/a&gt;. It shouldn’t take long before you come to this:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev/null&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev/zero&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev/random&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mknod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;dev/urandom&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;S_IFCHR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0666&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;makedev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;pivot-root&quot;&gt;pivot_root&lt;/h2&gt;
				&lt;p&gt;We’re ready with mounts, so now we can take a look at switching the root filesystem for our container.&lt;/p&gt;
				&lt;p&gt;The &lt;a href=&quot;#base-program&quot;&gt;base program&lt;/a&gt; used &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chroot()&lt;/code&gt; for the time being, but talking about a (baseline) secure container, &lt;a href=&quot;https://github.com/earthquake/chw00t&quot;&gt;it’s terrible&lt;/a&gt;. We have to resort to another Linux feature, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt;, for this purpose.&lt;/p&gt;
				&lt;p&gt;Let’s first take a look at &lt;a href=&quot;https://man7.org/linux/man-pages/man2/pivot_root.2.html&quot;&gt;its man page&lt;/a&gt; to determine its prototype.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pivot_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;This system call is special enough that we must also take care of its notes and requirements. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_root&lt;/code&gt; must be a mount point. While the man page does provide a solution to this problem by mounting the directory on top of itself, it’s too prone to errors for us to adopt. Instead we’ll be creating a temporary directory to use as the mount point.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newroot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp/ispawn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newroot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We also need a value for the second parameter to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt;, the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_old&lt;/code&gt; directory. The manual says the following:&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_old&lt;/code&gt; must be at or underneath &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_root&lt;/code&gt;&lt;/p&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;A direct interpretation is that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;put_old&lt;/code&gt; must be at a subpath under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_root&lt;/code&gt;, which means we can simply create (or reuse an existing) a directory under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;new_root&lt;/code&gt; to use.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_old&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp/ispawn/oldroot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;put_old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And now we can do &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pivot_root&lt;/code&gt; with the directories we just set up:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pivot_root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newroot&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;put_old&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If everything so far is correct, we should now be running inside the new root tree. The “old root”, or the root filesystem of the host system, is now available at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/oldroot&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Apparently, a container shouldn’t be able to access the host filesystem without explicit grants, so we’re going to “hide” the old root. It is, from the view from within the container, an ordinary mount point that we can just unmount. However, as there (definitely) are other processes in the host system still using the filesystem, it can’t be unmounted directly.&lt;/p&gt;
				&lt;p&gt;There’s a technique called “lazy unmounting”, where existing processes continue to use the filesystem as usual, while other processes see it disappeared. It &lt;a href=&quot;https://unix.stackexchange.com/q/390056/211239&quot;&gt;could be dangerous&lt;/a&gt;, but as we’re the one-and-only process inside the container, we know it’s safe for us.&lt;/p&gt;
				&lt;p&gt;With that many information told, the actual code is really simple:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;umount2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/oldroot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MNT_DETACH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We’re using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;umount2&lt;/code&gt; system call because we need to pass the extra flags to it. Now that the host filesystem is gone, we can remove the now-empty directory (remember we’re doing clean-up jobs):&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;rmdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/oldroot&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We’ve isolated our container filesystem from the host system, and then we can proceed to securing and fortifying our container.&lt;/p&gt;
				&lt;h2 id=&quot;capabilities&quot;&gt;Capabilities&lt;/h2&gt;
				&lt;p&gt;In the traditional UNIX era, there were only two privilege levels - &lt;em&gt;privileged&lt;/em&gt; (root) and &lt;em&gt;unprivileged&lt;/em&gt; (non-root), where a &lt;em&gt;privileged&lt;/em&gt; process has every privilege to alter the system, while an &lt;em&gt;unprivileged&lt;/em&gt; process has none. Since Linux 2.2 in 1999, &lt;em&gt;capabilities&lt;/em&gt; have been added to the kernel so that unprivileged processes may acquire certain abilities needed for some task, while privileged processes may drop capabilities unneeded, allowing for privilege control at a finer granularity. A &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ping&lt;/code&gt; process doesn’t need any extra privileges than sending ICMP packets, and a web server (probably) doesn’t need any extra privileges than binding to a low port (1 to 1023), do they?&lt;/p&gt;
				&lt;p&gt;With capabilities, unprivileged processes can be granted access to selected system functionalities, while privileged processes can be deprived of selected ones. For example, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_NET_BIND_SERVICE&lt;/code&gt; is the capability to bind to TCP or UDP ports between 1 and 1023, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_CHOWN&lt;/code&gt; enables the use of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chown(2)&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Now turning our focus back to containers. Without privilege separation, a “root” process inside a container can still do dangerous things, like scanning your hard drive where the host filesystem resides, and manipulate it. This is definitely not anything expected, so we’re going to limit the capabilities the container can have as a whole.&lt;/p&gt;
				&lt;p&gt;The system calls behind capabilities manipulation are very complicated, so unlike in previous sections, we’re going to use wrapped-up libraries to aid with this. There are two options available, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcap&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libcap-ng&lt;/code&gt;, of which the latter is easier to understand and use. The documentations for &lt;a href=&quot;https://linux.die.net/man/3/libcap&quot;&gt;libcap&lt;/a&gt; and &lt;a href=&quot;https://people.redhat.com/sgrubb/libcap-ng/&quot;&gt;libcap-ng&lt;/a&gt; are given. Note that since they’re “external” libraries, extra flags need to be supplied when compiling. For libcap you’ll add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lcap&lt;/code&gt; to the compilation command, and similarly for libcap-ng you’ll add &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-lcap-ng&lt;/code&gt; to the command.&lt;/p&gt;
				&lt;p&gt;As an easier starting point, we’ll use &lt;a href=&quot;https://docs.docker.com/engine/reference/run/#runtime-privilege-and-linux-capabilities&quot;&gt;Docker’s capabilities set&lt;/a&gt; to avoid having to sort everything out by ourselves. Before we start, there’s another thing to learn - the different “sets” of capabilities of a process. In a few short words,&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;The &lt;em&gt;bounding&lt;/em&gt; set restricts the maximum possible set of capabilities a process (and all its descendants) can have&lt;/li&gt;
				&lt;li&gt;The &lt;em&gt;effective&lt;/em&gt; set is what a process currently has and is effective&lt;/li&gt;
				&lt;li&gt;The &lt;em&gt;permitted&lt;/em&gt; set may be granted when “asked” (using the appropriate system calls)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;It’s noticeable that we want to limit all three sets for the container. Using libcap-ng, the code is very simple:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;capng_clear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAPNG_SELECT_BOTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;capng_updatev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAPNG_ADD&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;capng_type_t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAPNG_EFFECTIVE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAPNG_PERMITTED&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CAPNG_BOUNDING_SET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CAP_SETPCAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;CAP_SETFCAP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;capng_apply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CAPNG_SELECT_BOTH&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;capng_clear&lt;/code&gt;, we clear all capabilities from our pending changes, and add whitelisted capabilities, before finally applying the changes.&lt;/p&gt;
				&lt;p&gt;Using libcap, however, is slightly more complicated to achieve the same, as there’s no direct “clear all” function, but instead you’ll have to list them by yourself. &lt;a href=&quot;https://github.com/iBug/iSpawn/commit/bcf27bf42771e7fd8c7f24abbec5907f6f727fd7&quot;&gt;Here&lt;/a&gt;’s an older version of my attempted code if you want to learn. Nevertheless, it’s never bad to learn more.&lt;/p&gt;
				&lt;h2 id=&quot;seccomp&quot;&gt;SecComp&lt;/h2&gt;
				&lt;p&gt;SecComp (Secure Computing) is a security module in Linux that lets a process to transition one-way into a “secure state” where no system call other than &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;read()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;write()&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sigreturn()&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exit()&lt;/code&gt; is allowed. It’s easily noticeable that this feature is too strict for making something useful, and &lt;strong&gt;seccomp-bpf&lt;/strong&gt; is an extension to the rescue.&lt;/p&gt;
				&lt;p&gt;Seccomp BPF extends the seccomp module with Berkeley Packer Filter (BPF), an embedded instruction set that allows highly customized seccomp rules to be deployed. With BPF, you can create custom logic for system call filtering, including matching and testing individual system call arguments.&lt;/p&gt;
				&lt;h2 id=&quot;syscall-filter&quot;&gt;System call filtering&lt;/h2&gt;
				&lt;p&gt;To ensure full control, we’re using a whitelist for system calls. This means any unknown one will be rejected. So we’ll start by creating a new “SecComp filter context”, and set the default action to “reject”. By “reject”, we’ll return “permission denied” when a process tries to call it.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;scmp_filter_ctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seccomp_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCMP_ACT_ERRNO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCMP_ACT_ERRNO(1)&lt;/code&gt; refers exactly to “respond with EPERM”, which will be hit if no other filters apply.&lt;/p&gt;
				&lt;h3 id=&quot;syscall-whitelist&quot;&gt;System call whitelist&lt;/h3&gt;
				&lt;p&gt;We’ll now add each “safe” system call to our filter and set it to “allowed”. To save some time scratching your head examining each system call, we’ll adopt &lt;a href=&quot;https://github.com/moby/moby/blob/master/profiles/seccomp/default.json&quot;&gt;Docker’s syscall whitelist&lt;/a&gt;. Each system call will be wrapped in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCMP_SYS&lt;/code&gt; so it’s turned into a suitable number used inside SecComp.&lt;/p&gt;
				&lt;p&gt;We need to add the whole big list of “general” system calls, plus some platform- or scenario-specific ones, namely, two special system calls for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;amd64&lt;/code&gt; platform, and a few others for system administration, since we’ve allowed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CAP_SYS_ADMIN&lt;/code&gt; inside the container.&lt;/p&gt;
				&lt;p&gt;Use your favorite text processing toolstack to get the big list into a C-array so we can loop over, like &lt;a href=&quot;https://github.com/iBug/iSpawn/blob/master/syscall_allow.c&quot;&gt;this&lt;/a&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accept4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;access&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Many, many more...&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;waitpid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;SCMP_SYS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writev&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And then append these special ones we want to include as well:&lt;/p&gt;
				&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    // amd64-specific required syscalls
				SCMP_SYS(arch_prctl),
				SCMP_SYS(modify_ldt),
				// CAP_SYS_ADMIN-specific syscalls
				SCMP_SYS(bpf),
				SCMP_SYS(clone),
				SCMP_SYS(fanotify_init),
				SCMP_SYS(lookup_dcookie),
				SCMP_SYS(mount),
				SCMP_SYS(name_to_handle_at),
				SCMP_SYS(perf_event_open),
				SCMP_SYS(quotactl),
				SCMP_SYS(setdomainname),
				SCMP_SYS(sethostname),
				SCMP_SYS(setns),
				SCMP_SYS(syslog),
				SCMP_SYS(umount),
				SCMP_SYS(umount2),
				SCMP_SYS(unshare)
				};
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Find the number of items included, and save it for easier later use.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;size_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls_len&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;sizeof&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We can then add each system call to our new SecComp filter as “allowed” with a simple loop:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCMP_ACT_ALLOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;loading-seccomp&quot;&gt;Loading SecComp filter&lt;/h3&gt;
				&lt;p&gt;After our filter has been constructed, we can load it onto our process for it to take effect.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;seccomp_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And finally, release the workspace to avoid memory leaks.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;seccomp_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;seccomp-caveats&quot;&gt;Caveats&lt;/h3&gt;
				&lt;h4 id=&quot;seccomp-incompatible-syscalls&quot;&gt;Incompatible system calls&lt;/h4&gt;
				&lt;p&gt;As I worked this out on an Ubuntu 18.04 environment, some newer system calls weren’t available in my system headers, like the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;io_uring&lt;/code&gt;-related ones that are introduced in Linux 5.1. You can safely comment out any of them that your compiler complains about not recognizing. There shouldn’t be too many of them if your environment is up-to-date, though.&lt;/p&gt;
				&lt;h4 id=&quot;seccomp-checking&quot;&gt;Precautionary checking&lt;/h4&gt;
				&lt;p&gt;As it’s too common for one of the function calls to fail, I’ve added sanity checks for them. Here’s the complete code of this part.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;filter_syscall&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;scmp_filter_ctx&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seccomp_init&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SCMP_ACT_ERRNO&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls_len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seccomp_rule_add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SCMP_ACT_ALLOW&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;allowed_syscalls&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;errno&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seccomp_load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;seccomp_release&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ctx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;cgroups&quot;&gt;Resource restriction&lt;/h2&gt;
				&lt;p&gt;The last part we’ll visit is restricting container resources. Surely we don’t want a container to overuse system resources like CPU or RAM and make the host system less stable. Linux Control Groups (Cgroups) is designed for efficient resource constraint that we’re going to make use of. There are many “cgroup systems” for different aspects of system resources, including CPU, RAM and even disk I/O. Looks pretty neat, right?&lt;/p&gt;
				&lt;p&gt;Unlike other parts we’ve built so far, cgroup doesn’t use system calls for setup and configuration, but a filesystem-based interface instead, like those in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys&lt;/code&gt;. In fact, the cgroup control interface resides exactly under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys&lt;/code&gt;, at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/fs/cgroup&lt;/code&gt;. With this interface, we read and write “files” to change configuration values, and create and delete directories to add or remove structures.&lt;/p&gt;
				&lt;p&gt;There are multiple cgroup “controllers” working on different aspects of system resources, each having a distinct tree structure under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/fs/cgroup&lt;/code&gt;. So first we’ll examine what cgroup controllers are available:&lt;/p&gt;
				&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /sys/fs/cgroup
				&lt;span class=&quot;go&quot;&gt;blkio        cpuacct  freezer  net_cls           perf_event  systemd
				cpu          cpuset   hugetlb  net_cls,net_prio  pids        unified
				cpu,cpuacct  devices  memory   net_prio          rdma
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Here we’re interested in some of them, namely, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blkio&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpu&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pids&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Let’s first take a look at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pids&lt;/code&gt;. We’ll create our own subtree to start with:&lt;/p&gt;
				&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;mkdir&lt;/span&gt; /sys/fs/cgroup/pids/ispawn
				&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;ls&lt;/span&gt; /sys/fs/cgroup/pids/ispawn
				&lt;span class=&quot;go&quot;&gt;cgroup.clone_children  notify_on_release  pid.events  tasks
				cgroup.procs           pid.current        pid.max
				&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It’s easily imagined that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid.max&lt;/code&gt; controls the maximum number of PIDs in this subsystem, so let’s write something to it:&lt;/p&gt;
				&lt;div class=&quot;language-console highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;root@ubuntu:~#&lt;/span&gt;&lt;span class=&quot;w&quot;&gt; &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;16 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /sys/fs/cgroup/pids/ispawn/pid.max
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;To verify that it’s working, make an attempt to exceed the limit. Open another shell and find its pid with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo $$&lt;/code&gt;. Write the number that you see (it’s the PID of the new shell) to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/fs/cgroup/pids/ispawn/cgroup.procs&lt;/code&gt;. You can verify that the new process has been added to the subsystem by reading that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgroup.procs&lt;/code&gt; files out, and you’ll see the PID you just written.&lt;/p&gt;
				&lt;p&gt;Now switch to the new shell and try spawning a lot of subprocesses, for example:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;i &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;1..20&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; /bin/sleep 10&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;done&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You can see the shell output as &lt;em&gt;Operation not permitted&lt;/em&gt; for 5 to 6 times. This means it has hit the PID cap and fails to spawn more processes.&lt;/p&gt;
				&lt;p&gt;In our C-based container program, we’ll do this in the parent process. The code is intuitively simple.&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sys/fs/cgroup/pids/ispawn&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0777&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sys/fs/cgroup/pids/ispawn/pid.max&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;FILE&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fopen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/sys/fs/cgroup/pids/ispawn/cgroup.procs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;w&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fprintf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;%d&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// pid of the child process&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;fclose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;We can now proceed to setting other limits:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;To reduce CPU shares, we write to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cpu/cpu.shares&lt;/code&gt;. Because CPU shares are relative to each other and the system default is usually 1024, setting the value to 256 for our container gives it 1/4 as much CPU as other processes when the system load goes up. (It still gets more CPU when needed and when the system is more idle.)&lt;/li&gt;
				&lt;li&gt;To limit memory usage, we write to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory/memory.limit_in_bytes&lt;/code&gt; (for userspace memory) and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory/memory.kmem.limit_in_bytes&lt;/code&gt; (for kernel memory).
				&lt;ul&gt;
				&lt;li&gt;However, this limits only physical memory usage, so when swap is present, memory gets swapped out onto disk when it hits the limit. To completely disable swap for our container, set &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;memory/memory.swappiness&lt;/code&gt; to zero.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;To reduce disk I/O priority, we write to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blkio/weight&lt;/code&gt;. This is relative to 100 so writing 50 will reduce its disk I/O priority to half.&lt;/li&gt;
				&lt;li&gt;The last thing to note is that the tree hierarchies are independent among different cgroup controllers, so you have to create the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ispawn&lt;/code&gt; directory in &lt;em&gt;each&lt;/em&gt; of them, and write &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgroup.procs&lt;/code&gt; inside &lt;em&gt;each&lt;/em&gt; of them.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;heads-up&quot;&gt;&lt;i class=&quot;fas fa-fw fa-lightbulb&quot;&gt;&lt;/i&gt; Heads up&lt;/h4&gt;
				&lt;p&gt;The course lab at the time was based on Ubuntu 18.04 with Linux kernel 5.3 (18.04 HWE). The cgroup controllers in newer kernels may be very different from what’s presented in this article. For example, with Linux 5.4 on Ubuntu 20.04, the keys in PID cgroup begins with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pids.&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pid.&lt;/code&gt;, and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;blkio&lt;/code&gt; has a completely different set of available keys. Make sure you examine the cgroup directories before copying and pasting code.&lt;/p&gt;
				&lt;/div&gt;
				&lt;h3 id=&quot;mount-cgroup-controllers&quot;&gt;Mounting cgroup controllers inside the container&lt;/h3&gt;
				&lt;p&gt;To enable applications in our container to use cgroup controllers, we must mount them inside. Like how we mounted &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/tmp&lt;/code&gt; and other filesystems, we check the output of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount&lt;/code&gt; to determine how we’re going to call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount(2)&lt;/code&gt;.&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;cgroup on /sys/fs/cgroup/pids type cgroup (rw,nosuid,nodev,noexec,relatime,pids)
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Everything looks similar to what we’ve just done, but there’s one different thing: There’s no mount flag for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pids&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;Recalling &lt;a href=&quot;#mount-data-parameter&quot;&gt;we skipped the last parameter of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mount&lt;/code&gt;&lt;/a&gt;, now it’s time to pick it back up. Fortunately, it isn’t too complicated. For our use case, we can just pass the string &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&quot;pids&quot;&lt;/code&gt; to that parameter, and we swap the string for another to mount another cgroup controller. You can read the man page for &lt;a href=&quot;https://man7.org/linux/man-pages/man7/cgroups.7.html&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cgroups(7)&lt;/code&gt;&lt;/a&gt; about this, look for &lt;em&gt;Mounting v1 controllers&lt;/em&gt;.&lt;/p&gt;
				&lt;p&gt;To mimic the monut points on our host system, we additionally mount a tmpfs at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/sys/fs/cgroup&lt;/code&gt;, and remount this mountpoint as read-only after adding the controllers. The final result looks like this:&lt;/p&gt;
				&lt;div class=&quot;language-c highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;mount_cgroup&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_NOSUID&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_NODEV&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_NOEXEC&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_RELATIME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Mount a tmpfs first&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;none&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;tmpfs&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;mode=755&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Prepare mount points&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/blkio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mkdir&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/pids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mo&quot;&gt;0755&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Mount cgroup subsystems&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/blkio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;blkio&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/pids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pids&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// cpu and cpuacct need symlinks&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;symlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/cpu&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;symlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cpu,cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup/cpuacct&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// Remount the tmpfs as R/O&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;mount&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sys/fs/cgroup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_REMOUNT&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MS_RDONLY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cgmountflags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NULL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;cgroup-namespace-caveat&quot;&gt;A small problem with cgroup namespace&lt;/h3&gt;
				&lt;p&gt;During my experiments, I noticed a strange issue where I could see the host cgroup hierarchies in my container implementation. It turns out that the cgroup “root” inside a cgroup namespace is the subtree the process belongs in when this cgroup namespace is created / isolated. Once the namespaces is created, its root is determined and fixed, even if the “root” process is moved into another subtree later.&lt;/p&gt;
				&lt;p&gt;This means the child process must be “moved” to the desired cgroup subtree before the cgroup namespace is isolated. This leaves us with two options:&lt;/p&gt;
				&lt;ol&gt;
				&lt;li&gt;The parent process moves itself to the target cgroup subtree before calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone()&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLONE_NEWCGROUP&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;The parent process calls &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clone()&lt;/code&gt; without &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLONE_NEWCGROUP&lt;/code&gt;, moves the child process to the target cgroup subtree, and then tells the child process to isolate the cgroup namespace.&lt;/li&gt;
				&lt;/ol&gt;
				&lt;p&gt;It should be noted that with the second option, some kind of “syncing” is needed to avoid the child process going too quickly to perform the cgroup namespace isolation before the parent process finishes its job. It’s easy to come up with a solution that just works: We can create a pipe between the processes, where the parent process can send something to tell the child process that it’s ready.&lt;/p&gt;
				&lt;p&gt;With this in mind, the second option is actually &lt;a href=&quot;https://github.com/iBug/iSpawn/commit/cc4dcb1032e2a4d4fc57491cc904f126b719ba88&quot;&gt;easier to implement&lt;/a&gt;, since there’s another system call for isolating namespaces in-place (i.e. without creating a new process), that we put away earlier. It’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare(2)&lt;/code&gt;. It’s simple to use, too, just call &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unshare(CLONE_NEWCGROUP)&lt;/code&gt; when ready.&lt;/p&gt;
				&lt;p&gt;To verify that this issue is handled correctly, check the content in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/1/cgroup&lt;/code&gt;. The correct result should look like this, where every line ends with a single &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;12:cpuset:/
				11:rdma:/
				10:blkio:/
				9:pids:/
				8:devices:/
				7:net_cls,net_prio:/
				6:memory:/
				5:hugetlb:/
				4:perf_event:/
				3:cpu,cpuacct:/
				2:freezer:/
				1:name=systemd:/
				0::/
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;With an incorrectly written container, certain lines may have an unexpected value, generally starting with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/../&lt;/code&gt;, for example:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;12:cpuset:/
				11:rdma:/
				10:blkio:/../user.slice
				9:pids:/../user.slice/user-0.slice/
				8:devices:/
				7:net_cls,net_prio:/
				6:memory:/../user.slice/user-0.slice/
				5:hugetlb:/
				4:perf_event:/
				3:cpu,cpuacct:/../user.slice
				2:freezer:/
				1:name=systemd:/
				0::/
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;As explained above, these paths are “paths to the cgroup location of PID 1 relative to the ‘root’ of the cgroup namespace”. When properly done, the PID 1 should have all of its cgroup hierarchies belonging at “root”.&lt;/p&gt;
				&lt;p&gt;Don’t be surprised to see the inconsistent lines from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/proc/1/cgroup&lt;/code&gt;, as a process can be at different locations in different cgroup controllers.&lt;/p&gt;
				&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;
				&lt;p&gt;Now here, at this point, we’ve gone through all technologies required for a functional and secure Linux container, although our “container” isn’t necessarily functional and secure. It’s going to be hard work examining and patching all the loopholes for the best security, if you’d like, but the fundamentals have been covered already so there won’t be anything new.&lt;/p&gt;
				&lt;p&gt;There are two namespaces we’ve skipped in the beginning (three if you count &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CLONE_NEWTIME&lt;/code&gt;). They are slightly more complicated to set up and isn’t necessary for a container, as Docker doesn’t use User Namespaces and systemd-nspawn doesn’t use Network Namespaces by default.&lt;/p&gt;
				&lt;p&gt;There are also more to consider if you want multiple containers to run simultaneously. One notable thing is that each should have a separete cgroup subtree. Avoiding mount point conflict in race conditions is another thing to take into account.&lt;/p&gt;
				&lt;p&gt;Should you want a ready-to-use example to play with, here’s the complete code that I wrote, with some bells and whistles added: &lt;a href=&quot;https://github.com/iBug/iSpawn&quot;&gt;&lt;i class=&quot;fab fa-github&quot;&gt;&lt;/i&gt; iBug/iSpawn&lt;/a&gt;. Keep in mind that it’s wrote for Ubuntu 18.04 and things could have been changed drastically, so it may not work in your system.&lt;/p&gt;
				&lt;h3 id=&quot;further-reading&quot;&gt;Further reading&lt;/h3&gt;
				&lt;ul&gt;
				&lt;li&gt;&lt;strong&gt;Linux containers in 500 lines of code&lt;/strong&gt; by &lt;em&gt;Lizzie Dixon&lt;/em&gt; - &lt;a href=&quot;https://blog.lizzie.io/linux-containers-in-500-loc.html&quot;&gt;https://blog.lizzie.io/linux-containers-in-500-loc.html&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;Wikipedia articles on …
				&lt;ul&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Linux_namespaces&quot;&gt;Linux Namespaces&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Capability-based_security&quot;&gt;Capability-based security&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Seccomp&quot;&gt;SecComp&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Cgroups&quot;&gt;Cgroups&lt;/a&gt;&lt;/li&gt;
				&lt;li&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Security-Enhanced_Linux&quot;&gt;SELinux&lt;/a&gt;, which we didn’t touch here&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;/ul&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="container" /><category term="c" /><summary type="html">Since years ago, containers have been a hot topic everywhere. There are many container softwares like Docker, Linux Containers and Singularity. It’s hard to say one understand what containers are without diving into all the gory details of them, so I decided to go on this exploration myself.</summary></entry><entry><title type="html">Keep using Flash Player in browsers in 2021</title><link href="https://ibug.io/blog/2021/01/keep-flash-player-browser/" rel="alternate" type="text/html" title="Keep using Flash Player in browsers in 2021" /><published>2021-01-12T00:00:00+00:00</published><updated>2021-02-04T21:47:35+00:00</updated><id>https://ibug.io/blog/2021/01/keep-flash-player-browser</id><content type="html" xml:base="https://ibug.io/blog/2021/01/keep-flash-player-browser/">&lt;p&gt;It’s 2021 now, and &lt;a href=&quot;https://www.adobe.com/products/flashplayer/end-of-life.html&quot;&gt;Adobe Flash Player has been end-of-life&lt;/a&gt; after December 31, 2020. There are many cases where you want to retain it, however. For example, you may want to keep enjoying an old game that’s been around for decades, or managing your organization’s infrastructure via &lt;a href=&quot;https://kb.vmware.com/s/article/78589&quot;&gt;VMware vSphere Flash Web Client (vSphere 6.5 and older)&lt;/a&gt;.&lt;/p&gt;
				&lt;h2 id=&quot;quick-solution&quot;&gt;Quick Solution&lt;/h2&gt;
				&lt;p&gt;According to &lt;a href=&quot;https://www.adobe.com/content/dam/acom/en/devnet/flashplayer/articles/flash_player_admin_guide/pdf/latest/flash_player_32_0_admin_guide.pdf&quot;&gt;Adobe Flash Player 32.0 Administration Guide&lt;/a&gt;, page 28 and 36, you can deploy a config file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mms.cfg&lt;/code&gt; with the following content to continue using Flash on whitelisted sites:&lt;/p&gt;
				&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;py&quot;&gt;EOLUninstallDisable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;SilentAutoUpdateEnable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AutoUpdateDisable&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;EnableAllowList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AllowListUrlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*://*.example.com/&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AllowListUrlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*://*.example.net/&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AllowListUrlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;*://*.example.org/&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;AllowListUrlPattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;file:*&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;TraceOutputEcho&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Depending on your operating system, the file may be located at:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Windows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\System32\Macromed\Flash&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Windows\SysWOW64\Macromed\Flash&lt;/code&gt; (if you’re on a 64-bit Windows)&lt;/li&gt;
				&lt;li&gt;macOS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Library/Application Support/Macromedia&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;Linux: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/adobe&lt;/code&gt; (yes it &lt;em&gt;is&lt;/em&gt; Adobe instead of Macromedia)&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;Placing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mms.cfg&lt;/code&gt; file inside the correct directory (both directories for 64-bit Windows) should enable Flash on websites you whitelisted.&lt;/p&gt;
				&lt;p&gt;Additionally, if you’re using &lt;strong&gt;Google Chrome&lt;/strong&gt; or Chromium-based &lt;strong&gt;Microsoft Edge&lt;/strong&gt;, you need to place an additional &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mms.cfg&lt;/code&gt; file in the following directory:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Windows: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;C:\Users\&amp;lt;username&amp;gt;\AppData\Local\Google\Chrome\User Data\Default\Pepper Data\Shockwave Flash\System\mms.cfg&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;macOS: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/Users/&amp;lt;username&amp;gt;/Library/Application Support/Google/Chrome/Default/Pepper Data/Shockwave Flash/System&lt;/code&gt;&lt;/li&gt;
				&lt;li&gt;Linux: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.config/google-chrome/Default/Pepper Data/Shockwave Flash/System/&lt;/code&gt;&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;For Microsoft Edge, replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Google&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Microsoft&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Chrome&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Edge&lt;/code&gt; in the above paths. Don’t forget to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;username&amp;gt;&lt;/code&gt; with your user name.&lt;/p&gt;
				&lt;p&gt;After placing the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mms.cfg&lt;/code&gt; file, just restart your browser to see Flash come back again.&lt;/p&gt;
				&lt;h2 id=&quot;the-future&quot;&gt;The Future&lt;/h2&gt;
				&lt;p&gt;The Chromium browser (basis of Google Chrome and modern Microsoft Edge) &lt;a href=&quot;https://www.chromium.org/flash-roadmap#TOC-Flash-Support-Removed-from-Chromium-Target:-Chrome-88---Jan-2021-&quot;&gt;will completely remove Flash&lt;/a&gt; since version 88, and &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Plugins/Roadmap#schedule&quot;&gt;so will Firefox&lt;/a&gt; since version 85. This means you can no longer enable Flash even with the above &lt;em&gt;Enterprise policy&lt;/em&gt; applied.&lt;/p&gt;
				&lt;p&gt;Unfortunately, you have to keep an old version of your browser of choice around if you plan to use Flash for an extended period. This means you have to find an available download, and disable the auto-update feature for the browser. You will be missing the latest web features and security improvements if you &lt;a href=&quot;https://browser-update.org/&quot;&gt;remain on an old browser&lt;/a&gt;, which will be an issue sooner or later.&lt;/p&gt;
				&lt;p&gt;You can get around the browser issue by using Internet Explorer if you’re on Windows, which is &lt;em&gt;already&lt;/em&gt; lacking new web features and security. You’ll want to prevent Windows Update &lt;a href=&quot;https://www.catalog.update.microsoft.com/search.aspx?q=4577586&quot;&gt;KB4577586&lt;/a&gt; from installing, following &lt;a href=&quot;https://support.microsoft.com/en-us/help/3183922/how-to-temporarily-prevent-a-windows-update-from-reinstalling-in-windo&quot;&gt;Microsoft’s guidelines&lt;/a&gt;.&lt;/p&gt;
				&lt;p&gt;A better approach is to keep the Flash Player installers around (I saved FP v29 &lt;a href=&quot;https://download.ibugone.com/fp_29.0.0.171_archive.zip&quot;&gt;here&lt;/a&gt; if you need - it’s a full set so beware of download size - 421 MB), and install them when needed.&lt;/p&gt;
				&lt;p&gt;Finally, the only way to secure your ability to use Flash in the distant future is to install a virtual machine running an older system (like Windows 7), with old software and old browsers, and &lt;em&gt;then&lt;/em&gt; put your Flash Player there.&lt;/p&gt;</content><author><name>iBug</name></author><category term="web" /><category term="flash" /><summary type="html">It’s 2021 now, and Adobe Flash Player has been end-of-life after December 31, 2020. There are many cases where you want to retain it, however. For example, you may want to keep enjoying an old game that’s been around for decades, or managing your organization’s infrastructure via VMware vSphere Flash Web Client (vSphere 6.5 and older).</summary></entry></feed>