<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="https://ibug.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://ibug.io/" rel="alternate" type="text/html" /><updated>2020-09-21T15:30:54+00:00</updated><id>https://ibug.io/feed.xml</id><title type="html">iBug</title><subtitle>The little personal site for iBug</subtitle><author><name>iBug</name></author><entry><title type="html">Build GitHub Pages with GitHub Actions</title><link href="https://ibug.io/blog/2020/09/build-github-pages-with-github-actions/" rel="alternate" type="text/html" title="Build GitHub Pages with GitHub Actions" /><published>2020-09-19T00:00:00+00:00</published><updated>2020-09-21T01:12:47+00:00</updated><id>https://ibug.io/blog/2020/09/build-github-pages-with-github-actions</id><content type="html" xml:base="https://ibug.io/blog/2020/09/build-github-pages-with-github-actions/">&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;heads-up&quot;&gt;&lt;i class=&quot;fas fa-fw fa-lightbulb&quot;&gt;&lt;/i&gt; Heads up&lt;/h4&gt;
				&lt;p&gt;I wrote &lt;a href=&quot;/blog/2018/04/build-github-pages-with-travis-ci/&quot;&gt;another article&lt;/a&gt; two years ago about building with Travis CI, but from my experience in the past half year, GitHub Actions is, in all aspects, a better option than Travis CI.&lt;/p&gt;
				&lt;p&gt;You should also read that article if you’re unfamiliar with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, as I won’t be repeating common basics. This article will focus on GitHub Actions rather than building a Jekyll site in general.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Earlier this year, I switched my GitHub Pages build from CircleCI to GitHub Actions.&lt;/p&gt;
				&lt;p&gt;Yep, an article is missing for CircleCI, but why is it still needed? GitHub Actions is better than CircleCI in &lt;em&gt;almost&lt;/em&gt; every aspect, except for its CPU that runs slightly slower than that of CircleCI.&lt;/p&gt;
				&lt;h2 id=&quot;1-review&quot;&gt;1. Review&lt;/h2&gt;
				&lt;p&gt;In &lt;a href=&quot;/blog/2018/04/build-github-pages-with-travis-ci/&quot;&gt;my previous article&lt;/a&gt; on building with Travis CI, we went through the steps of setting up a local build environment for our Jekyll site. We set up a Ruby development environment, installed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle&lt;/code&gt;, wrote a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, and built the Jekyll site locally.&lt;/p&gt;
				&lt;p&gt;If you’re not yet ready for this part, check out that article first. I’m going straight to the main content this time.&lt;/p&gt;
				&lt;h2 id=&quot;setup-actions&quot;&gt;2. Setting up GitHub Actions&lt;/h2&gt;
				&lt;p&gt;Getting GitHub Actions ready for building is &lt;em&gt;much&lt;/em&gt; easier than Travis CI, as everything you need to do is to push a config file into &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.github/workflows&lt;/code&gt; directory of your repository.&lt;/p&gt;
				&lt;p&gt;If you’re working on a forked repository, you may want to navigate to the “Actions” tab in your repository, and enable Actions there. Actions is disabled for forked repositories by default.&lt;/p&gt;
				&lt;h3 id=&quot;setup-build&quot;&gt;Configure build settings&lt;/h3&gt;
				&lt;p&gt;You can use any name for the config file, but here I’ll go with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;build.yml&lt;/code&gt;. Here’s a minimal set of steps you’ll need.&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;build&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;push&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;jobs&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;build&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;runs-on&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;ubuntu-latest&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;steps&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/checkout@v2&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/setup-ruby@v1&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;ruby-version&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2.7&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Setup cache for Bundler&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;cache&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;uses&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;actions/cache@v2&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;with&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;vendor/bundle&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ runner.os }}-bundler-${{ hashFiles('Gemfile') }}&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;restore-keys&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;${{ runner.os }}-bundler-&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Install dependencies&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;bundle install --path=vendor/bundle&lt;/span&gt;
				&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Build site&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;bundle exec jekyll build --profile --trace&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;JEKYLL_ENV&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;production&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;JEKYLL_GITHUB_TOKEN&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Unlike Travis CI, all GitHub Actions builds run in an identical environment, while specific languages and software are loaded at runtime. This workflow contains 5 steps, with each step being:&lt;/p&gt;
				&lt;ol&gt;
				&lt;li&gt;&lt;strong&gt;Clone and checkout the repository.&lt;/strong&gt; Contrary to Travis CI, GitHub Actions does not clone the repository automatically, as GitHub Actions is intended for more general purposes than only running Continuous Integrations.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Setup Ruby development environment.&lt;/strong&gt; This one is obvious, since Jekyll is written in Ruby.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Setup cache.&lt;/strong&gt; For the same reason as with Travis CI: Caching installed gems speeds up &lt;em&gt;subsequent&lt;/em&gt; builds.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Install dependencies.&lt;/strong&gt; Self-explanatory.&lt;/li&gt;
				&lt;li&gt;&lt;strong&gt;Build site.&lt;/strong&gt; Same as above, self-explanatory.&lt;/li&gt;
				&lt;/ol&gt;
				&lt;p&gt;The build process is mostly the same as on Travis CI, except that many steps that are automatically taken on Travis CI have to be written explicitly.&lt;/p&gt;
				&lt;h2 id=&quot;deploy-actions&quot;&gt;3. Deploy to GitHub&lt;/h2&gt;
				&lt;h3 id=&quot;access-token&quot;&gt;Access token&lt;/h3&gt;
				&lt;p&gt;You’ve probably noticed that there’s a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;${{ secrets.GITHUB_TOKEN }}&lt;/code&gt; in the above GitHub Actions config. That’s &lt;a href=&quot;https://docs.github.com/en/actions/configuring-and-managing-workflows/authenticating-with-the-github_token&quot;&gt;a neat feature&lt;/a&gt; GitHub provides. The main downside is that the token has access only to the repository the workflow is running on (as well as any other public resources). So if you want to push to a different repository, you’ll still have to resort to creating your personal access token (PAT) for it.&lt;/p&gt;
				&lt;p&gt;To keep things simple, I’ll assume you’re pushing to the same repository for deployment, where the GitHub-provided token can be used.&lt;/p&gt;
				&lt;h3 id=&quot;setup-deployment&quot;&gt;Setting up deployment&lt;/h3&gt;
				&lt;p&gt;The deploy script from the other Travis CI article is as follows (with names replaced, of course):&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;_site
				git init
				git config user.name &lt;span class=&quot;s2&quot;&gt;&quot;GitHub&quot;&lt;/span&gt;
				git config user.email &lt;span class=&quot;s2&quot;&gt;&quot;noreply@github.com&quot;&lt;/span&gt;
				git add &lt;span class=&quot;nt&quot;&gt;--all&lt;/span&gt;
				git commit &lt;span class=&quot;nt&quot;&gt;--message&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Auto deploy from GitHub Actions build &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$GITHUB_RUN_NUMBER&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				git remote add deploy https://&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{ secrets.GITHUB_TOKEN &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;@github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1
				git push &lt;span class=&quot;nt&quot;&gt;--force&lt;/span&gt; deploy master &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;/dev/null 2&amp;gt;&amp;amp;1
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Again, replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;yourname&amp;gt;&lt;/code&gt; with your GitHub username in the above script.&lt;/p&gt;
				&lt;p&gt;Now, instead of writing it to a file, we can add this script directly to the build config, as shown below:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy site&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;cd _site&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git init&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.name &quot;GitHub&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.email &quot;noreply@github.com&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git add --all&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git commit --message &quot;Auto deploy from GitHub Actions build $GITHUB_RUN_NUMBER&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git remote add deploy https://${{ secrets.GITHUB_TOKEN }}@github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git push --force deploy gh-pages &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;fixing-issues-with-github-actions&quot;&gt;Fixing issues with GitHub Actions&lt;/h3&gt;
				&lt;p&gt;There are a few things to tackle, however, as GitHub Actions works differently than Travis CI.&lt;/p&gt;
				&lt;p&gt;First, the GitHub-provided token, for unknown reasons, could not trigger GitHub Pages deploys. This used to be the case&lt;sup id=&quot;fnref:1&quot; role=&quot;doc-noteref&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt; but has since been (partially) fixed. Now it can trigger Pages for non-root commits to the Pages branch. A “root commit” is the sole commit on a new branch, like the one created by the above build script, which always initializes a new repository and creates a single commit for the contents. This Pages issue makes the above build script non-functional, and we need to fix it.&lt;/p&gt;
				&lt;p&gt;An easy solution is to fetch the target (deploy) branch, and add a commit on top of whatever’s there already. So we modify the build script to include this fix:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy site&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;cd _site&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git init&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.name &quot;GitHub&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.email &quot;noreply@github.com&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git remote add deploy https://${{ secrets.GITHUB_TOKEN }}@github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git fetch --depth=1 deploy gh-pages&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git reset --soft FETCH_HEAD&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git checkout -B gh-pages&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git add --all&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git commit --message &quot;Auto deploy from GitHub Actions build $GITHUB_RUN_NUMBER&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git push deploy gh-pages &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;In this revised script, we first fetch the target branch, with depth set to 1 to avoid unnecessary downloads. Then we reset our “branch pointer” to the fetched branch (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FETCH_HEAD&lt;/code&gt;), before finally adding our content as another commit on top of it.&lt;/p&gt;
				&lt;h3 id=&quot;fixing-issues-with-github-actions---alternative-approach&quot;&gt;Fixing issues with GitHub Actions - Alternative approach&lt;/h3&gt;
				&lt;p&gt;There’s an alternative solution to this issue, by cloning the deploy repository beforehand (and remove &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git init&lt;/code&gt; from the deploy step).&lt;/p&gt;
				&lt;p&gt;Insert this “clone” step &lt;em&gt;before&lt;/em&gt; the “build” step:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Prepare build&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git clone -q --depth=1 --branch=gh-pages --single-branch --no-checkout \&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;https://${{ secrets.GITHUB_TOKEN }}@github.com/&amp;lt;yourname&amp;gt;/&amp;lt;yourname&amp;gt;.github.io.git _site/&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;and change the deploy step to this:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    &lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Deploy site&lt;/span&gt;
				&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;|&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;cd _site&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.name &quot;GitHub&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git config user.email &quot;noreply@github.com&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git add --all&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git commit --message &quot;Auto deploy from GitHub Actions build $GITHUB_RUN_NUMBER&quot;&lt;/span&gt;
				&lt;span class=&quot;s&quot;&gt;git push deploy gh-pages&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;An important note is that you should tell Jekyll to keep your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git&lt;/code&gt; folder in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_site&lt;/code&gt; directory when building your site. This can be done by adding the following settings to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;keep_files&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;pi&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;.git&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;]&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;I recall that Jekyll 4.0 has this setting emplaced by default, but can’t find the reference for now, so I’m recommending that you explicitly write this into your config file even if you have Jekyll 4 locally (which you probably don’t if you’re using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;github-pages&lt;/code&gt; gem). It’s a good idea to write configurations explicitly, after all.&lt;/p&gt;
				&lt;h2 id=&quot;finally&quot;&gt;Finally&lt;/h2&gt;
				&lt;p&gt;Now then, why did I migrate my website build to GitHub Actions, if both Travis CI and CircleCI are running perfectly?&lt;/p&gt;
				&lt;p&gt;I chose so for the following reasons:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;It’s free for public repositories, with unlimited total usage. One rarely hits the total usage quota, however, even with CircleCI, which has a monthly limit of 1,000 total run minutes.
				&lt;ul&gt;
				&lt;li&gt;CircleCI’s limit applies at account level, and does not differentiate between public and private repositories.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Better runtime environments, except for CPU power, which is only slightly slower that that on CircleCI.
				&lt;ul&gt;
				&lt;li&gt;Boots faster, runs faster, more memory&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;It’s provided by GitHub and hosted by Microsoft Azure, which may be more trustable than Travis CI and CircleCI for some users.&lt;/li&gt;
				&lt;li&gt;One less external service to depend on. No more need to log into a separate website to review logs.&lt;/li&gt;
				&lt;li&gt;… and more&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;The primary downside compared to Travis CI is increased build config complexity, but on the other hand it adds more flexibility to your build patterns, which reciprocates.&lt;/p&gt;
				&lt;p&gt;But the most important thing to note is that whatever others tell, you should try and find the one most suitable for you.&lt;/p&gt;
				&lt;div class=&quot;footnotes&quot; role=&quot;doc-endnotes&quot;&gt;
				&lt;ol&gt;
				&lt;li id=&quot;fn:1&quot; role=&quot;doc-endnote&quot;&gt;
				&lt;p&gt;https://github.community/t/github-action-not-triggering-gh-pages-upon-push/16096 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot; role=&quot;doc-backlink&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
				&lt;/li&gt;
				&lt;/ol&gt;
				&lt;/div&gt;</content><author><name>iBug</name></author><category term="development" /><category term="github-pages" /><summary type="html">Why use an external service when there's an in-house GitHub service?</summary></entry><entry><title type="html">Working against WordPress DeBlocker plugin</title><link href="https://ibug.io/blog/2020/08/work-against-wordpress-deblocker/" rel="alternate" type="text/html" title="Working against WordPress DeBlocker plugin" /><published>2020-08-13T00:00:00+00:00</published><updated>2020-08-13T02:10:39+00:00</updated><id>https://ibug.io/blog/2020/08/work-against-wordpress-deblocker</id><content type="html" xml:base="https://ibug.io/blog/2020/08/work-against-wordpress-deblocker/">&lt;p&gt;I’ll go straight to the solution (keep in mind that it’s considerably primitive, so use at your own risk) with code attached below. It’s a &lt;a href=&quot;https://www.tampermonkey.net/&quot;&gt;Tampermonkey&lt;/a&gt; userscript.&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @name         WordPress Anti-DeBlocker&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @version      0.1&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @author       iBug&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @match        *://*/*&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @license      MIT&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @grant        none&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @run-at       document-start&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// a = event name (string), b = function&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/dev&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\W?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;tool/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Blocked function. Code below&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;})(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;encounter&quot;&gt;Encounter&lt;/h2&gt;
				&lt;p&gt;I was searching for some resources when I came across a WordPress site. I had both ABP and uBO installed, and the website flashed blood red. So it was an ad blocker detector, easy peasy, and I hit Ctrl-Shift-I, only to find that it didn’t work. I tried F12 and found it was blocked, too, so there must be other methods I could resort too.&lt;/p&gt;
				&lt;h2 id=&quot;getting-f12-developer-tools&quot;&gt;Getting F12 Developer Tools&lt;/h2&gt;
				&lt;p&gt;If I can’t open Dev Tools with the page showing, I can always have it open &lt;em&gt;before&lt;/em&gt; the page loads. I had a sense this would be a tough opponent, so I opened an incognito window, enabled ad blocker extensions, opened Dev Tools, and navigated to the page.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/debugger-pause.png&quot; alt=&quot;debugger paused&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Whoa, it’s paused with the debugger, and when I go to the Elements tab, I found that the script had removed the whole DOM, leaving only the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt; tag behind:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/empty-dom.png&quot; alt=&quot;empty dom&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;That was &lt;strong&gt;OUTRAGEOUS&lt;/strong&gt;! It’s the most offensive script I’ve seen. I must track it down and counter it.&lt;/p&gt;
				&lt;p&gt;Looking at the &lt;strong&gt;Network&lt;/strong&gt; tab, there are so many scripts that I probably can’t inspect them one-by-one.&lt;/p&gt;
				&lt;p&gt;When I reload the page, I found that my whole Chrome went unresponsive, and I had to stop it from Task Manager. What a job they’ve done!&lt;/p&gt;
				&lt;h2 id=&quot;locating-the-script&quot;&gt;Locating the script&lt;/h2&gt;
				&lt;p&gt;One (and the only one so far) key behavior is its removal of the whole DOM, so if I could track that change, I could very accurately locate the offending script.&lt;/p&gt;
				&lt;p&gt;I opened Chrome in incognito mode again, and opened Dev Tools. I need to add a breakpoint on change to the root element, and I have to add the watcher after opening the page, so the first thing to do is to add a breakpoint at page load. I navigated to the &lt;strong&gt;Sources&lt;/strong&gt; tab, under &lt;strong&gt;Event Listener Breakpoints&lt;/strong&gt;, I checked &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;load&lt;/code&gt;:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/breakpoint-load.png&quot; alt=&quot;breakpoint load&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Then I navigated to the page, and an innocent script hit the breakpoint.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/break-at-load.png&quot; alt=&quot;break at load&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;That wasn’t too much of a problem, as I could then switch to the &lt;strong&gt;Elements&lt;/strong&gt; tab and add a breakpoint onto the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/set-breakpoint-on-html.png&quot; alt=&quot;set breakpoint on html&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The next task would be a bit boring, to keep on continuing the debugger while keeping an eye on what’s running.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/continue-execution.png&quot; alt=&quot;continue execution&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;The same innocent script, along with jQuery, showed up around 20 times, before the first suspicious script poped up:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/first-suspicious-script.png&quot; alt=&quot;first suspicious script&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;It was named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ads.min.js&lt;/code&gt; and was pretty short, as shown below (formatted):&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;use strict&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;createElement&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;mdp-deblocker-ads&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;style&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;display&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;none&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;body&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;appendChild&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;So I let it continue.&lt;/p&gt;
				&lt;p&gt;It quickly became a tedious task, stepping through all those jQuery and analytics script with nothing interesting.&lt;/p&gt;
				&lt;p&gt;Recalling that the offending script would remove both &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;head&amp;gt;&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;body&amp;gt;&lt;/code&gt; elements, I changed the breakpoint to them:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/set-breakpoint-on-body.png&quot; alt=&quot;set breakpoint on body&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;It turned out that I did the right thing. Another suspicious script showed up very quickly:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/offending-script-found.png&quot; alt=&quot;offending script found&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;It’s minified and had a jumbled file name. Scrolling the line to the beginning shows a heavy hint that it’s the one I was looking for:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/start-of-script.png&quot; alt=&quot;start of script&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Its comments pretty much told it all: &lt;em&gt;Most effective way to detect ad blockers&lt;/em&gt;, so I pulled it out and took a closer look.&lt;/p&gt;
				&lt;p&gt;It wasn’t hard to find some traits, for example, the following code is a part of it:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checkStatus&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Dev tools checker&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h2 id=&quot;tackling-the-vicious-script&quot;&gt;Tackling the vicious script&lt;/h2&gt;
				&lt;p&gt;The script starts with an event listener:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
				&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// function body&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
				&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;As I’m not particularly interested in disassembling the whole thing (you can always run it through a formatter to get a better idea of it), I decided to monkey-patch the event listener.&lt;/p&gt;
				&lt;p&gt;Because the script runs at a rather early stage of page load, I need to do something &lt;em&gt;even faster&lt;/em&gt;, so it would be nice to run the “solution script” as soon as the page is “created”. This can be done using Tampermonkey’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@run-on document-start&lt;/code&gt; directive:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @name         WordPress Anti-DeBlocker&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @run-at       document-start&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now I could write my logic and check what’s being executed. Let’s get &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;document.addEventListener&lt;/code&gt; hooked up first:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Looking at &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener&quot;&gt;the function prototype&lt;/a&gt;, it may have up to 4 arguments, so the patched function also needs to have 4:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{};&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It’s not a good naming choice, but neither is it a must to have good coding styles here, so I’m going to pass it over here.&lt;/p&gt;
				&lt;p&gt;As shown by the code, it adds a listener to the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;DOMContentLoaded&lt;/code&gt; event, with its code containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;dev tools checker&lt;/code&gt;. Knowing that the source code of a function can be retrieved with &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/toString&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;toString&lt;/code&gt;&lt;/a&gt; method, I easily composed the following code:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;addEventListener&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// a = event name (string), b = function&lt;/span&gt;
				&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;===&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;DOMContentLoaded&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;match&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/dev&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\W?&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;tool/i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;Blocked function. Code below&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;code&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;addEventListener_orig&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The idea is simple: If something matching the known patterns of the target script, interrupt and deny its code.&lt;/p&gt;
				&lt;p&gt;The last thing is I need this countermeasure to run on all sites, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@match&lt;/code&gt; directive should be the wildest wildcard:&lt;/p&gt;
				&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;// ==UserScript==&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @name         WordPress Anti-DeBlocker&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @match        *://*/*&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// @run-at       document-start&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;// ==/UserScript==&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now save the userscript and reload the page. I knew that my solution worked as soon as I saw the expected output:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/wp-anti-deblocker/captured-script.png&quot; alt=&quot;captured script&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Well done, iBug! You’ve just got another achievement for defeating this plugin!&lt;/p&gt;
				&lt;h2 id=&quot;the-bottom-line&quot;&gt;The bottom line&lt;/h2&gt;
				&lt;p&gt;While ads could be an important income for websites, there are users who detest them. Compelling every single and last user to disable their ad blocker for you is blunt and abusive. If you really want every piece of crummy money from your nasty ads, go fuck yourself.&lt;/p&gt;
				&lt;p&gt;Developer always wins.&lt;/p&gt;
				&lt;p&gt;I’ve uploaded the sample to &lt;a href=&quot;https://download.ibugone.com/wp-deblocker-2.0.3.js&quot;&gt;https://download.ibugone.com/wp-deblocker-2.0.3.js&lt;/a&gt; for analysis (run it through VSCode formatter or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;clang-format&lt;/code&gt; first).&lt;/p&gt;
				&lt;p&gt;Finally, &lt;a rel=&quot;nofollow noreferrer&quot; href=&quot;https://1.envato.market/deblocker&quot;&gt;here’s the link&lt;/a&gt; to the horrible WordPress plugin, if you want to find out for yourself.&lt;/p&gt;</content><author><name>iBug</name></author><category term="web" /><summary type="html">I’ll go straight to the solution (keep in mind that it’s considerably primitive, so use at your own risk) with code attached below. It’s a Tampermonkey userscript.</summary></entry><entry><title type="html">Enabling better “Related Posts” with Jekyll</title><link href="https://ibug.io/blog/2020/05/jekyll-better-related-posts/" rel="alternate" type="text/html" title="Enabling better “Related Posts” with Jekyll" /><published>2020-05-27T00:00:00+00:00</published><updated>2020-08-13T11:26:46+00:00</updated><id>https://ibug.io/blog/2020/05/jekyll-better-related-posts</id><content type="html" xml:base="https://ibug.io/blog/2020/05/jekyll-better-related-posts/">&lt;p&gt;There’s a less-known feature of Jekyll that populates &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;related_posts&lt;/code&gt; correctly with “related” posts, instead of the 10 latest posts when it’s disabled by default.&lt;/p&gt;
				&lt;h2 id=&quot;lsi&quot;&gt;LSI&lt;/h2&gt;
				&lt;p&gt;Back in October 2019 I gave this feature a try, but the first obstacle was that there weren’t any documentations around it. I had to struggle through random Google results to find the solution.&lt;/p&gt;
				&lt;p&gt;Fortunately, it wasn’t hidden or scattered around so terribly. Jekyll has an official plugin &lt;a href=&quot;https://github.com/jekyll/classifier-reborn&quot;&gt;classifier-reborn&lt;/a&gt; to enable &lt;a href=&quot;https://jekyll.github.io/classifier-reborn/lsi&quot;&gt;LSI (latent semantic indexing)&lt;/a&gt;, so one can simply install the gem and get Jekyll’s LSI feature running. The recommended way has always been adding requirements to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;, like this:&lt;/p&gt;
				&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;gem&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;classifier-reborn&quot;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;And then refresh your dependency installation with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;. You can try building your site again with LSI enabled by appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--lsi&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;jekyll build&lt;/code&gt; command:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll build &lt;span class=&quot;nt&quot;&gt;--lsi&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Sit back and make yourself a cup of coffee, because what follows is going to &lt;em&gt;really slow&lt;/em&gt;. For every 10 posts with 1000 words each, you’re going to have to wait for a minute for Jekyll to build your site (measured on GitHub Actions). This grows terribly as for larger sites, each build could take more than 10 minutes.&lt;/p&gt;
				&lt;p&gt;The build time scared me off when I first tried with it.&lt;/p&gt;
				&lt;h2 id=&quot;improving-the-speed&quot;&gt;Improving the speed&lt;/h2&gt;
				&lt;p&gt;Fortunately, there is GNU Scientific Library to help speed up the process. There’s also a Ruby wrapper &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gsl&lt;/code&gt; for this.&lt;/p&gt;
				&lt;p&gt;To fully utilize the enhancements from GSL, a native library is required. On Ubuntu / Debian, this can be done by installing the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;libgsl-dev&lt;/code&gt;. On macOS, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;brew install gsl&lt;/code&gt; will suffice. Then you can proceed to adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;gem &quot;gsl&quot;&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Gemfile&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;The results are delighting: GSL reduced the build time of this website from 75s to 3s on my local machine (i7-8850H, Ubuntu 20.04), and from nearly 3 minutes to 8 seconds on GitHub Actions.&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;note&quot;&gt;&lt;i class=&quot;fas fa-lightbulb&quot;&gt;&lt;/i&gt; Note&lt;/h4&gt;
				&lt;p&gt;GitHub Pages doesn’t support LSI natively. You’ll have to build your site with a CI service (like GitHub Actions) and deploy manually.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Happy Jekylling!&lt;/p&gt;
				&lt;p&gt;Special thanks to this article &lt;a href=&quot;https://frankindev.com/2019/11/21/enable-related-posts-with-lsi/&quot;&gt;https://frankindev.com/2019/11/21/enable-related-posts-with-lsi/&lt;/a&gt;.&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><category term="jekyll" /><summary type="html">There’s a less-known feature of Jekyll that populates related_posts correctly with “related” posts, instead of the 10 latest posts when it’s disabled by default.</summary></entry><entry><title type="html">Use RSA CA Certificates with OpenSSH 8.2</title><link href="https://ibug.io/blog/2020/04/ssh-8.2-rsa-ca/" rel="alternate" type="text/html" title="Use RSA CA Certificates with OpenSSH 8.2" /><published>2020-04-07T00:00:00+00:00</published><updated>2020-08-13T11:26:46+00:00</updated><id>https://ibug.io/blog/2020/04/ssh-8.2-rsa-ca</id><content type="html" xml:base="https://ibug.io/blog/2020/04/ssh-8.2-rsa-ca/">&lt;p&gt;OpenSSH 8.2 is coming to the latest Long-Term Service release of Ubuntu, Focal Fossa (20.04), and has some breaking changes for users using &lt;a href=&quot;/p/30&quot;&gt;an SSH Certificate Authority&lt;/a&gt;.&lt;/p&gt;
				&lt;p&gt;With OpenSSH 8.1 or older, the default certificate type when signing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt; is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt;, although ECDSA- and SHA2-based algorithms have been supported since OpenSSH 5.7. As cited in the &lt;a href=&quot;https://www.openssh.com/txt/release-8.2&quot;&gt;release notes&lt;/a&gt;,&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;p&gt;It is now possible[1] to perform chosen-prefix attacks against the SHA-1 hash algorithm for less than USD$50K.&lt;/p&gt;
				&lt;p&gt;&lt;sup&gt;[1] &lt;em&gt;SHA-1 is a Shambles: First Chosen-Prefix Collision on SHA-1 and Application to the PGP Web of Trust&lt;/em&gt;&lt;br /&gt;
				Leurent, G and Peyrin, T (2020) &lt;a href=&quot;https://eprint.iacr.org/2020/014.pdf&quot;&gt;https://eprint.iacr.org/2020/014.pdf&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;So the SHA-1 based RSA certificate algorithm is no longer considered secure. As a result,&lt;/p&gt;
				&lt;blockquote&gt;
				&lt;ul&gt;
				&lt;li&gt;ssh(1), sshd(8), ssh-keygen(1): this release removes the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; (RSA/SHA1) algorithm from those accepted for certificate signatures (i.e. the client and server &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASignatureAlgorithms&lt;/code&gt; option) and will use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsa-sha2-512&lt;/code&gt; signature algorithm by default when the ssh-keygen(1) CA signs new certificates.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/blockquote&gt;
				&lt;p&gt;The immediate effect is, when you attempt to log in to a host that presents an RSA/SHA1 certificate, instead of logging in successfully, SSH will complain with the following message:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;check_host_cert: certificate signature algorithm ssh-rsa: signature algorithm not supported
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;and of course, you’re again asked to trust the host key even if you’ve already trusted the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@cert-authority&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;This can be particularly annoying in larger organizations where the deployment of RSA/SHA1 certificates has spanned everywhere, and OpenSSH 8.2 essentially just broke them all.&lt;/p&gt;
				&lt;p&gt;Rest assured, there’s a way to make everything go back to normal once more. But as suggested by OpenSSH, &lt;strong&gt;you should not rely on this and should instead move away from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; certificates soon&lt;/strong&gt;.&lt;/p&gt;
				&lt;h2 id=&quot;fix&quot;&gt;Bring back the compatibility&lt;/h2&gt;
				&lt;p&gt;As described above, the value &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; has been dropped from the default list of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASignatureAlgorithms&lt;/code&gt;, though as of April 8, the man page for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh_config(5)&lt;/code&gt; contains a small mistake, which claims the default value of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CASignatureAlgorithms&lt;/code&gt; is as follows:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CASignatureAlgorithms ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The actual value, of course, is the same as the above list with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa&lt;/code&gt; stripped off, and all you need to do is to add it back.&lt;/p&gt;
				&lt;p&gt;If you just want to fix this for yourself, you can add the following lines to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;~/.ssh/config&lt;/code&gt; file:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Host *
				CASignatureAlgorithms ecdsa-sha2-nistp256,ecdsa-sha2-nistp384,ecdsa-sha2-nistp521,ssh-ed25519,rsa-sha2-512,rsa-sha2-256,ssh-rsa
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If you want to fix this for all users on a system, you can add the same lines to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/ssh_config&lt;/code&gt; instead, which will affect all &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh&lt;/code&gt; commands run on that system. &lt;strong&gt;Remember this is still not recommended in favor of upgrating the signature algorithm.&lt;/strong&gt;&lt;/p&gt;
				&lt;h2 id=&quot;new-certificate&quot;&gt;Sign new certificates&lt;/h2&gt;
				&lt;div class=&quot;notice--success&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;good-news&quot;&gt;&lt;i class=&quot;fas fa-fw fa-check&quot;&gt;&lt;/i&gt; Good news&lt;/h4&gt;
				&lt;p&gt;You don’t have to generate a new CA and deploy it everywhere. You can still use your RSA private key to generate new certificates for your machines, though it does require a little research first.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Let’s start by looking at the man page for ssh-keygen(1).&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; ca_key &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; certificate_identity &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-U&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-D&lt;/span&gt; pkcs11_provider] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; principals] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-O&lt;/span&gt; option] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-V&lt;/span&gt; validity_interval] &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;-z&lt;/span&gt; serial_number] file ...
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;It doesn’t look like there’s a way to control the certificate algorithm. But hold on, have you tried the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt; option that appears in many other subcommands…?&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; ~/.ssh/ca &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; Example &lt;span class=&quot;nt&quot;&gt;-t&lt;/span&gt; rsa-sha2-256 id_rsa.pub
				&lt;span class=&quot;c&quot;&gt;#                                  ^^^^^^^^^^^^^^^&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;This will generate a new certificate at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa-cert.pub&lt;/code&gt;. You might want to examine it at once, and you might probably be disappointed to see that it still begins with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-rsa-cert-v01@openssh.com&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;&lt;strong&gt;That simply doesn’t matter.&lt;/strong&gt; To examine a certificate, you should use the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -L&lt;/code&gt; command:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-Lf&lt;/span&gt; id_rsa-cert.pub
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;… and check its output:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;id_rsa-cert.pub:
				Type: ssh-rsa-cert-v01@openssh.com user certificate
				Public key: RSA-CERT SHA256:yP2N3uawwSuoJdww2miEYrsGuBictGYJ6VmkdhvtYcg
				Signing CA: RSA SHA256:yP2N3uawwSuoJdww2miEYrsGuBictGYJ6VmkdhvtYcg (using rsa-sha2-256)
				Key ID: &quot;Example&quot;
				Serial: 0
				Valid: forever
				Principals: (none)
				Critical Options: (none)
				Extensions:
				permit-X11-forwarding
				permit-agent-forwarding
				permit-port-forwarding
				permit-pty
				permit-user-rc
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Notice how the fourth line reads &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;using rsa-sha2-256&lt;/code&gt;? It’s now signed with a different algorithm that’s not considered deprecated anymore, which means it’s ready to deploy.&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;tip&quot;&gt;&lt;i class=&quot;fas fa-fw fa-lightbulb&quot;&gt;&lt;/i&gt; Tip&lt;/h4&gt;
				&lt;p&gt;OpenSSH 8.2 defaults to using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;rsa-sha2-256&lt;/code&gt; algorithm when signing new certificates with an RSA private key, so the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-t&lt;/code&gt; option is only necessary if you’re using OpenSSH 8.1 or older.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;You can try running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -L&lt;/code&gt; on one of your old certificates to see how SSH describes it. This is left as a small quiz for you to figure out for yourself.&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><category term="linux" /><category term="ssh" /><summary type="html">OpenSSH 8.2 is coming to the latest Long-Term Service release of Ubuntu, Focal Fossa (20.04), and has some breaking changes for users using an SSH Certificate Authority.</summary></entry><entry><title type="html">3 ways to use MySQL / MariaDB CLI without password</title><link href="https://ibug.io/blog/2020/02/use-mysql-cli-without-password/" rel="alternate" type="text/html" title="3 ways to use MySQL / MariaDB CLI without password" /><published>2020-02-04T00:00:00+00:00</published><updated>2020-02-11T12:41:43+00:00</updated><id>https://ibug.io/blog/2020/02/use-mysql-cli-without-password</id><content type="html" xml:base="https://ibug.io/blog/2020/02/use-mysql-cli-without-password/">&lt;p&gt;For all of us who are learning to use or developing with MySQL or MariaDB, it’s a common task to manually log in to the database for inspection. This is usually done with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; command line client, and for sure it’s cumbersome to log in to the database using your application’s credentials. For convenience purposes, you would like to make your life easy by configuring the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; CLI to &lt;strong&gt;NOT&lt;/strong&gt; prompt you for a password each time. Here are three ways to do it on Linux.&lt;/p&gt;
				&lt;p&gt;(This may work on BSD and macOS as well, but I haven’t tested.)&lt;/p&gt;
				&lt;h2 id=&quot;method-1-use-sudo&quot;&gt;Method 1: Use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt;&lt;/h2&gt;
				&lt;p&gt;By default, the local root user can log in to MySQL or MariaDB without password, so you can just use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo mysql&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt;, and expect everything to work. Of course, this depends on your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sudo&lt;/code&gt; to not ask you for a password, or you’ll still have to enter one for the root privilege.&lt;/p&gt;
				&lt;p&gt;You can go one step further by adding &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;alias mysql='sudo mysql'&lt;/code&gt; to your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; or whatever shell you’re using, but this is still a bit hackish, and IMO is more a workaround than a solution, so read on before proceeding.&lt;/p&gt;
				&lt;h2 id=&quot;method-2-use-a-password-and-remember-it-somewhere&quot;&gt;Method 2: Use a password and remember it somewhere&lt;/h2&gt;
				&lt;p&gt;The second option is to use a password, and let it be “automatically supplied” in some other way.&lt;/p&gt;
				&lt;p&gt;First, create a database user for yourself. Don’t forget to replace &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibug&lt;/code&gt; with your username.&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;BY&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'some_password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now you can log in to MySQL or MariaDB using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -uibug -p'some password'&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;You’re probably urged to add that as an alias in your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt;, but hold on again, that’s the wrong way to do it. In case your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.bashrc&lt;/code&gt; is readable by others, you risk exposing your password. Also, in case you want to log in as another user some time later, you may mess things up because of the alias expansion.&lt;/p&gt;
				&lt;p&gt;The correct way to store the password for yourself is to write it in a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.my.cnf&lt;/code&gt; under your home directory. Its content should look like this:&lt;/p&gt;
				&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[client]&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;ibug&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;some_password&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Remember to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;chmod 600&lt;/code&gt; on it so no one else reads it. You can now try running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; directly, and it’ll read your username and password from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.my.cnf&lt;/code&gt; without prompting you for anything.&lt;/p&gt;
				&lt;p&gt;But again, if you use a weak password and someone manages to guess it, you still risk exposing your whole MySQL database to them.&lt;/p&gt;
				&lt;p&gt;Think how the root user on your system logs in to MySQL directly - it’s safe and secure, because you can’t log in without password using the root user (unless you’re running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; as root, but not &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -uroot -p&lt;/code&gt; as a regular user). The good news is, &lt;em&gt;you&lt;/em&gt; can replicate this setup for yourself! So read on for the last and perfect solution.&lt;/p&gt;
				&lt;h2 id=&quot;method-3-use-unix-authentication&quot;&gt;Method 3: Use Unix authentication&lt;/h2&gt;
				&lt;p&gt;A bit of background first. Like how one can get the address and port of other end of a TCP or UDP socket, one can also get the connector information of the other end of a unix socket, namely, the process ID, user ID and group ID (see &lt;a href=&quot;http://man7.org/linux/man-pages/man7/unix.7.html&quot; title=&quot;unix(7)&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man 7 unix&lt;/code&gt;&lt;/a&gt;, look for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;SCM_CREDENTIALS&lt;/code&gt;).&lt;/p&gt;
				&lt;p&gt;When you run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; on your local machine, it will try to connect to the MySQL server using a unix socket located at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/var/run/mysqld/mysqld.sock&lt;/code&gt;, and this way the MySQL server will know who it is trying to connect. This is exactly how MySQL identifies the local root user: The root user won’t have the same access if it tries connecting via TCP (i.e. &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -h 127.0.0.1&lt;/code&gt;).&lt;/p&gt;
				&lt;p&gt;To let MySQL recognize you using unix socket magic, you can use the following query to create your user:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;If you have already created a user, you can change its authentication method by simply replacing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;CREATE&lt;/code&gt; with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ALTER&lt;/code&gt; in the above query:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;ALTER&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h3 id=&quot;mariadb-makes-a-difference-here&quot;&gt;&lt;i class=&quot;fas fa-exclamation-circle&quot;&gt;&lt;/i&gt; MariaDB makes a difference here!&lt;/h3&gt;
				&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/MariaDB&quot;&gt;MariaDB&lt;/a&gt;, a community fork of Oracle MySQL, uses a similar query for unix socket authentication:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;--                                        ^^^^^^^^^^^^^^^&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;p&gt;Better yet, MariaDB supports user creation with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRANT&lt;/code&gt; query, so the first two queries can be merged into one:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix_socket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;/div&gt;
				&lt;p&gt;After the user is set up properly, use the same &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;GRANT&lt;/code&gt; query to grant access to yourself.&lt;/p&gt;
				&lt;p&gt;Now you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; to manage your whole database without being prompted for password. You can safely delete &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.my.cnf&lt;/code&gt; if you created it following Method 2 and you don’t have other options in it. You can also try using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql -u&amp;lt;your username&amp;gt;&lt;/code&gt; under another user and see it fail, to ensure that only &lt;em&gt;you&lt;/em&gt; can access the database directly.&lt;/p&gt;
				&lt;h2 id=&quot;-creating-and-granting-access-to-more-users&quot;&gt;&lt;i class=&quot;fas fa-lightbulb&quot;&gt;&lt;/i&gt; Creating and granting access to more users&lt;/h2&gt;
				&lt;p&gt;If you want to create more users with your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysql&lt;/code&gt; command line, you’ll probably see this message:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ERROR 1045 (28000): Access denied for user 'ibug'@'localhost' (using password: YES)
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;This is because you haven’t granted yourself &lt;em&gt;the privilege to grant&lt;/em&gt;, or in other words, your privilege isn’t “redistributable”.&lt;/p&gt;
				&lt;p&gt;You can set the privileges again, but with the privilege to “redistribute” your access to more users, with the following query:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Similarly, the one-liner for MariaDB looks like this:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ALL&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;TO&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'ibug'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'localhost'&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;IDENTIFIED&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIA&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unix_socket&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;WITH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;GRANT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;OPTION&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;FLUSH&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;PRIVILEGES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Both MySQL and MariaDB requires “flushing” after any privilege assignment is altered.&lt;/p&gt;
				&lt;p&gt;You can then create more users with your passwordless access, and play around with MySQL to fulfill your curiosity.&lt;/p&gt;
				&lt;p&gt;And that concludes this tutorial. Cheers!&lt;/p&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="mysql" /><summary type="html">For all of us who are learning to use or developing with MySQL or MariaDB, it’s a common task to manually log in to the database for inspection. This is usually done with the mysql command line client, and for sure it’s cumbersome to log in to the database using your application’s credentials. For convenience purposes, you would like to make your life easy by configuring the mysql CLI to NOT prompt you for a password each time. Here are three ways to do it on Linux.</summary></entry><entry><title type="html">High-performance mass web crawling on AWS</title><link href="https://ibug.io/blog/2019/12/mass-crawl-douban-with-aws/" rel="alternate" type="text/html" title="High-performance mass web crawling on AWS" /><published>2019-12-28T00:00:00+00:00</published><updated>2020-08-13T11:26:46+00:00</updated><id>https://ibug.io/blog/2019/12/mass-crawl-douban-with-aws</id><content type="html" xml:base="https://ibug.io/blog/2019/12/mass-crawl-douban-with-aws/">&lt;p&gt;The 3rd-and-last experiment of course &lt;em&gt;Web Information Processing and Application&lt;/em&gt; required us to create a recommendation engine, and “predict” the rating (1-5 stars) for 4M user-item pairs based on the training data of 9M user-item pairs and a social network.&lt;/p&gt;
				&lt;p&gt;The interesting part is, all user and rating data are real, i.e. unmasked. This makes it possible to, instead of playing nicely by doing data analysis, crawl the target data directly, bypassing the aim of the experiment to learn about recommendation systems, which is exactly the way I chose and I’m going to describe in this article.&lt;/p&gt;
				&lt;p&gt;To make things challenging, the target website, &lt;a href=&quot;https://www.douban.com/&quot;&gt;Douban&lt;/a&gt;, has a moderate level of anti-spider techniques in place. This makes it impossible to just submit a truckload of requests hoping to retrieve all data desired, but more advanced technologies and cleverer tactics are mandatory before pulling it off.&lt;/p&gt;
				&lt;h2 id=&quot;part-1&quot;&gt;Part 1: Scrapy and ScrapingHub&lt;/h2&gt;
				&lt;p&gt;Previously I’ve done crawlers using &lt;a href=&quot;https://2.python-requests.org/&quot;&gt;requests&lt;/a&gt; + &lt;a href=&quot;https://www.crummy.com/software/BeautifulSoup/&quot;&gt;Beautiful Soup&lt;/a&gt;, but this time under suggestions from my roommate, I decided to try it out with &lt;a href=&quot;https://scrapy.org/&quot;&gt;Scrapy&lt;/a&gt;, a said-to-be-great web crawling framework.&lt;/p&gt;
				&lt;p&gt;Scrapy is a framework extremely easy to start with. I followed the guide on Scrapy’s website and wrote less than 30 lines of Python (&lt;a href=&quot;https://github.com/iBug/douban-spider/commit/8aead82&quot;&gt;commit&lt;/a&gt;), and the first version of my spider was ready to go.&lt;/p&gt;
				&lt;p&gt;It didn’t take too long before I picked up on Douban’s anti-spider techniques. My server’s IP was banned (fortunately, only temporarily) and all requests to Douban were getting 403 responses.&lt;/p&gt;
				&lt;p&gt;I fortuitously recalled that GitHub Student Pack provides an offer from &lt;a href=&quot;https://scrapinghub.com/&quot;&gt;ScrapingHub&lt;/a&gt;, the company behind Scrapy, containing one scraper unit, for free forever. Following their guide on deployment, I asked my teammate to modify my spider to adopt Scrapy’s project layout (&lt;a href=&quot;https://github.com/iBug/douban-spider/compare/cecbcfb..8eb1ff1&quot;&gt;commit&lt;/a&gt;), redeemed the Student Pack offer, and deployed my first scraper project onto ScrapingHub cloud.&lt;/p&gt;
				&lt;figure&gt;
				&lt;img src=&quot;/image/scrapinghub.png&quot; alt=&quot;ScrapingHub results&quot; /&gt;
				&lt;figcaption&gt;
				My job history on ScrapingHub, all of which are for this experiment
				&lt;/figcaption&gt;
				&lt;/figure&gt;
				&lt;p&gt;ScrapingHub has forced AutoThrottle enabled for all jobs, so my first SH job survived for longer before it started receiving 403 responses. Looking at the stats, the job maintained its position for about 40 minutes, before signals of having its IP banned emerged. I updated the scraper a few times to include detections for more variations of indications of an IP ban, but never made it over an hour. And because I only attempted to avoid the IP ban by throttling and detecting, the actual “targets” contained in the code remained the same, which accounted for high duplication in crawled results in the first few runs, which in turn led to a quick drop in the increase of the submitted result (of this course experiment).&lt;/p&gt;
				&lt;p&gt;Recalling that I had spare promotional credits from AWS Educate, I came up with the idea of utilizing the large IP pool of AWS, which has another advantage of the ease to swap out a banned one.&lt;/p&gt;
				&lt;h2 id=&quot;part-2&quot;&gt;Part 2: Expansion onto AWS, distributed crawling with centralized management&lt;/h2&gt;
				&lt;p&gt;The high duplication rate of results from the first few runs on ScrapingHub was alarming: I knew that I wouldn’t make any real success if I didn’t build a centralized job dispatcher and data collector, so the first thing before moving onto AWS is to create a control center.&lt;/p&gt;
				&lt;h3 id=&quot;central-management&quot;&gt;The central manager server&lt;/h3&gt;
				&lt;p&gt;I picked my favorite quickstarter framework Flask, implemented three simple interfaces &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;get job&lt;/code&gt;, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;update job&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;add result&lt;/code&gt;. To make things absolutely simple yet reliable, I picked SQLite as database backend because it’s easy to setup and query (&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; CLI is ready for use). I designed a “job pool” with push-pop architecture, where each job record is a to-be-crawled URL, and is deleted from the pool once it’s requested. The spider then crawls the page, send results back to the control center, as well as the “Next Page” link in the page back into the job pool if there is one. It didn’t even take a lot of effort to work this out (&lt;a href=&quot;https://github.com/iBug/douban-spider/blob/5da2c80/server.py&quot;&gt;code&lt;/a&gt;). The initial content in the “job pool” is Page 1 of all 20000 users, imported from experiment materials manually. A user is considered “done” if one of the pages in the chain doesn’t contain a “Next Page” link, meaning that the last page for this user has been reached.&lt;/p&gt;
				&lt;p&gt;Deployment is just as easy. I wrapped the server up in a Docker container, put it on my primary server on Amazon Lightsail (2 GB instance, has some other stuff running already), configured Nginx and added a DNS record on Cloudflare. Then I started the spider on my workstation and send a few initial requests, to test if everything proceeds as expected. After cleaning a few obvious bugs out of the code base, I started configuring a spider client.&lt;/p&gt;
				&lt;h3 id=&quot;distributed-crawlers&quot;&gt;Distributed crawler clients&lt;/h3&gt;
				&lt;p&gt;Because I planned to spawn a large amount of clients, I want to lower their cost (I have only $100 credits and can’t spend overbudget), so I started off with t3.nano instances as they offered twice the CPU power and slightly less expense over the previous-generation t2.nano. Configuring the environment wasn’t any difficult, as all that was needed was a deploy key and dependency packages. The former can be generated locally and have the public part uploaded to GitHub before copying the private part onto the spider server, and the latter is as easy as running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pip install&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;To make further deployment easier, I created a systemd service for the spider job, and added &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git pull&lt;/code&gt; before starting, so I only need to restart all servers and they’d pull in latest changes automatically. This is the service file that I wrote for this job.&lt;/p&gt;
				&lt;div class=&quot;language-ini highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;[Unit]&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;Description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;Douban Spider&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;After&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;multi-user.target&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;StartLimitIntervalSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;0&lt;/span&gt;
				&lt;span class=&quot;nn&quot;&gt;[Service]&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;Type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;simple&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;Restart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;always&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;RestartSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;1&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;ExecStartPre&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/bin/git -C /root/douban-spider pull&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;ExecStart&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/usr/local/bin/scrapy crawl doubanspider&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;WorkingDirectory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;/root/douban-spider/&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;TimeoutSec&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;5&lt;/span&gt;
				&lt;span class=&quot;nn&quot;&gt;[Install]&lt;/span&gt;
				&lt;span class=&quot;py&quot;&gt;WantedBy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;multi-user.target&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;I ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl daemon-reload&lt;/code&gt; to let systemd reload and be aware of my new service unit. I then started the spider with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl start spider.service&lt;/code&gt; and followed &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;journalctl -ef&lt;/code&gt; to check if the spider is running properly. To make the spider start automatically on boot, I ran &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl enable spider.service&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;As I was going to work around Douban’s IP limitations, I let the spider shut down itself when it discovers the IP ban (&lt;a href=&quot;https://github.com/iBug/douban-spider/commit/d4b7e20&quot;&gt;commit&lt;/a&gt;). This way by looking at the number of running instances on EC2 dashboard, I can determine how many IPs have been banned, and can get new IPs by starting them up again (rebooting doesn’t change instance IP, must stop completely and then start again).&lt;/p&gt;
				&lt;p&gt;I then rebooted the server once, and checked again to be 100% sure that everything is working as expected. Confirming that, I shut down the server and took a snapshot of it.&lt;/p&gt;
				&lt;figure&gt;
				&lt;img src=&quot;/image/spider-aws/snapshot.png&quot; alt=&quot;Snapshot of a spider instance&quot; /&gt;
				&lt;figcaption&gt;
				Information panel of a snapshot taken from a properly configured spider instance, ready for deployment
				&lt;/figcaption&gt;
				&lt;/figure&gt;
				&lt;p&gt;And as well, before launching new instances from this snapshot, an AMI (Amazon Machine Image) has to be registered based off of it, so I did one as well.&lt;/p&gt;
				&lt;figure&gt;
				&lt;img src=&quot;/image/spider-aws/ami.png&quot; alt=&quot;AMI registered from the above snapshot&quot; /&gt;
				&lt;figcaption&gt;
				Information panel of an Amazon Machine Image registered from the above snapshot
				&lt;/figcaption&gt;
				&lt;/figure&gt;
				&lt;p&gt;I Googled about AWS service limits, and acknowledged that there was a “20 instances per region” limit on EC2. So I attempted to create 20 t3.nano instances from the AMI, but was informed that the launch request would fail for exceeding another resource limit of 32 vCPUs. OK, that was fine, I decided to launch 12 instance first, and launch the remaining 8 with one vCPU disabled, resulting in a total of 32 vCPUs. Unfortunately it failed again for unknown reasons, though I managed to figure it out that disabled vCPUs still count, so I ended up creating t2.nano instances for the rest of them.&lt;/p&gt;
				&lt;p&gt;It wasn’t necessarily something bad, however, as T2 series of instances can burst to 100% CPU for 30 minutes after startup, which should cover most of its lifetime before it gets banned.&lt;/p&gt;
				&lt;div class=&quot;notice&quot;&gt;
				&lt;p&gt;I have forgotten how I realized this, but the current actuality is that there’s no more “instance limit”, but only a limit on total vCPU count. This is still effectively a limit on the number of instances you can have simultaneously, though you get to keep less if you run multi-core instances.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;My final setup was 32 t2.nano instances per region so as to maximize concurrency with maximum number of IPs available at once, while keeping cost low.&lt;/p&gt;
				&lt;h3 id=&quot;part-2-results&quot;&gt;Results&lt;/h3&gt;
				&lt;p&gt;As soon as I booted up my first batch of 32 t2.nano instances, I noticed an unexpected situation: The manager server is running at constant 100% CPU load. Because Lightsail instances are backed by EC2 T2 series, I knew it wouldn’t sustain for long before having its CPU throttled due to insufficient CPU credits. So I cut off two spider clients, and launched an m5.large instance for the control center.&lt;/p&gt;
				&lt;p&gt;Things went on smoothly for a while, and before the job pool depleted, I could gather 500k to 600k results (up to 30 per page). I re-created the pool from scratch a few times, shuffled it each time, and restarted the whole spider swarm. Every time I “refreshed” the database, I could gather another 500k to 600k results, and things went strange in the same mysterious way. The problem was, I estimated that there’d be a total of 30M results, so 500k to 600k was really a small portion.&lt;/p&gt;
				&lt;p&gt;It’s still delighting that the crawled data from the first few attempts improved the RMSE of our submission from 1.341 to 1.308, though the urgency of a revolutionary refresh also emerged.&lt;/p&gt;
				&lt;h2 id=&quot;part-3&quot;&gt;Part 3: Redesigned management architecture, fine-grained control, more robust and faster&lt;/h2&gt;
				&lt;p&gt;The first version of the spider swarm was successful to an extent, but a highly-managed framework was cumbersome to further enhancements. I decided to identify the limitations and look for alternatives.&lt;/p&gt;
				&lt;h3 id=&quot;limitations&quot;&gt;Limitations of the previous-generation spider swarm&lt;/h3&gt;
				&lt;ul&gt;
				&lt;li&gt;The first thing to emphasize is that Scrapy is too powerful and comprehensive to be flexible. I only want to make requests and get results as rapidly as possible.
				&lt;ul&gt;
				&lt;li&gt;Scrapy manages almost everything for you, including concurrency control and speed limiting, which is pretty much unwanted when I need to have fine-grained control over them.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;/li&gt;
				&lt;li&gt;Pool management was poor. “Jobs” can get lost if they aren’t sent back (pushed back) to the control center. This is most likely the primary cause for the quick depletion of the job pool after gathering ~500k results. (There was indeed a serious bug in the spider client, which I’ll talk about later on)&lt;/li&gt;
				&lt;li&gt;Unacceptably high CPU usage from the server application, which needs a serious reform as well. Looking at the screen of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;htop&lt;/code&gt;, I guess that a large portion of the usage is made by SQLite queries, as I was doing a high concurrency server application with millions of rows in the database. SQLite doesn’t suit this kind of workload, really.&lt;/li&gt;
				&lt;/ul&gt;
				&lt;p&gt;These barriers ought to be overcome one by one, so I started this revolution from the spider client.&lt;/p&gt;
				&lt;h3 id=&quot;new-spider-architecture&quot;&gt;Ditching Scrapy and reverting to requests + BeautifulSoup4&lt;/h3&gt;
				&lt;p&gt;Scrapy is an all-in-one comprehensive framework. You focus on extracting data from the fetched page, and Scrapy handles everything else for you. Unfortunately, this is a huge barrier for whoever wants to tune it in every aspect. It even handles 302 redirects, which takes quite some effort to disable. This is why I switched back to my original approach using requests to fetch content, and parse it with BeautifulSoup4. Paired with Python’s stock multithreading library, this new client easily achieved twice the speed of that of Scrapy. It’s surely possible to dig into Scrapy and tune it, but why waste that time and effort when it can be easily solved by switching away?&lt;/p&gt;
				&lt;p&gt;Previously when using Scrapy, I had to override its &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;start_requests&lt;/code&gt; method to fetch jobs from the server, and because Scrapy handles concurrency, I could not control how frequently a client fetches jobs, which was, to be honest, messy. With requests and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;threading&lt;/code&gt;, I have full control over concurrency, and I can reliably decide or predict how many jobs should be fetched by a client before it “exhausts”.&lt;/p&gt;
				&lt;h3 id=&quot;new-server-architecture&quot;&gt;Pre-computed job pool and MySQL&lt;/h3&gt;
				&lt;p&gt;Another problem of the previous generation of my spider swarm was that rapid draining of the job pool always occurred too soon (after fetching ~500k records). This was actually a bug.&lt;/p&gt;
				&lt;h4 id=&quot;unexpected-response&quot;&gt;One bad bug led to the failure of the previous swarm&lt;/h4&gt;
				&lt;p&gt;In my first few “durability tests”, I discovered that Douban would send either a 403 or a 302 response when it detects unusual traffic. The former was easy to detect, but with Scrapy, 302 redirects are handled automatically, and I spent more than half an hour Googling just to disable this behavior. With &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;requests&lt;/code&gt;, this is as simple as supplying &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;allow_redirect=False&lt;/code&gt; to the request method, which then enables the simplicity of checking the status code of the response.&lt;/p&gt;
				&lt;p&gt;The true failure was, Douban actually sends 200 responses occasionally, with the HTML body containing a single line of JavaScript that redirects to another page, with the browser’s information supplied. I didn’t realize this until I noticed that this second-generation swarm gradually stopped working completely, and SSH-ed into one of the spider servers, and checked the program log. Because I treated 200 responses as success, the spiders would only find that there was no data items and “Next Page” links in the returned page, and thinking that this “page chain” had been completed.&lt;/p&gt;
				&lt;h4 id=&quot;new-job-pool&quot;&gt;Pre-computed job pool&lt;/h4&gt;
				&lt;p&gt;Detecting this “new” kind of unwanted response was not hard, but it must be done. But the good thing is, I ditched the “pop-push” job pool design as well. This time I first ran a small bunch of spiders to crawl the Page 1 for all 20000 Douban users, extracted the total number of items from those pages, and computed the number of pages for each user, storing them into the database as the new job pool. No more jobs would be removed from the database, only marked as completed. This way I could easily discover failed jobs and re-enable them by flipping the “completed” flag manually by editing the database.&lt;/p&gt;
				&lt;h4 id=&quot;switching-to-mysql&quot;&gt;An RDBMS that scales&lt;/h4&gt;
				&lt;p&gt;The 1st-gen control center used SQLite as its database engine. SQLite is a lightweight, easy-to-start database. The problem is, it’s a single-file DB engine, and &lt;strong&gt;doesn’t scale&lt;/strong&gt;. I had millions of rows in the results table, and a large portion of responses when I try to query it using the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sqlite3&lt;/code&gt; CLI utility (for analysis purposes) are “&lt;em&gt;Error: database is locked&lt;/em&gt;”. The database also grows terribly, at more than 400 MB in size. Due to being constantly written to, I could even hardly make a copy of it without corruption. I had to do a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cp&lt;/code&gt; command for 10 times before I could have an intact copy of the database for copying back to my computer for future analysis.&lt;/p&gt;
				&lt;p&gt;SQLite isn’t the right tool for millions of records, really.&lt;/p&gt;
				&lt;p&gt;MySQL is a better database engine that’s widely used in production, and I have some experiences with it, so it became an apparent option to switch to it. As Debian provides MariaDB as the replacement for MySQL, installation was straightforward. I the modified the code to adopt the new database.&lt;/p&gt;
				&lt;p&gt;A few points to note:&lt;/p&gt;
				&lt;ul&gt;
				&lt;li&gt;Debian and its derivatives (including Ubuntu) uses the PyPI package &lt;a href=&quot;https://pypi.org/project/mysqlclient/&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;mysqlclient&lt;/code&gt;&lt;/a&gt; to provide the package &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3-mysqldb&lt;/code&gt;. It’s compatible with the now-abandoned &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQLdb&lt;/code&gt; package. Any code written for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;MySQLdb&lt;/code&gt; should remain unchanged, because even the import line remains as &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import MySQLdb&lt;/code&gt; instead of &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;import mysqlclient&lt;/code&gt; (the latter will throw an &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ImportError&lt;/code&gt; for not finding the module).&lt;/li&gt;
				&lt;li&gt;The MySQL uses a connection-cursor architecture, so instead of calling &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.execute&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;db.fetch*&lt;/code&gt; methods directly (as is the case with Python’s stock SQLite library), a cursor must be created first, and then &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cursor.execute&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cursor.fetch*&lt;/code&gt; methods will be available. Similarly, cursors need separate closing than the DB connection itself.&lt;/li&gt;
				&lt;li&gt;
				&lt;p&gt;The painful thing is that SQLite uses the question mark &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?&lt;/code&gt; as placeholder for query data (&lt;a href=&quot;https://xkcd.com/327/&quot;&gt;NEVER join database queries&lt;/a&gt;), while MySQL uses &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%s&lt;/code&gt;. Compare the following code:&lt;/p&gt;
				&lt;div class=&quot;language-sql highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;SQLite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;n&quot;&gt;MySQL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;INSERT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;INTO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;records&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;VALUES&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
				&lt;p&gt;It was somewhat frustrating to hunt for all those question marks and replacing them with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;%s&lt;/code&gt;’s when you can’t use text-based find-and-replace. Still, though, I managed to get this work done.&lt;/p&gt;
				&lt;/li&gt;
				&lt;/ul&gt;
				&lt;h3 id=&quot;refresh-ip&quot;&gt;Continuous refresh of banned IPs&lt;/h3&gt;
				&lt;p&gt;As this time I made some changes to increase the aggregate crawl speed, it could be anticipated that IPs would be banned sooner than in the first generation, which rendered IP refreshing more important. I had already known that AWS provided an extensive REST API, as well as a powerful CLI utility &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt;.&lt;/p&gt;
				&lt;p&gt;I didn’t even need to install the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;aws&lt;/code&gt; CLI utility because it comes preinstalled on every AMI, so all that was needed was to create an IAM user and generate API credentials following the &lt;a href=&quot;https://docs.aws.amazon.com/cli/latest/userguide/cli-chap-configure.html&quot;&gt;AWS official documentation&lt;/a&gt;.&lt;/p&gt;
				&lt;p&gt;After figuring out all functionalities that I needed, I created a “runner script” that does everything automatically.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
				&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ap-northeast-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
				2&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'ap-southeast-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
				3&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'us-west-2'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
				4&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;REGION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'us-west-1'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$2&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in
				&lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'stop-instances'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
				2&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;ACTION&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'start-instances'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit &lt;/span&gt;1&lt;span class=&quot;p&quot;&gt;;;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;esac&lt;/span&gt;
				&lt;span class=&quot;nv&quot;&gt;INSTANCES&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;aws &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; text &lt;span class=&quot;nt&quot;&gt;--region&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REGION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ec2 describe-instances &lt;span class=&quot;nt&quot;&gt;--filters&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Name=instance-type,Values=t2.nano&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--query&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Reservations[].Instances[].InstanceId&quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;tr&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'[:space:]'&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;' '&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Instances: &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INSTANCES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-qiP&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'i-0[0-9a-f]+'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$INSTANCES&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then
				&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Running &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ACTION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; on &lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REGION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
				aws &lt;span class=&quot;nt&quot;&gt;--output&lt;/span&gt; json &lt;span class=&quot;nt&quot;&gt;--region&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$REGION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; ec2 &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$ACTION&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;--instance-ids&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$INSTANCES&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;The above script will attempt to list all spider instances (all of them are t2.nano), and depending on arguments, try to stop them and start them back up so they have new IPs to start with.&lt;/p&gt;
				&lt;p&gt;I then created a cron job that restarts each batch every hour, which looks like this:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;0,1 * * * * /root/job.sh 1 1
				2,3 * * * * /root/job.sh 1 2
				15,16 * * * * /root/job.sh 2 1
				17,18 * * * * /root/job.sh 2 2
				30,31 * * * * /root/job.sh 3 1
				32,33 * * * * /root/job.sh 3 2
				45,46 * * * * /root/job.sh 4 1
				47,48 * * * * /root/job.sh 4 2
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;This way a batch of instances will get new IPs every hour, effectively bypassing Douban’s IP limitations, which is another key to the success of the 2nd-gen spider swarm.&lt;/p&gt;
				&lt;h3 id=&quot;part-3-results&quot;&gt;Results&lt;/h3&gt;
				&lt;p&gt;With everything set up, I packed up a new AMI for the spider client, copied the AMI to 3 other AWS regions, and launched as many instances as possible, giving a total of 126 spider clients running simultaneously.&lt;/p&gt;
				&lt;p&gt;This new spider swarm achieved almost twice the speed of the old version, at a sustained rate of around 1,700 records per second, when the old version could only maintain a burst speed of 900 records per second, before quickly dropping to 500 records per second. What’s more satisfactory was that it was fault-tolerant, finally crawling 20.7M records (out of a total of 21.6M) before completely stopped working after around 12 hours.&lt;/p&gt;
				&lt;p&gt;The crawled data covered more than 90% of the test set of the experiment, and boosted the RMSE value of our submission from 1.304 to a whopping 0.546. We managed to make it one step further to 0.539 by adding the crawled data to our training set. For the record, the 2nd place, who also played with web spiders, only managed to get the RMSE value to 0.87. This is a great success.&lt;/p&gt;
				&lt;p&gt;On a side note, you probably shouldn’t attempt this if you don’t have credits on AWS. This 3-day journey through AWS with a spider swarm cost me an astonishing amount of US$44.96, with more than $30 spent on EC2 and more than $10 spent on traffic (AWS charges for traffic beyond 1 GB). Fortunately, I have them all covered by my remaining credits from AWS Educate, making this whole crawler project an enjoyable experience.&lt;/p&gt;
				&lt;h2 id=&quot;gallery&quot;&gt;Gallery&lt;/h2&gt;
				&lt;figure class=&quot;third &quot;&gt;
				&lt;a href=&quot;/image/spider-aws/instances.us-west-1.png&quot; title=&quot;The EC2 instances screen on US West 1 region&quot;&gt;
				&lt;img src=&quot;/image/spider-aws/instances.us-west-1.png&quot; alt=&quot;AWS console&quot; /&gt;
				&lt;/a&gt;
				&lt;a href=&quot;/image/spider-aws/spiders-with-master.png&quot; title=&quot;In Tokyo region lies the « spider master »&quot;&gt;
				&lt;img src=&quot;/image/spider-aws/spiders-with-master.png&quot; alt=&quot;AWS console&quot; /&gt;
				&lt;/a&gt;
				&lt;a href=&quot;/image/spider-aws/shutting-down.png&quot; title=&quot;Job done, spiders are shut down now.&quot;&gt;
				&lt;img src=&quot;/image/spider-aws/shutting-down.png&quot; alt=&quot;AWS console&quot; /&gt;
				&lt;/a&gt;
				&lt;/figure&gt;</content><author><name>iBug</name></author><category term="story" /><category term="web" /><category term="web-scraping" /><category term="aws" /><summary type="html">The 3rd-and-last experiment of course Web Information Processing and Application required us to create a recommendation engine, and “predict” the rating (1-5 stars) for 4M user-item pairs based on the training data of 9M user-item pairs and a social network.</summary></entry><entry><title type="html">Managing servers with OpenSSH Certificate Authority</title><link href="https://ibug.io/blog/2019/12/manage-servers-with-ssh-ca/" rel="alternate" type="text/html" title="Managing servers with OpenSSH Certificate Authority" /><published>2019-12-23T00:00:00+00:00</published><updated>2020-04-20T22:29:05+00:00</updated><id>https://ibug.io/blog/2019/12/manage-servers-with-ssh-ca</id><content type="html" xml:base="https://ibug.io/blog/2019/12/manage-servers-with-ssh-ca/">&lt;p&gt;Since the addition of the website server for an external corporation, I now have 5 Linux servers to manage on my own. I also have 4 terminal devices that I use to connect to those servers: two of my laptops, my Android phone (using &lt;a href=&quot;https://termux.com/&quot;&gt;Termux&lt;/a&gt;), and one of those servers that I use as a workstation.&lt;/p&gt;
				&lt;p&gt;Managing SSH keys has always been a headache for this many computers, as all of them on one side have to be updated of the new key whenever one on the other side changes or rotates its key. In case of a client key change, the new key must be uploaded to all servers. And in a worse case where the original key is lost, the uploading needs to be done with the help of another client (computer or phone), which is an additional layer of unnecessary complexity and cumber.&lt;/p&gt;
				&lt;p&gt;Not until I took over a system of many servers did I learn about SSH CA. It’s for sure to the rescue!&lt;/p&gt;
				&lt;h2 id=&quot;what-is-an-ssh-ca&quot;&gt;What is an SSH CA?&lt;/h2&gt;
				&lt;p&gt;Long story short, an SSH Certificate Authority is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Certificate_authority&quot;&gt;certificate authority&lt;/a&gt; for SSH hosts. A client can trust all server signed by the CA by simply trusting the CA. And more powerfully, a server can &lt;em&gt;also&lt;/em&gt; trust all user keys if the user key has a signature from the CA, and the server trusts the CA for signing user keys.&lt;/p&gt;
				&lt;p&gt;By properly configuring servers and clients, a rotated or otherwise changed key, be it a host key or a user key, will no longer cause chaos of copying public keys from everywhere, to everywhere. The follow-up is as simple as getting another CA signature for the new key, and everything will go smoothly as if nothing has happened.&lt;/p&gt;
				&lt;h2 id=&quot;creating-an-ssh-ca&quot;&gt;Creating an SSH CA&lt;/h2&gt;
				&lt;p&gt;Creating a CA is as easy as generating a key pair for it, and publishing its public key.&lt;/p&gt;
				&lt;p&gt;To generate a key pair for a CA, you’d do it the usual way you generate a regular SSH key pair:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-f&lt;/span&gt; my_ca
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Proceed through the prompts, and you’ll find two files &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_ca&lt;/code&gt; and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;my_ca.pub&lt;/code&gt; in your current directory. Contrary to SSH keys that you use for regular purposes, I highly recommend setting a password for this key, since it’s going to be &lt;em&gt;way&lt;/em&gt; more powerful than those. Protect the private key carefully, and leave the public part somewhere easily accessible, like &lt;a href=&quot;https://ibugone.com/assets/ssh-ca.pub.txt&quot;&gt;mine&lt;/a&gt;.&lt;/p&gt;
				&lt;h2 id=&quot;authenticating-hosts-with-ssh-ca&quot;&gt;Authenticating hosts with SSH CA&lt;/h2&gt;
				&lt;h3 id=&quot;sign-a-host-key&quot;&gt;Sign a host key&lt;/h3&gt;
				&lt;p&gt;To sign a host key with your CA, copy its &lt;strong&gt;public&lt;/strong&gt; part (like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh_host_rsa_key.pub&lt;/code&gt;) to a convenient place, and run the following command.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; &amp;lt;ca private key&amp;gt; &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &amp;lt;signature name&amp;gt; &lt;span class=&quot;nt&quot;&gt;-h&lt;/span&gt; &amp;lt;host key&amp;gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You’ll find a file named &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh_host_rsa_key-cert.pub&lt;/code&gt; in your current directory, which you should copy back to the server. Because sshd(8) doesn’t look for host certificates by default, you shold edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; to instruct it to do so. Add this line to the file to let it work:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;HostCertificate /etc/ssh/ssh_host_rsa_key-cert.pub
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Then run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl reload ssh&lt;/code&gt; (or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service sshd reload&lt;/code&gt; if you’re not running on systemd) to reload the configuration.&lt;/p&gt;
				&lt;h3 id=&quot;restrict-signature-validity-range&quot;&gt;Restrict signature validity range&lt;/h3&gt;
				&lt;p&gt;As a security measure, you probably don’t want the signature remain valid even if stolen. The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; option is there for you to specify “valid principals”. For example, you can specify a signature valid for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.ibugone.com,10.250.0.2&lt;/code&gt;, and this signature is accepted by clients only if the server is accessed from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;s.ibugone.com&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.250.0.2&lt;/code&gt;. If someone steals the private key and the CA signature and installs it on another host, for example &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;q.ibugone.com&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;10.250.0.3&lt;/code&gt;, the SSH client will complain:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Certificate invalid: name is not a listed principal
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Unless the attacker can hijack your DNS (for authenticated domain names) or even your routers (for plain IP addresses), this signature is useless when stolen, and you can safely forget about it and sign a new one for the regenerated host key.&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;tip&quot;&gt;&lt;i class=&quot;far fa-lightbulb&quot;&gt;&lt;/i&gt; Tip&lt;/h4&gt;
				&lt;p&gt;You can see the certificate information using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen -L&lt;/code&gt; command. For example:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-Lf&lt;/span&gt; /etc/ssh/ssh_host_rsa_key-cert.pub
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;/div&gt;
				&lt;h3 id=&quot;configure-clients&quot;&gt;Configure clients&lt;/h3&gt;
				&lt;p&gt;Now let’s configure clients to trust CA signatures. You’ll need to publish the public key of the CA (as said before) so clients can easily acquire it. Put a line like this in a client’s &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt; file:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@cert-authority * ssh-rsa &amp;lt;publicKeyGibberish&amp;gt;
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You can automate the addition of the above line using shell scripts:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;printf&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;@cert-authority * &quot;&lt;/span&gt; | &lt;span class=&quot;nb&quot;&gt;cat&lt;/span&gt; - my_ca.pub &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; ~/.ssh/known_hosts
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Now try SSHing into a host with a CA signature. You’ll notice that SSH doesn’t prompt for “unknown host” even if it’s not listed in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;known_hosts&lt;/code&gt; file, which is because of the magic of the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;@cert-authority&lt;/code&gt; line. Should you be interested in the details, you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -vvv&lt;/code&gt; to let SSH client generate extra information.&lt;/p&gt;
				&lt;h2 id=&quot;authenticating-users-with-ssh-ca&quot;&gt;Authenticating users with SSH CA&lt;/h2&gt;
				&lt;h3 id=&quot;configure-servers&quot;&gt;Configure servers&lt;/h3&gt;
				&lt;p&gt;We’ll start this part with server side configuration. We want the server to trust user certificates signed by the CA, so we’ll copy the CA’s public key onto the server, and again edit &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/sshd_config&lt;/code&gt; and add the following line.&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;TrustedUserCAKeys /etc/ssh/ssh_user_ca
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;Make sure you’ve put the CA public key at &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/ssh_user_ca&lt;/code&gt;, or you should change the path in the above configuration accordingly. Again, run &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;systemctl reload ssh&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;service sshd reload&lt;/code&gt; to reload the SSH server.&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;pro-tip&quot;&gt;&lt;i class=&quot;far fa-lightbulb&quot;&gt;&lt;/i&gt; Pro Tip&lt;/h4&gt;
				&lt;p&gt;Did you notice that the configuration line is named CA&lt;strong&gt;Keys&lt;/strong&gt;, not just CA&lt;strong&gt;Key&lt;/strong&gt;? Yes, you can add multiple public keys to that file just like you’re already doing with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;authorized_keys&lt;/code&gt; file.&lt;/p&gt;
				&lt;/div&gt;
				&lt;h3 id=&quot;sign-user-keys&quot;&gt;Sign user keys&lt;/h3&gt;
				&lt;p&gt;Now, to grant access to all servers configured this way to a user, ask for their public key and create a signature. The command is similar to that when signing a host certificate, except that there’s no &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-h&lt;/code&gt; switch (it’s for signing hosts), and the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; (named principals) option is mandatory this time.&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ssh-keygen &lt;span class=&quot;nt&quot;&gt;-s&lt;/span&gt; my_ca &lt;span class=&quot;nt&quot;&gt;-I&lt;/span&gt; &amp;lt;user name&amp;gt; &lt;span class=&quot;nt&quot;&gt;-n&lt;/span&gt; root,ubuntu id_rsa.pub
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;This will create a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;id_rsa-cert.pub&lt;/code&gt; file under the current directory, which you want to send back to the user so they can use this signature to log in to servers.&lt;/p&gt;
				&lt;p&gt;Contrary to host signatures, the SSH client doesn’t need extra configuration, because it automatically looks for the certificate file by appending &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-cert.pub&lt;/code&gt; to the name of the private key. Again you can use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -vvv&lt;/code&gt; to see what’s going on under the hood.&lt;/p&gt;
				&lt;h3 id=&quot;separating-access-to-different-hosts&quot;&gt;Separating access to different hosts&lt;/h3&gt;
				&lt;p&gt;As you’ve probably noticed, if you sign a user certificate with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; being a listed principal, the corresponding private key can be used to log in as root on &lt;em&gt;ALL&lt;/em&gt; servers that trust the certificate authority. This is rarely a desired result, and you’re probably looking for a cure for the issue.&lt;/p&gt;
				&lt;p&gt;Fortunately, SSH supports an “authorized principals” setting, which allows granting access to users with specific “principals”. In general, you want separate authorized principals for different users on hosts. Here’s what you can start with, by enabling this setting in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;AuthorizedPrincipalsFile /etc/ssh/authorized_principals/%u
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;You can then create lists of authorized names for each user under &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/authorized_principals&lt;/code&gt;. For example, you can have the following lines in &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/ssh/authorized_principals/root&lt;/code&gt;:&lt;/p&gt;
				&lt;div class=&quot;language-text highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;taokystrong
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;p&gt;After reloading SSH server, users with a certificate containing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taokystrong&lt;/code&gt; as a listed principal (supplied by the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;-n&lt;/code&gt; option when signing the certificate using &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh-keygen&lt;/code&gt;) can log in as root on this host (and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;taokystrong&lt;/code&gt; as well), but not any other user on this host, or the root user on any other server. Note that certificates signed for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;root&lt;/code&gt; can still log in as root on any servers that trust this CA.&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 class=&quot;no_toc&quot; id=&quot;good-practices&quot;&gt;Good practices&lt;/h4&gt;
				&lt;p&gt;For personal uses, it’s perfectly fine to use one CA for both hosts and users, but in larger corporations with a complex server layout, it’s a general practice to use separate CAs for host authentication and user authentication.&lt;/p&gt;
				&lt;/div&gt;
				&lt;h2 id=&quot;other-tips&quot;&gt;Other tips&lt;/h2&gt;
				&lt;p&gt;OpenSSH is a complicated and powerful SSH ecosystem. There are far more available options than those described in this article. For example, certificates can have a “validity period”, and the commands can also be limited (instead of granting a full shell).&lt;/p&gt;
				&lt;p&gt;For more detailed and authoritative information about thses configuration, &lt;a href=&quot;https://linux.die.net/man/5/sshd_config&quot;&gt;the man page for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;sshd_config&lt;/code&gt;&lt;/a&gt; is always a good point to look at.&lt;/p&gt;</content><author><name>iBug</name></author><category term="linux" /><category term="ssh" /><summary type="html">Since the addition of the website server for an external corporation, I now have 5 Linux servers to manage on my own. I also have 4 terminal devices that I use to connect to those servers: two of my laptops, my Android phone (using Termux), and one of those servers that I use as a workstation.</summary></entry><entry><title type="html">How to change email of your Nvidia account</title><link href="https://ibug.io/blog/2019/11/change-nvidia-account-email/" rel="alternate" type="text/html" title="How to change email of your Nvidia account" /><published>2019-11-22T00:00:00+00:00</published><updated>2020-08-13T11:26:46+00:00</updated><id>https://ibug.io/blog/2019/11/change-nvidia-account-email</id><content type="html" xml:base="https://ibug.io/blog/2019/11/change-nvidia-account-email/">&lt;p&gt;I recently retired a few old email addresses, and am currently going in a row to change email for accounts associated with those emails. Everything else went smoothly, with my Nvidia account being an exception - There wasn’t an option to change it!&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/main-page.png&quot; alt=&quot;no change option?!?&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;My first idea was to Google for solutions, and the first few results were on the GeForce forum saying you need to contact supprt. I did so, and ended up being told that emails can only be changed once per account, and there’s no more option to change it once more. What a terrible UX design!&lt;/p&gt;
				&lt;p&gt;I decided to give it a try to work around this. I first created another account and checked where the [Change Email] was located. Not any hard.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/change-button.png&quot; alt=&quot;the change button&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;From a web developer’s perspective, it’s a must to open F12 Developer Tools and examine the button:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/change-button-f12.png&quot; alt=&quot;the change button - examined&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Then I switched back to my old account and examined the same part of HTML:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/change-button-disabled-f12.png&quot; alt=&quot;no change button - examined&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Now it seems clear to me: The last thing to do before succeeding is to purge that &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;display: none;&lt;/code&gt; from the button. Double-click on the text and you can delete it with ease:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/nv-account/removing-style.png&quot; alt=&quot;remove display none&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Voilà! You can now click it to change email for your Nvidia account. Why on earth did they decide that email can only be changed once per account? It sucks!&lt;/p&gt;</content><author><name>iBug</name></author><category term="lifehacks" /><summary type="html">I recently retired a few old email addresses, and am currently going in a row to change email for accounts associated with those emails. Everything else went smoothly, with my Nvidia account being an exception - There wasn’t an option to change it!</summary></entry><entry><title type="html">Make your GitHub Pages website faster with Cloudflare</title><link href="https://ibug.io/blog/2019/11/optimize-github-pages-with-cloudflare/" rel="alternate" type="text/html" title="Make your GitHub Pages website faster with Cloudflare" /><published>2019-11-11T00:00:00+00:00</published><updated>2020-04-23T23:07:47+00:00</updated><id>https://ibug.io/blog/2019/11/optimize-github-pages-with-cloudflare</id><content type="html" xml:base="https://ibug.io/blog/2019/11/optimize-github-pages-with-cloudflare/">&lt;p&gt;This September I employed Cloudflare to optimize my website (&lt;a href=&quot;https://ibugone.com&quot;&gt;https://ibugone.com&lt;/a&gt;) in various aspects. It turned out to be a brilliant move and Cloudflare has proved to be a great service to have.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/homepage.jpg&quot; alt=&quot;Landing page of my website&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;h2 id=&quot;benefits&quot;&gt;Benefits&lt;/h2&gt;
				&lt;h3 id=&quot;faster-site-loading&quot;&gt;Faster site loading&lt;/h3&gt;
				&lt;p&gt;While I haven’t made strict benchmarks, people all over the world have reported that my website loads faster and smoother than before.&lt;/p&gt;
				&lt;p&gt;My website is a Jekyll-generated static site, hosted with &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. Currently (August 2019) GitHub provides 4 IPs that are actually behind Fastly CDN, making all GitHub Pages website rather fast already given Fastly’s global point of presence (PoP).&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;h4 id=&quot;did-you-know&quot;&gt;Did you know&lt;/h4&gt;
				&lt;p&gt;You can examine the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;X-Served-By&lt;/code&gt; header of the response from GitHub Pages servers to see which edge location your website is served from. For example:&lt;/p&gt;
				&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;curl &lt;span class=&quot;nt&quot;&gt;-v&lt;/span&gt; https://ibug.github.io/ &lt;span class=&quot;nt&quot;&gt;-H&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'Host: ibugone.com'&lt;/span&gt;
				...
				X-Served-By: cache-tyo19946-TYO
				...
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
				&lt;p&gt;The &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TYO&lt;/code&gt; key indicates that my request went through Fastly’s Tokyo endpoint.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;Interestingly, the version of Fastly CDN uses the same technology as Cloudflare that I’m introducing below, which is &lt;a href=&quot;https://en.wikipedia.org/wiki/Anycast&quot;&gt;Anycast&lt;/a&gt;. What makes Cloudflare stand out is &lt;a href=&quot;https://www.codeinwp.com/blog/maxcdn-vs-cloudflare-vs-cloudfront-vs-akamai-edge-vs-fastly/#locations&quot;&gt;its global points of presence&lt;/a&gt; - virtually everywhere and goes behind only Akamai.&lt;/p&gt;
				&lt;h3 id=&quot;http-settings&quot;&gt;Custom behavior of HTTP response&lt;/h3&gt;
				&lt;p&gt;If you host your site on vanilla GitHub Pages, there’s not much you can do with HTTP response, like cache control and redirects. By default, GitHub Pages sets all expiration times for static assets to 10 minutes, but for sure you may want certain files to be cached for longer. Like me, I would like all images on my site to be cached for as long as possible, which is not possible with GitHub Pages on its own.&lt;/p&gt;
				&lt;p&gt;Cloudflare offers a variety of tweaks via Page Rules, so I could achieve my goal with a Page Rule setting:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/cloudflare/image-caching.png&quot; alt=&quot;My Cloudflare setting for image caching&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;Instead of fetching an identical copy from GitHub Pages’ origin server, browsers will now cache all image on my website for a year, and Cloudflare’s CDN servers will cache my images for up to 30 days. Other available options include redirection and performance optimizations, and it’s up to you to explore them all.&lt;/p&gt;
				&lt;h3 id=&quot;more-secure-https-settings&quot;&gt;More secure HTTPS settings&lt;/h3&gt;
				&lt;p&gt;Some time ago, GitHub Pages didn’t support HTTPS with custom domains, which was quite a downside for such a popular service. At that time, Cloudflare was almost the only option to add HTTPS support to your website. While now this is no longer the case, there’re still some weaknesses and limitations, for example the lack of support for HSTS and the occasional failure of renewing an SSL certificate. With Cloudflare you can add HSTS headers to all responses coming from your website, further improving security.&lt;/p&gt;
				&lt;h2 id=&quot;the-setup&quot;&gt;The setup&lt;/h2&gt;
				&lt;h3 id=&quot;get-your-custom-domain-onto-cloudflare&quot;&gt;Get your custom domain onto Cloudflare&lt;/h3&gt;
				&lt;p&gt;Besides CDN, Cloudflare is also a fantastic DNS provider. To get started with Cloudflare, you’ll first move your domain’s DNS to Cloudflare. &lt;a href=&quot;https://dash.cloudflare.com/sign-up&quot;&gt;Sign up&lt;/a&gt; if you don’t already have an account.&lt;/p&gt;
				&lt;p&gt;Next, you’ll be prompted for the domain you want to add to Cloudflare. Enter the domain and Cloudflare will perform a quick scan of all records, and you can manually review them and add missing records, if any.&lt;/p&gt;
				&lt;p&gt;To enable Cloudflare CDN for domains under which you run a website, click the grey cloud icon so it becomes orange. This means that website will be proxied and delivered via Cloudflare, and its DNS record will instead resolve to some of Cloudflare’s IPs.&lt;/p&gt;
				&lt;p&gt;That’s all, isn’t it simple? But wait, there’s more that Cloudflare provides, and you can now explore all of them and see which fits your needs.&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/cloudflare/apps.png&quot; alt=&quot;Apps that Cloudflare provides&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;h3 id=&quot;using-page-rules&quot;&gt;Using Page Rules&lt;/h3&gt;
				&lt;p&gt;Let’s turn our focus onto the Page Rules app. With Page Rules you can configure Cloudflare behavior on specific “routes”, or URL patterns. One common use case is to create a permanent redirect from your &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www&lt;/code&gt; domain to your apex domain, or in the reverse direction.&lt;/p&gt;
				&lt;p&gt;For example, if I want to create a permanent redirect from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;www.ibugone.com&lt;/code&gt; to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibugone.com&lt;/code&gt;, I would create a Page Rule like this:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/cloudflare/page-rule-301.png&quot; alt=&quot;Page Rule for 301 redirection from www.ibugone.com to ibugone.com&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;And there’s an aggressive image caching setting &lt;a href=&quot;#http-settings&quot;&gt;described before&lt;/a&gt;. There are many Page Rule options for you to explore, and there are always one or more that fits your needs.&lt;/p&gt;
				&lt;h3 id=&quot;more-features&quot;&gt;Get the best out of Cloudflare&lt;/h3&gt;
				&lt;p&gt;For newer webmasters, you might want to ensure &lt;strong&gt;SSL / TLS&lt;/strong&gt; works as expected. The &lt;strong&gt;Full&lt;/strong&gt; mode makes Cloudflare fetch original content from your website via HTTPS without validating the certificate on your server. For GitHub Pages this is the option you generally want, as GitHub Pages presents its default certificate for &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;*.github.io&lt;/code&gt; if it doesn’t have a certificate for your domain. This is good enough for your website behind Cloudflare.&lt;/p&gt;
				&lt;p&gt;You can also enable better security by enabling latest security features in &lt;strong&gt;Edge Certificates&lt;/strong&gt; tab of the &lt;strong&gt;SSL / TLS&lt;/strong&gt; app, where you can set the minimum SSL version (TLS 1.2 recommended) and enable automatic HTTPS redirection. This will not only make your website more secure to visitors, but also give you a boost in SEO, as modern search engines favor HTTPS websites over HTTP ones. Though, you might not want to jump straight to HSTS before you’re absolutely ready (see &lt;a href=&quot;https://support.cloudflare.com/hc/en-us/articles/204183088-Understanding-HSTS-HTTP-Strict-Transport-Security-&quot;&gt;Cloudflare article&lt;/a&gt;).&lt;/p&gt;
				&lt;div class=&quot;notice--primary&quot;&gt;
				&lt;p&gt;I have moved the entire domain &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ibugone.com&lt;/code&gt; onto HSTS and get it preloaded because I’m confident I can handle it.&lt;/p&gt;
				&lt;/div&gt;
				&lt;p&gt;You may also want to tune your website for better performance by changing the settings under the &lt;strong&gt;Speed&lt;/strong&gt; app, for example enabling HTTP/2 and auto minifying.&lt;/p&gt;
				&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;
				&lt;ul&gt;
				&lt;li&gt;Cloudflare has &lt;a href=&quot;https://blog.cloudflare.com/secure-and-fast-github-pages-with-cloudflare/&quot;&gt;an official blog&lt;/a&gt; on introducing Cloudflare to GitHub Pages, and it’s actually a start-from-scratch tutorial for creating a static website and then deploying Cloudflare CDN over it.&lt;/li&gt;
				&lt;/ul&gt;</content><author><name>iBug</name></author><category term="github-pages" /><category term="cloudflare" /><summary type="html">This September I employed Cloudflare to optimize my website (https://ibugone.com) in various aspects. It turned out to be a brilliant move and Cloudflare has proved to be a great service to have.</summary></entry><entry><title type="html">Converting DFA to Regular Expression</title><link href="https://ibug.io/blog/2019/09/convert-dfa-to-regex/" rel="alternate" type="text/html" title="Converting DFA to Regular Expression" /><published>2019-09-25T00:00:00+00:00</published><updated>2020-08-13T11:26:46+00:00</updated><id>https://ibug.io/blog/2019/09/convert-dfa-to-regex</id><content type="html" xml:base="https://ibug.io/blog/2019/09/convert-dfa-to-regex/">&lt;p&gt;This post originated from Lab 1 of course &lt;em&gt;Compilers: Principles&lt;/em&gt; that I’m currently taking, in which we were required to write a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flex&lt;/code&gt; program to parse a subset of the C language. The multiline comment &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/* */&lt;/code&gt; was the most troublesome to handle for most of us (excluding me, for sure).&lt;/p&gt;
				&lt;h2 id=&quot;the-process&quot;&gt;The process&lt;/h2&gt;
				&lt;p&gt;I’ll assume you’ve already drawn a DFA for the multiline-comment structure, so here it is:&lt;/p&gt;
				&lt;p&gt;&lt;img src=&quot;/image/dfa-comment.png&quot; alt=&quot;DFA for the multiline comment&quot; class=&quot;block&quot; /&gt;&lt;/p&gt;
				&lt;p&gt;We’re first going to turn it into “state transformation equations”, so it looks like this:&lt;/p&gt;
				\[A = \texttt{/*} \mid A\texttt{[^*]} \mid B\texttt{[^*/]}
				\\
				B = A\texttt{*} \mid B\texttt{*}
				\\
				C = B\texttt{/}\]
				&lt;p&gt;The first step we’re taking is to realize that $A=S \mid Aa$ is easily found to be equivalent to $A = Sa^*$, where the superscript asterisk means “repeat 0 or more times”. So $B$ can be turned into&lt;/p&gt;
				\[B = A\texttt{**}^* = A\texttt{*}^+\]
				&lt;p&gt;Again, the superscript plus means “repeat 1 or more times” as the same in PCRE.&lt;/p&gt;
				&lt;p&gt;Now it’s time to substitute $B$ with its simplified expression:&lt;/p&gt;
				\[A =  \texttt{/*} \mid A\texttt{[^*]} \mid A\texttt{*}^+\texttt{[^*/]}
				\\
				C = A\texttt{*}^+\texttt{/}\]
				&lt;p&gt;Note that there’s a &lt;em&gt;distributive property&lt;/em&gt; here, which described using symbols, is that $Aa \mid Ab = A(a\mid b)$, so now we have&lt;/p&gt;
				\[A = \texttt{/*} \mid A\ (\texttt{[^*]} \mid \texttt{*}^+\texttt{[^*/]})\]
				&lt;p&gt;Applying the first transformation $A = S \mid Aa = Sa^*$, we have&lt;/p&gt;
				\[A = \texttt{/*}\ (\texttt{[^*]} \mid \texttt{*}^+\texttt{[^*/]})^*\]
				&lt;p&gt;Now there’s no recursion in the new “state transformation equation”, so we can substitute $A$ with this final expression and get the regular expression for $C$, the result we want:&lt;/p&gt;
				\[C = A\texttt{*}^+\texttt{/} =
				\texttt{/*}\ (\texttt{[^*]} \mid \texttt{*}^+\texttt{[^*/]})^*\ \texttt{*}^+\texttt{/}\]
				&lt;p&gt;Converting the above regular expression to code, we now have&lt;/p&gt;
				&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;C = \/\*([^*]|\*+[^*/])*\*+\/
				&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
				&lt;h3 id=&quot;try-it-online-with-regex101&quot;&gt;&lt;a href=&quot;https://regex101.com/r/qAog6Z/1&quot;&gt;Try it online with RegEx101!&lt;/a&gt;&lt;/h3&gt;
				&lt;hr /&gt;
				&lt;p&gt;Now can you imagine how to use regular expressions to match multiples of 3 (base 10)? Yes, it’s entirely possible. See &lt;a href=&quot;https://www.quaxio.com/triple/&quot;&gt;this fantastic article &lt;i class=&quot;fa fas fa-xs fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt; for details, which uses essentially the same techniques to convert a DFA (or a finite-state machine) to a regular expression that does the job.&lt;/p&gt;</content><author><name>iBug</name></author><category term="study-notes" /><category term="regular-expression" /><summary type="html">This post originated from Lab 1 of course Compilers: Principles that I’m currently taking, in which we were required to write a flex program to parse a subset of the C language. The multiline comment /* */ was the most troublesome to handle for most of us (excluding me, for sure).</summary></entry></feed>